{"ast":null,"code":"import _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/studylist/StudyListWithData.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF from 'ohif-core';\nimport { withRouter } from 'react-router-dom';\nimport { StudyList } from 'react-viewerbase';\nimport ConnectedHeader from '../connectedComponents/ConnectedHeader.js';\nimport moment from 'moment';\n\nvar StudyListWithData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StudyListWithData, _Component);\n\n  function StudyListWithData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StudyListWithData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StudyListWithData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchData: {},\n      studies: null,\n      error: null\n    };\n\n    _this.searchForStudies = function () {\n      var searchData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        currentPage: 0,\n        rowsPerPage: StudyListWithData.rowsPerPage,\n        studyDateFrom: StudyListWithData.defaultStudyDateFrom,\n        studyDateTo: StudyListWithData.defaultStudyDateTo,\n        sortData: StudyListWithData.defaultSort\n      };\n      var server = _this.props.server;\n      var filter = {\n        patientId: searchData.patientId,\n        patientName: searchData.patientName,\n        accessionNumber: searchData.accessionNumber,\n        studyDescription: searchData.studyDescription,\n        modalitiesInStudy: searchData.modalities,\n        studyDateFrom: searchData.studyDateFrom,\n        studyDateTo: searchData.studyDateTo,\n        limit: searchData.rowsPerPage,\n        offset: searchData.currentPage * searchData.rowsPerPage\n      }; // TODO: add sorting\n\n      var promise = OHIF.studies.searchStudies(server, filter); // Render the viewer when the data is ready\n\n      promise.then(function (studies) {\n        if (!studies) {\n          studies = [];\n        }\n\n        var _searchData$sortData = searchData.sortData,\n            field = _searchData$sortData.field,\n            order = _searchData$sortData.order;\n        var sortedStudies = studies.map(function (study) {\n          if (!moment(study.studyDate, 'MMM DD, YYYY', true).isValid()) {\n            study.studyDate = moment(study.studyDate, 'YYYYMMDD').format('MMM DD, YYYY');\n          }\n\n          return study;\n        });\n        sortedStudies.sort(function (a, b) {\n          var fieldA = a[field];\n          var fieldB = b[field];\n\n          if (field === 'studyDate') {\n            fieldA = moment(fieldA).toISOString();\n            fieldB = moment(fieldB).toISOString();\n          }\n\n          if (order === 'desc') {\n            if (fieldA < fieldB) {\n              return -1;\n            }\n\n            if (fieldA > fieldB) {\n              return 1;\n            }\n\n            return 0;\n          } else {\n            if (fieldA > fieldB) {\n              return -1;\n            }\n\n            if (fieldA < fieldB) {\n              return 1;\n            }\n\n            return 0;\n          }\n        });\n\n        _this.setState({\n          studies: sortedStudies\n        });\n      }).catch(function (error) {\n        _this.setState({\n          error: true\n        });\n\n        throw new Error(error);\n      });\n    };\n\n    _this.onImport = function () {//console.log('onImport');\n    };\n\n    _this.onSelectItem = function (studyInstanceUID) {\n      _this.props.history.push(\"/viewer/\".concat(studyInstanceUID));\n    };\n\n    _this.onSearch = function (searchData) {\n      _this.searchForStudies(searchData);\n    };\n\n    return _this;\n  }\n\n  _createClass(StudyListWithData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // TODO: Avoid using timepoints here\n      //const params = { studyInstanceUids, seriesInstanceUids, timepointId, timepointsFilter={} };\n      this.searchForStudies();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"Error: \", JSON.stringify(this.state.error));\n      } else if (this.state.studies === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(ConnectedHeader, {\n        home: true,\n        user: this.props.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(StudyList, {\n        studies: this.state.studies,\n        studyListFunctionsEnabled: false,\n        onImport: this.onImport,\n        onSelectItem: this.onSelectItem,\n        pageSize: this.rowsPerPage,\n        defaultSort: StudyListWithData.defaultSort,\n        studyListDateFilterNumDays: StudyListWithData.studyListDateFilterNumDays,\n        onSearch: this.onSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StudyListWithData;\n}(Component);\n\nStudyListWithData.propTypes = {\n  patientId: PropTypes.string,\n  server: PropTypes.object,\n  user: PropTypes.object,\n  history: PropTypes.object\n};\nStudyListWithData.rowsPerPage = 25;\nStudyListWithData.defaultSort = {\n  field: 'patientName',\n  order: 'desc'\n};\nStudyListWithData.studyListDateFilterNumDays = 25000;\nStudyListWithData.defaultStudyDateFrom = moment().subtract(StudyListWithData.studyListDateFilterNumDays, 'days').toDate();\nStudyListWithData.defaultStudyDateTo = new Date();\nexport default withRouter(StudyListWithData);","map":{"version":3,"sources":["/home/bitnami/Viewers/src/studylist/StudyListWithData.js"],"names":["React","Component","PropTypes","OHIF","withRouter","StudyList","ConnectedHeader","moment","StudyListWithData","state","searchData","studies","error","searchForStudies","currentPage","rowsPerPage","studyDateFrom","defaultStudyDateFrom","studyDateTo","defaultStudyDateTo","sortData","defaultSort","server","props","filter","patientId","patientName","accessionNumber","studyDescription","modalitiesInStudy","modalities","limit","offset","promise","searchStudies","then","field","order","sortedStudies","map","study","studyDate","isValid","format","sort","a","b","fieldA","fieldB","toISOString","setState","catch","Error","onImport","onSelectItem","studyInstanceUID","history","push","onSearch","JSON","stringify","user","studyListDateFilterNumDays","propTypes","string","object","subtract","toDate","Date"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF from 'ohif-core';\nimport { withRouter } from 'react-router-dom';\nimport { StudyList } from 'react-viewerbase';\nimport ConnectedHeader from '../connectedComponents/ConnectedHeader.js';\nimport moment from 'moment';\n\nclass StudyListWithData extends Component {\n  state = {\n    searchData: {},\n    studies: null,\n    error: null,\n  };\n\n  static propTypes = {\n    patientId: PropTypes.string,\n    server: PropTypes.object,\n    user: PropTypes.object,\n    history: PropTypes.object,\n  };\n\n  static rowsPerPage = 25;\n  static defaultSort = { field: 'patientName', order: 'desc' };\n\n  static studyListDateFilterNumDays = 25000; // TODO: put this in the settings\n  static defaultStudyDateFrom = moment()\n    .subtract(StudyListWithData.studyListDateFilterNumDays, 'days')\n    .toDate();\n  static defaultStudyDateTo = new Date();\n\n  componentDidMount() {\n    // TODO: Avoid using timepoints here\n    //const params = { studyInstanceUids, seriesInstanceUids, timepointId, timepointsFilter={} };\n\n    this.searchForStudies();\n  }\n\n  searchForStudies = (\n    searchData = {\n      currentPage: 0,\n      rowsPerPage: StudyListWithData.rowsPerPage,\n      studyDateFrom: StudyListWithData.defaultStudyDateFrom,\n      studyDateTo: StudyListWithData.defaultStudyDateTo,\n      sortData: StudyListWithData.defaultSort,\n    }\n  ) => {\n    const { server } = this.props;\n    const filter = {\n      patientId: searchData.patientId,\n      patientName: searchData.patientName,\n      accessionNumber: searchData.accessionNumber,\n      studyDescription: searchData.studyDescription,\n      modalitiesInStudy: searchData.modalities,\n      studyDateFrom: searchData.studyDateFrom,\n      studyDateTo: searchData.studyDateTo,\n      limit: searchData.rowsPerPage,\n      offset: searchData.currentPage * searchData.rowsPerPage,\n    };\n\n    // TODO: add sorting\n    const promise = OHIF.studies.searchStudies(server, filter);\n\n    // Render the viewer when the data is ready\n    promise\n      .then(studies => {\n        if (!studies) {\n          studies = [];\n        }\n\n        const { field, order } = searchData.sortData;\n        let sortedStudies = studies.map(study => {\n          if (!moment(study.studyDate, 'MMM DD, YYYY', true).isValid()) {\n            study.studyDate = moment(study.studyDate, 'YYYYMMDD').format(\n              'MMM DD, YYYY'\n            );\n          }\n          return study;\n        });\n\n        sortedStudies.sort(function(a, b) {\n          let fieldA = a[field];\n          let fieldB = b[field];\n          if (field === 'studyDate') {\n            fieldA = moment(fieldA).toISOString();\n            fieldB = moment(fieldB).toISOString();\n          }\n          if (order === 'desc') {\n            if (fieldA < fieldB) {\n              return -1;\n            }\n            if (fieldA > fieldB) {\n              return 1;\n            }\n            return 0;\n          } else {\n            if (fieldA > fieldB) {\n              return -1;\n            }\n            if (fieldA < fieldB) {\n              return 1;\n            }\n            return 0;\n          }\n        });\n\n        this.setState({\n          studies: sortedStudies,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error: true,\n        });\n\n        throw new Error(error);\n      });\n  };\n\n  onImport = () => {\n    //console.log('onImport');\n  };\n\n  onSelectItem = studyInstanceUID => {\n    this.props.history.push(`/viewer/${studyInstanceUID}`);\n  };\n\n  onSearch = searchData => {\n    this.searchForStudies(searchData);\n  };\n\n  render() {\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    } else if (this.state.studies === null) {\n      return <div>Loading...</div>;\n    }\n\n    return (\n      <>\n        <ConnectedHeader home={true} user={this.props.user} />\n        <StudyList\n          studies={this.state.studies}\n          studyListFunctionsEnabled={false}\n          onImport={this.onImport}\n          onSelectItem={this.onSelectItem}\n          pageSize={this.rowsPerPage}\n          defaultSort={StudyListWithData.defaultSort}\n          studyListDateFilterNumDays={\n            StudyListWithData.studyListDateFilterNumDays\n          }\n          onSearch={this.onSearch}\n        />\n      </>\n    );\n  }\n}\n\nexport default withRouter(StudyListWithData);\n"]},"metadata":{},"sourceType":"module"}