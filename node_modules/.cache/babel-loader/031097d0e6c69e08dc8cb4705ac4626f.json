{"ast":null,"code":"import { LayoutManager } from 'react-viewerbase';\nimport { MODULE_TYPES } from 'ohif-core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../App.js';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var availableViewportModules = {};\n  var viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n  viewportModules.forEach(function (moduleDefinition) {\n    availableViewportModules[moduleDefinition.extensionId] = moduleDefinition.module;\n  }); // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n\n  var defaultPlugin;\n\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  return {\n    layout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin: defaultPlugin\n  };\n};\n\nvar ConnectedLayoutManager = connect(mapStateToProps, null)(LayoutManager);\nexport default ConnectedLayoutManager;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ConnectedLayoutManager.js"],"names":["LayoutManager","MODULE_TYPES","connect","extensionManager","mapStateToProps","state","availableViewportModules","viewportModules","modules","VIEWPORT","forEach","moduleDefinition","extensionId","module","defaultPlugin","length","layout","viewports","activeViewportIndex","availablePlugins","ConnectedLayoutManager"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,MAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAMC,eAAe,GAAGJ,gBAAgB,CAACK,OAAjB,CAAyBP,YAAY,CAACQ,QAAtC,CAAxB;AAEAF,EAAAA,eAAe,CAACG,OAAhB,CAAwB,UAAAC,gBAAgB,EAAI;AAC1CL,IAAAA,wBAAwB,CAACK,gBAAgB,CAACC,WAAlB,CAAxB,GACED,gBAAgB,CAACE,MADnB;AAED,GAHD,EAJ+B,CAS/B;;AACA,MAAIC,aAAJ;;AACA,MAAIP,eAAe,CAACQ,MAApB,EAA4B;AAC1BD,IAAAA,aAAa,GAAGP,eAAe,CAAC,CAAD,CAAf,CAAmBK,WAAnC;AACD;;AAED,SAAO;AACLI,IAAAA,MAAM,EAAEX,KAAK,CAACY,SAAN,CAAgBD,MADnB;AAELE,IAAAA,mBAAmB,EAAEb,KAAK,CAACY,SAAN,CAAgBC,mBAFhC;AAGL;AACAC,IAAAA,gBAAgB,EAAEb,wBAJb;AAKL;AACAQ,IAAAA,aAAa,EAAbA;AANK,GAAP;AAQD,CAvBD;;AAyBA,IAAMM,sBAAsB,GAAGlB,OAAO,CACpCE,eADoC,EAEpC,IAFoC,CAAP,CAG7BJ,aAH6B,CAA/B;AAKA,eAAeoB,sBAAf","sourcesContent":["import { LayoutManager } from 'react-viewerbase';\nimport { MODULE_TYPES } from 'ohif-core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../App.js';\n\nconst mapStateToProps = state => {\n  const availableViewportModules = {};\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  return {\n    layout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedLayoutManager = connect(\n  mapStateToProps,\n  null\n)(LayoutManager);\n\nexport default ConnectedLayoutManager;\n"]},"metadata":{},"sourceType":"module"}