{"ast":null,"code":"import { connect } from 'react-redux';\nimport { StudyBrowser } from 'react-viewerbase';\nimport cloneDeep from 'lodash.clonedeep'; // TODO\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\n// - Pass in errors and stack loading progress from Redux\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  // If we know that the stack loading progress details have changed,\n  // we can try to update the component state so that the thumbnail\n  // progress bar is updated\n  var stackLoadingProgressMap = state.loading.progress;\n  var studiesWithLoadingData = cloneDeep(ownProps.studies);\n  studiesWithLoadingData.forEach(function (study) {\n    study.thumbnails.forEach(function (data) {\n      var displaySetInstanceUid = data.displaySetInstanceUid;\n      var stackId = \"StackProgress:\".concat(displaySetInstanceUid);\n      var stackProgressData = stackLoadingProgressMap[stackId];\n      var stackPercentComplete = 0;\n\n      if (stackProgressData) {\n        stackPercentComplete = stackProgressData.percentComplete;\n      }\n\n      data.stackPercentComplete = stackPercentComplete;\n    });\n  });\n  return {\n    studies: studiesWithLoadingData\n  };\n};\n\nvar ConnectedStudyBrowser = connect(mapStateToProps, null)(StudyBrowser);\nexport default ConnectedStudyBrowser;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ConnectedStudyBrowser.js"],"names":["connect","StudyBrowser","cloneDeep","mapStateToProps","state","ownProps","stackLoadingProgressMap","loading","progress","studiesWithLoadingData","studies","forEach","study","thumbnails","data","displaySetInstanceUid","stackId","stackProgressData","stackPercentComplete","percentComplete","ConnectedStudyBrowser"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,SAAP,MAAsB,kBAAtB,C,CAEA;AACA;AACA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C;AACA;AACA;AACA,MAAMC,uBAAuB,GAAGF,KAAK,CAACG,OAAN,CAAcC,QAA9C;AACA,MAAMC,sBAAsB,GAAGP,SAAS,CAACG,QAAQ,CAACK,OAAV,CAAxC;AAEAD,EAAAA,sBAAsB,CAACE,OAAvB,CAA+B,UAAAC,KAAK,EAAI;AACtCA,IAAAA,KAAK,CAACC,UAAN,CAAiBF,OAAjB,CAAyB,UAAAG,IAAI,EAAI;AAAA,UACvBC,qBADuB,GACGD,IADH,CACvBC,qBADuB;AAE/B,UAAMC,OAAO,2BAAoBD,qBAApB,CAAb;AACA,UAAME,iBAAiB,GAAGX,uBAAuB,CAACU,OAAD,CAAjD;AAEA,UAAIE,oBAAoB,GAAG,CAA3B;;AACA,UAAID,iBAAJ,EAAuB;AACrBC,QAAAA,oBAAoB,GAAGD,iBAAiB,CAACE,eAAzC;AACD;;AAEDL,MAAAA,IAAI,CAACI,oBAAL,GAA4BA,oBAA5B;AACD,KAXD;AAYD,GAbD;AAeA,SAAO;AACLR,IAAAA,OAAO,EAAED;AADJ,GAAP;AAGD,CAzBD;;AA2BA,IAAMW,qBAAqB,GAAGpB,OAAO,CACnCG,eADmC,EAEnC,IAFmC,CAAP,CAG5BF,YAH4B,CAA9B;AAKA,eAAemB,qBAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { StudyBrowser } from 'react-viewerbase';\nimport cloneDeep from 'lodash.clonedeep';\n\n// TODO\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\n// - Pass in errors and stack loading progress from Redux\nconst mapStateToProps = (state, ownProps) => {\n  // If we know that the stack loading progress details have changed,\n  // we can try to update the component state so that the thumbnail\n  // progress bar is updated\n  const stackLoadingProgressMap = state.loading.progress;\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\n\n  studiesWithLoadingData.forEach(study => {\n    study.thumbnails.forEach(data => {\n      const { displaySetInstanceUid } = data;\n      const stackId = `StackProgress:${displaySetInstanceUid}`;\n      const stackProgressData = stackLoadingProgressMap[stackId];\n\n      let stackPercentComplete = 0;\n      if (stackProgressData) {\n        stackPercentComplete = stackProgressData.percentComplete;\n      }\n\n      data.stackPercentComplete = stackPercentComplete;\n    });\n  });\n\n  return {\n    studies: studiesWithLoadingData,\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  mapStateToProps,\n  null\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n"]},"metadata":{},"sourceType":"module"}