{"ast":null,"code":"import _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/connectedComponents/FlexboxLayout.js\";\nimport './FlexboxLayout.css';\nimport React, { Component } from 'react';\nimport ConnectedMeasurementTable from './ConnectedMeasurementTable';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport PropTypes from 'prop-types';\n\nvar FlexboxLayout =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FlexboxLayout, _Component);\n\n  function FlexboxLayout() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FlexboxLayout);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FlexboxLayout)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      studiesForBrowser: []\n    };\n\n    _this.getStudiesForBrowser = function () {\n      var studies = _this.props.studies; // TODO[react]:\n      // - Add sorting of display sets\n      // - Add useMiddleSeriesInstanceAsThumbnail\n      // - Add showStackLoadingProgressBar option\n\n      return studies.map(function (study) {\n        var studyInstanceUid = study.studyInstanceUid;\n        var thumbnails = study.displaySets.map(function (displaySet) {\n          var displaySetInstanceUid = displaySet.displaySetInstanceUid,\n              seriesDescription = displaySet.seriesDescription,\n              seriesNumber = displaySet.seriesNumber,\n              instanceNumber = displaySet.instanceNumber,\n              numImageFrames = displaySet.numImageFrames;\n          var imageId;\n          var altImageText = ' '; // modality\n\n          if (displaySet.images && displaySet.images.length) {\n            imageId = displaySet.images[0].getImageId();\n          } else {\n            altImageText = 'SR';\n          }\n\n          return {\n            imageId: imageId,\n            altImageText: altImageText,\n            displaySetInstanceUid: displaySetInstanceUid,\n            seriesDescription: seriesDescription,\n            seriesNumber: seriesNumber,\n            instanceNumber: instanceNumber,\n            numImageFrames: numImageFrames\n          };\n        });\n        return {\n          studyInstanceUid: studyInstanceUid,\n          thumbnails: thumbnails\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(FlexboxLayout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.studies) {\n        var studiesForBrowser = this.getStudiesForBrowser();\n        this.setState({\n          studiesForBrowser: studiesForBrowser\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.studies !== prevProps.studies) {\n        var studiesForBrowser = this.getStudiesForBrowser();\n        this.setState({\n          studiesForBrowser: studiesForBrowser\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mainContentClassName = 'main-content';\n\n      if (this.props.leftSidebarOpen) {\n        mainContentClassName += ' sidebar-left-open';\n      }\n\n      if (this.props.rightSidebarOpen) {\n        mainContentClassName += ' sidebar-right-open';\n      } // TODO[react]: Make ConnectedMeasurementTable extension with state.timepointManager\n\n\n      return React.createElement(\"div\", {\n        className: \"FlexboxLayout\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: this.props.leftSidebarOpen ? 'sidebar-menu sidebar-left sidebar-open' : 'sidebar-menu sidebar-left',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(ConnectedStudyBrowser, {\n        studies: this.state.studiesForBrowser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: mainContentClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(ConnectedViewerMain, {\n        studies: this.props.studies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.props.rightSidebarOpen ? 'sidebar-menu sidebar-right sidebar-open' : 'sidebar-menu sidebar-right',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(ConnectedMeasurementTable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return FlexboxLayout;\n}(Component);\n\nFlexboxLayout.propTypes = {\n  studies: PropTypes.array,\n  leftSidebarOpen: PropTypes.bool.isRequired,\n  rightSidebarOpen: PropTypes.bool.isRequired\n};\nexport default FlexboxLayout;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/FlexboxLayout.js"],"names":["React","Component","ConnectedMeasurementTable","ConnectedStudyBrowser","ConnectedViewerMain","PropTypes","FlexboxLayout","state","studiesForBrowser","getStudiesForBrowser","studies","props","map","study","studyInstanceUid","thumbnails","displaySets","displaySet","displaySetInstanceUid","seriesDescription","seriesNumber","instanceNumber","numImageFrames","imageId","altImageText","images","length","getImageId","setState","prevProps","mainContentClassName","leftSidebarOpen","rightSidebarOpen","propTypes","array","bool","isRequired"],"mappings":"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","sourcesContent":["import './FlexboxLayout.css';\n\nimport React, { Component } from 'react';\n\nimport ConnectedMeasurementTable from './ConnectedMeasurementTable';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport PropTypes from 'prop-types';\n\nclass FlexboxLayout extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n    leftSidebarOpen: PropTypes.bool.isRequired,\n    rightSidebarOpen: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    studiesForBrowser: [],\n  };\n\n  componentDidMount() {\n    if (this.props.studies) {\n      const studiesForBrowser = this.getStudiesForBrowser();\n\n      this.setState({\n        studiesForBrowser,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.studies !== prevProps.studies) {\n      const studiesForBrowser = this.getStudiesForBrowser();\n\n      this.setState({\n        studiesForBrowser,\n      });\n    }\n  }\n\n  getStudiesForBrowser = () => {\n    const { studies } = this.props;\n\n    // TODO[react]:\n    // - Add sorting of display sets\n    // - Add useMiddleSeriesInstanceAsThumbnail\n    // - Add showStackLoadingProgressBar option\n    return studies.map(study => {\n      const { studyInstanceUid } = study;\n\n      const thumbnails = study.displaySets.map(displaySet => {\n        const {\n          displaySetInstanceUid,\n          seriesDescription,\n          seriesNumber,\n          instanceNumber,\n          numImageFrames,\n          // TODO: This is undefined\n          // modality,\n        } = displaySet;\n\n        let imageId;\n        let altImageText = ' '; // modality\n\n        if (displaySet.images && displaySet.images.length) {\n          imageId = displaySet.images[0].getImageId();\n        } else {\n          altImageText = 'SR';\n        }\n\n        return {\n          imageId,\n          altImageText,\n          displaySetInstanceUid,\n          seriesDescription,\n          seriesNumber,\n          instanceNumber,\n          numImageFrames,\n        };\n      });\n\n      return {\n        studyInstanceUid,\n        thumbnails,\n      };\n    });\n  };\n\n  render() {\n    let mainContentClassName = 'main-content';\n    if (this.props.leftSidebarOpen) {\n      mainContentClassName += ' sidebar-left-open';\n    }\n\n    if (this.props.rightSidebarOpen) {\n      mainContentClassName += ' sidebar-right-open';\n    }\n\n    // TODO[react]: Make ConnectedMeasurementTable extension with state.timepointManager\n    return (\n      <div className=\"FlexboxLayout\">\n        <div\n          className={\n            this.props.leftSidebarOpen\n              ? 'sidebar-menu sidebar-left sidebar-open'\n              : 'sidebar-menu sidebar-left'\n          }\n        >\n          <ConnectedStudyBrowser studies={this.state.studiesForBrowser} />\n        </div>\n        <div className={mainContentClassName}>\n          <ConnectedViewerMain studies={this.props.studies} />\n        </div>\n        <div\n          className={\n            this.props.rightSidebarOpen\n              ? 'sidebar-menu sidebar-right sidebar-open'\n              : 'sidebar-menu sidebar-right'\n          }\n        >\n          <ConnectedMeasurementTable />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FlexboxLayout;\n"]},"metadata":{},"sourceType":"module"}