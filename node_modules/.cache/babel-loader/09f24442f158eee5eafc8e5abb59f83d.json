{"ast":null,"code":"var _jsxFileName = \"/home/bitnami/Viewers/src/routes/ViewerRouting.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\n\nfunction ViewerRouting(_ref) {\n  var match = _ref.match;\n  var _match$params = match.params,\n      studyInstanceUids = _match$params.studyInstanceUids,\n      seriesInstanceUids = _match$params.seriesInstanceUids;\n  var studyUIDs;\n  var seriesUIDs;\n\n  if (studyInstanceUids && !seriesInstanceUids) {\n    studyUIDs = studyInstanceUids.split(';');\n  } else if (studyInstanceUids && seriesInstanceUids) {\n    studyUIDs = [match.params.studyInstanceUid];\n    seriesUIDs = match.params.seriesInstanceUids.split(';');\n  }\n\n  return React.createElement(ConnectedViewerRetrieveStudyData, {\n    studyInstanceUids: studyUIDs,\n    seriesInstanceUids: seriesUIDs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  });\n}\n\nViewerRouting.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      studyInstanceUids: PropTypes.string.isRequired,\n      seriesInstanceUids: PropTypes.string\n    })\n  })\n};\nexport default ViewerRouting;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/routes/ViewerRouting.js"],"names":["React","PropTypes","ConnectedViewerRetrieveStudyData","ViewerRouting","match","params","studyInstanceUids","seriesInstanceUids","studyUIDs","seriesUIDs","split","studyInstanceUid","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gCAAP,MAA6C,yDAA7C;;AAEA,SAASC,aAAT,OAAkC;AAAA,MAATC,KAAS,QAATA,KAAS;AAAA,sBACkBA,KAAK,CAACC,MADxB;AAAA,MACxBC,iBADwB,iBACxBA,iBADwB;AAAA,MACLC,kBADK,iBACLA,kBADK;AAGhC,MAAIC,SAAJ;AACA,MAAIC,UAAJ;;AAEA,MAAIH,iBAAiB,IAAI,CAACC,kBAA1B,EAA8C;AAC5CC,IAAAA,SAAS,GAAGF,iBAAiB,CAACI,KAAlB,CAAwB,GAAxB,CAAZ;AACD,GAFD,MAEO,IAAIJ,iBAAiB,IAAIC,kBAAzB,EAA6C;AAClDC,IAAAA,SAAS,GAAG,CAACJ,KAAK,CAACC,MAAN,CAAaM,gBAAd,CAAZ;AACAF,IAAAA,UAAU,GAAGL,KAAK,CAACC,MAAN,CAAaE,kBAAb,CAAgCG,KAAhC,CAAsC,GAAtC,CAAb;AACD;;AAED,SACE,oBAAC,gCAAD;AACE,IAAA,iBAAiB,EAAEF,SADrB;AAEE,IAAA,kBAAkB,EAAEC,UAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD;;AAEDN,aAAa,CAACS,SAAd,GAA0B;AACxBR,EAAAA,KAAK,EAAEH,SAAS,CAACY,KAAV,CAAgB;AACrBR,IAAAA,MAAM,EAAEJ,SAAS,CAACY,KAAV,CAAgB;AACtBP,MAAAA,iBAAiB,EAAEL,SAAS,CAACa,MAAV,CAAiBC,UADd;AAEtBR,MAAAA,kBAAkB,EAAEN,SAAS,CAACa;AAFR,KAAhB;AADa,GAAhB;AADiB,CAA1B;AASA,eAAeX,aAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\n\nfunction ViewerRouting({ match }) {\n  const { studyInstanceUids, seriesInstanceUids } = match.params;\n\n  let studyUIDs;\n  let seriesUIDs;\n\n  if (studyInstanceUids && !seriesInstanceUids) {\n    studyUIDs = studyInstanceUids.split(';');\n  } else if (studyInstanceUids && seriesInstanceUids) {\n    studyUIDs = [match.params.studyInstanceUid];\n    seriesUIDs = match.params.seriesInstanceUids.split(';');\n  }\n\n  return (\n    <ConnectedViewerRetrieveStudyData\n      studyInstanceUids={studyUIDs}\n      seriesInstanceUids={seriesUIDs}\n    />\n  );\n}\n\nViewerRouting.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      studyInstanceUids: PropTypes.string.isRequired,\n      seriesInstanceUids: PropTypes.string,\n    }),\n  }),\n};\n\nexport default ViewerRouting;\n"]},"metadata":{},"sourceType":"module"}