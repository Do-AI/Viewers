{"ast":null,"code":"import _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/connectedComponents/Viewer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; //import OHIF from 'ohif-core';\n//import { CineDialog } from 'react-viewerbase';\n\nimport OHIF from 'ohif-core';\nimport moment from 'moment';\nimport WhiteLabellingContext from '../WhiteLabellingContext.js';\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ConnectedFlexboxLayout from './ConnectedFlexboxLayout.js';\nimport ConnectedToolbarRow from './ConnectedToolbarRow.js';\nimport ConnectedLabellingOverlay from './ConnectedLabellingOverlay';\nimport './Viewer.css';\n/**\n * Inits OHIF Hanging Protocol's onReady.\n * It waits for OHIF Hanging Protocol to be ready to instantiate the ProtocolEngine\n * Hanging Protocol will use OHIF LayoutManager to render viewports properly\n */\n\n/*const initHangingProtocol = () => {\n    // When Hanging Protocol is ready\n    HP.ProtocolStore.onReady(() => {\n\n        // Gets all StudyMetadata objects: necessary for Hanging Protocol to access study metadata\n        const studyMetadataList = OHIF.viewer.StudyMetadataList.all();\n\n        // Instantiate StudyMetadataSource: necessary for Hanging Protocol to get study metadata\n        const studyMetadataSource = new OHIF.studies.classes.OHIFStudyMetadataSource();\n\n        // Get prior studies map\n        const studyPriorsMap = OHIF.studylist.functions.getStudyPriorsMap(studyMetadataList);\n\n        // Creates Protocol Engine object with required arguments\n        const ProtocolEngine = new HP.ProtocolEngine(layoutManager, studyMetadataList, studyPriorsMap, studyMetadataSource);\n\n        // Sets up Hanging Protocol engine\n        HP.setEngine(ProtocolEngine);\n    });\n};*/\n\n/*const viewportUtils = OHIF.viewerbase.viewportUtils;\n\nOHIF.viewer.functionList = {\n    toggleCineDialog: viewportUtils.toggleCineDialog,\n    toggleCinePlay: viewportUtils.toggleCinePlay,\n    clearTools: viewportUtils.clearTools,\n    resetViewport: viewportUtils.resetViewport,\n    invert: viewportUtils.invert\n};*/\n\nvar Viewer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Viewer, _Component);\n\n  function Viewer(props) {\n    var _this;\n\n    _classCallCheck(this, Viewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Viewer).call(this, props));\n\n    _this.retrieveMeasurements = function (patientId, timepointIds) {\n      OHIF.log.info('retrieveMeasurements'); // TODO: Retrieve the measurements from the latest available SR\n\n      return Promise.resolve();\n    };\n\n    _this.storeMeasurements = function (measurementData, timepointIds) {\n      OHIF.log.info('storeMeasurements'); // TODO: Store the measurements into a new SR sent to the active server\n\n      return Promise.resolve();\n    };\n\n    _this.retrieveTimepoints = function (filter) {\n      OHIF.log.info('retrieveTimepoints'); // Get the earliest and latest study date\n\n      var earliestDate = new Date().toISOString();\n      var latestDate = new Date().toISOString();\n\n      if (_this.props.studies) {\n        latestDate = new Date('1000-01-01').toISOString();\n\n        _this.props.studies.forEach(function (study) {\n          var studyDate = moment(study.studyDate, 'YYYYMMDD').toISOString();\n\n          if (studyDate < earliestDate) {\n            earliestDate = studyDate;\n          }\n\n          if (studyDate > latestDate) {\n            latestDate = studyDate;\n          }\n        });\n      } // Return a generic timepoint\n\n\n      return Promise.resolve([{\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUids: _this.props.studyInstanceUids,\n        patientId: filter.patientId,\n        earliestDate: earliestDate,\n        latestDate: latestDate,\n        isLocked: false\n      }]);\n    };\n\n    _this.storeTimepoints = function (timepointData) {\n      OHIF.log.info('storeTimepoints');\n      return Promise.resolve();\n    };\n\n    _this.updateTimepoint = function (timepointData, query) {\n      OHIF.log.info('updateTimepoint');\n      return Promise.resolve();\n    };\n\n    _this.removeTimepoint = function (timepointId) {\n      OHIF.log.info('removeTimepoint');\n      return Promise.resolve();\n    };\n\n    _this.disassociateStudy = function (timepointIds, studyInstanceUid) {\n      OHIF.log.info('disassociateStudy');\n      return Promise.resolve();\n    };\n\n    _this.onTimepointsUpdated = function (timepoints) {\n      if (_this.props.onTimepointsUpdated) {\n        _this.props.onTimepointsUpdated(timepoints);\n      }\n    };\n\n    _this.onMeasurementsUpdated = function (measurements) {\n      if (_this.props.onMeasurementsUpdated) {\n        _this.props.onMeasurementsUpdated(measurements);\n      }\n    };\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: _this.retrieveMeasurements,\n        store: _this.storeMeasurements\n      }\n    });\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: _this.retrieveTimepoints,\n        store: _this.storeTimepoints,\n        remove: _this.removeTimepoint,\n        update: _this.updateTimepoint,\n        disassociate: _this.disassociateStudy\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Viewer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var studies = this.props.studies;\n      var _OHIF$measurements = OHIF.measurements,\n          TimepointApi = _OHIF$measurements.TimepointApi,\n          MeasurementApi = _OHIF$measurements.MeasurementApi;\n      var currentTimepointId = 'TimepointId';\n      var timepointApi = new TimepointApi(currentTimepointId, {\n        onTimepointsUpdated: this.onTimepointsUpdated\n      });\n      var measurementApi = new MeasurementApi(timepointApi, {\n        onMeasurementsUpdated: this.onMeasurementsUpdated\n      });\n      this.currentTimepointId = currentTimepointId;\n      this.timepointApi = timepointApi;\n      this.measurementApi = measurementApi;\n\n      if (studies) {\n        var patientId = studies[0] && studies[0].patientId;\n        timepointApi.retrieveTimepoints({\n          patientId: patientId\n        });\n        measurementApi.retrieveMeasurements(patientId, [currentTimepointId]);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.studies !== prevProps.studies) {\n        var studies = this.props.studies;\n        var patientId = studies[0] && studies[0].patientId;\n        var currentTimepointId = this.currentTimepointId;\n        this.timepointApi.retrieveTimepoints({\n          patientId: patientId\n        });\n        this.measurementApi.retrieveMeasurements(patientId, [currentTimepointId]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(WhiteLabellingContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, function (whiteLabelling) {\n        return React.createElement(ConnectedHeader, {\n          home: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, whiteLabelling.logoComponent);\n      }), React.createElement(\"div\", {\n        id: \"viewer\",\n        className: \"Viewer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(ConnectedToolbarRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(ConnectedFlexboxLayout, {\n        studies: this.props.studies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(ConnectedLabellingOverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Viewer;\n}(Component);\n\nViewer.propTypes = {\n  studies: PropTypes.array,\n  studyInstanceUids: PropTypes.array,\n  onTimepointsUpdated: PropTypes.func,\n  onMeasurementsUpdated: PropTypes.func\n};\nexport default Viewer;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/Viewer.js"],"names":["React","Component","PropTypes","OHIF","moment","WhiteLabellingContext","ConnectedHeader","ConnectedFlexboxLayout","ConnectedToolbarRow","ConnectedLabellingOverlay","Viewer","props","retrieveMeasurements","patientId","timepointIds","log","info","Promise","resolve","storeMeasurements","measurementData","retrieveTimepoints","filter","earliestDate","Date","toISOString","latestDate","studies","forEach","study","studyDate","timepointType","timepointId","studyInstanceUids","isLocked","storeTimepoints","timepointData","updateTimepoint","query","removeTimepoint","disassociateStudy","studyInstanceUid","onTimepointsUpdated","timepoints","onMeasurementsUpdated","measurements","MeasurementApi","setConfiguration","dataExchange","retrieve","store","TimepointApi","remove","update","disassociate","currentTimepointId","timepointApi","measurementApi","prevProps","whiteLabelling","logoComponent","propTypes","array","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n//import OHIF from 'ohif-core';\n//import { CineDialog } from 'react-viewerbase';\n\nimport OHIF from 'ohif-core';\nimport moment from 'moment';\nimport WhiteLabellingContext from '../WhiteLabellingContext.js';\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ConnectedFlexboxLayout from './ConnectedFlexboxLayout.js';\nimport ConnectedToolbarRow from './ConnectedToolbarRow.js';\nimport ConnectedLabellingOverlay from './ConnectedLabellingOverlay';\nimport './Viewer.css';\n/**\n * Inits OHIF Hanging Protocol's onReady.\n * It waits for OHIF Hanging Protocol to be ready to instantiate the ProtocolEngine\n * Hanging Protocol will use OHIF LayoutManager to render viewports properly\n */\n/*const initHangingProtocol = () => {\n    // When Hanging Protocol is ready\n    HP.ProtocolStore.onReady(() => {\n\n        // Gets all StudyMetadata objects: necessary for Hanging Protocol to access study metadata\n        const studyMetadataList = OHIF.viewer.StudyMetadataList.all();\n\n        // Instantiate StudyMetadataSource: necessary for Hanging Protocol to get study metadata\n        const studyMetadataSource = new OHIF.studies.classes.OHIFStudyMetadataSource();\n\n        // Get prior studies map\n        const studyPriorsMap = OHIF.studylist.functions.getStudyPriorsMap(studyMetadataList);\n\n        // Creates Protocol Engine object with required arguments\n        const ProtocolEngine = new HP.ProtocolEngine(layoutManager, studyMetadataList, studyPriorsMap, studyMetadataSource);\n\n        // Sets up Hanging Protocol engine\n        HP.setEngine(ProtocolEngine);\n    });\n};*/\n\n/*const viewportUtils = OHIF.viewerbase.viewportUtils;\n\nOHIF.viewer.functionList = {\n    toggleCineDialog: viewportUtils.toggleCineDialog,\n    toggleCinePlay: viewportUtils.toggleCinePlay,\n    clearTools: viewportUtils.clearTools,\n    resetViewport: viewportUtils.resetViewport,\n    invert: viewportUtils.invert\n};*/\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n    studyInstanceUids: PropTypes.array,\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveMeasurements,\n        store: this.storeMeasurements,\n      },\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n  }\n\n  retrieveMeasurements = (patientId, timepointIds) => {\n    OHIF.log.info('retrieveMeasurements');\n    // TODO: Retrieve the measurements from the latest available SR\n    return Promise.resolve();\n  };\n\n  storeMeasurements = (measurementData, timepointIds) => {\n    OHIF.log.info('storeMeasurements');\n    // TODO: Store the measurements into a new SR sent to the active server\n    return Promise.resolve();\n  };\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const studyDate = moment(study.studyDate, 'YYYYMMDD').toISOString();\n        if (studyDate < earliestDate) {\n          earliestDate = studyDate;\n        }\n        if (studyDate > latestDate) {\n          latestDate = studyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUids: this.props.studyInstanceUids,\n        patientId: filter.patientId,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, studyInstanceUid) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies } = this.props;\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\n    const currentTimepointId = 'TimepointId';\n\n    const timepointApi = new TimepointApi(currentTimepointId, {\n      onTimepointsUpdated: this.onTimepointsUpdated,\n    });\n\n    const measurementApi = new MeasurementApi(timepointApi, {\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\n    });\n\n    this.currentTimepointId = currentTimepointId;\n    this.timepointApi = timepointApi;\n    this.measurementApi = measurementApi;\n\n    if (studies) {\n      const patientId = studies[0] && studies[0].patientId;\n      timepointApi.retrieveTimepoints({ patientId });\n      measurementApi.retrieveMeasurements(patientId, [currentTimepointId]);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.studies !== prevProps.studies) {\n      const { studies } = this.props;\n      const patientId = studies[0] && studies[0].patientId;\n      const currentTimepointId = this.currentTimepointId;\n      this.timepointApi.retrieveTimepoints({ patientId });\n      this.measurementApi.retrieveMeasurements(patientId, [currentTimepointId]);\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <WhiteLabellingContext.Consumer>\n          {whiteLabelling => (\n            <ConnectedHeader home={false}>\n              {whiteLabelling.logoComponent}\n            </ConnectedHeader>\n          )}\n        </WhiteLabellingContext.Consumer>\n        <div id=\"viewer\" className=\"Viewer\">\n          <ConnectedToolbarRow />\n          {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\n          {/*<StudyPrefetcher studies={this.props.studies} />*/}\n          <ConnectedFlexboxLayout studies={this.props.studies} />\n          <ConnectedLabellingOverlay />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}