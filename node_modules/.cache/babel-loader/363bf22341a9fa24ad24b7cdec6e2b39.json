{"ast":null,"code":"import viewerCommandDefinitions from './viewer.js';\nvar CONTEXTS = {\n  viewer: 'VIEWER'\n};\n/**\n * Register all commands.\n * TODO: Extensions should self-register their commands\n */\n\nfunction init(commandsManager) {\n  _registerViewerCommands(commandsManager);\n}\n/**\n * Register all Viewer commands\n *\n * @private\n */\n\n\nfunction _registerViewerCommands(commandsManager) {\n  var commandContext = CONTEXTS.viewer;\n  commandsManager.createContext(commandContext);\n  Object.keys(viewerCommandDefinitions).forEach(function (commandName) {\n    var commandDefinition = viewerCommandDefinitions[commandName];\n    commandsManager.registerCommand(commandContext, commandName, commandDefinition);\n  });\n}\n\nexport default {\n  init: init\n};","map":{"version":3,"sources":["/home/bitnami/Viewers/src/appCommands/index.js"],"names":["viewerCommandDefinitions","CONTEXTS","viewer","init","commandsManager","_registerViewerCommands","commandContext","createContext","Object","keys","forEach","commandName","commandDefinition","registerCommand"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,aAArC;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;AAIA;;;;;AAIA,SAASC,IAAT,CAAcC,eAAd,EAA+B;AAC7BC,EAAAA,uBAAuB,CAACD,eAAD,CAAvB;AACD;AAED;;;;;;;AAKA,SAASC,uBAAT,CAAiCD,eAAjC,EAAkD;AAChD,MAAME,cAAc,GAAGL,QAAQ,CAACC,MAAhC;AAEAE,EAAAA,eAAe,CAACG,aAAhB,CAA8BD,cAA9B;AACAE,EAAAA,MAAM,CAACC,IAAP,CAAYT,wBAAZ,EAAsCU,OAAtC,CAA8C,UAAAC,WAAW,EAAI;AAC3D,QAAMC,iBAAiB,GAAGZ,wBAAwB,CAACW,WAAD,CAAlD;AAEAP,IAAAA,eAAe,CAACS,eAAhB,CACEP,cADF,EAEEK,WAFF,EAGEC,iBAHF;AAKD,GARD;AASD;;AAED,eAAe;AACbT,EAAAA,IAAI,EAAJA;AADa,CAAf","sourcesContent":["import viewerCommandDefinitions from './viewer.js';\n\nconst CONTEXTS = {\n  viewer: 'VIEWER',\n};\n\n/**\n * Register all commands.\n * TODO: Extensions should self-register their commands\n */\nfunction init(commandsManager) {\n  _registerViewerCommands(commandsManager);\n}\n\n/**\n * Register all Viewer commands\n *\n * @private\n */\nfunction _registerViewerCommands(commandsManager) {\n  const commandContext = CONTEXTS.viewer;\n\n  commandsManager.createContext(commandContext);\n  Object.keys(viewerCommandDefinitions).forEach(commandName => {\n    const commandDefinition = viewerCommandDefinitions[commandName];\n\n    commandsManager.registerCommand(\n      commandContext,\n      commandName,\n      commandDefinition\n    );\n  });\n}\n\nexport default {\n  init,\n};\n"]},"metadata":{},"sourceType":"module"}