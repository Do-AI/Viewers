{"ast":null,"code":"import OHIF from 'ohif-core';\nimport PluginSwitch from './PluginSwitch.js';\nimport { commandsManager } from './../App.js';\nimport { connect } from 'react-redux';\nvar _setLayout = OHIF.redux.actions.setLayout;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$viewports = state.viewports,\n      activeViewportIndex = _state$viewports.activeViewportIndex,\n      layout = _state$viewports.layout,\n      viewportSpecificData = _state$viewports.viewportSpecificData;\n  return {\n    activeViewportIndex: activeViewportIndex,\n    viewportSpecificData: viewportSpecificData,\n    layout: layout\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setLayout: function setLayout(data) {\n      dispatch(_setLayout(data));\n    }\n  };\n};\n/*function setSingleLayoutData(originalArray, viewportIndex, data) {\n  const viewports = originalArray.slice();\n  const layoutData = Object.assign({}, viewports[viewportIndex], data);\n\n  viewports[viewportIndex] = layoutData;\n\n  return viewports;\n}*/\n\n\nvar mergeProps = function mergeProps(propsFromState, propsFromDispatch, ownProps) {\n  //const { activeViewportIndex, layout } = propsFromState;\n  //const { setLayout } = propsFromDispatch;\n  // TODO: Do not display certain options if the current display set\n  // cannot be displayed using these view types\n  var buttons = [\n  /*{\n    text: 'Acquired',\n    type: 'command',\n    icon: 'bars',\n    active: false,\n    onClick: () => {\n      console.warn('Original Acquisition');\n       const layoutData = setSingleLayoutData(\n        layout.viewports,\n        activeViewportIndex,\n        { plugin: 'cornerstone' }\n      );\n       setLayout({ viewports: layoutData });\n    },\n  },\n  {\n    text: 'Axial',\n    icon: 'cube',\n    active: false,\n    onClick: () => {\n      commandsManager.runCommand('axial');\n    },\n  },\n  {\n    text: 'Sagittal',\n    icon: 'cube',\n    active: false,\n    onClick: () => {\n      commandsManager.runCommand('sagittal');\n    },\n  },\n  {\n    text: 'Coronal',\n    icon: 'cube',\n    active: false,\n    onClick: () => {\n      commandsManager.runCommand('coronal');\n    },\n  },*/\n  {\n    label: '2D MPR',\n    icon: 'cube',\n    onClick: function onClick() {\n      commandsManager.runCommand('mpr2d');\n    }\n  }];\n  return {\n    buttons: buttons\n  };\n};\n\nvar ConnectedPluginSwitch = connect(mapStateToProps, mapDispatchToProps, mergeProps)(PluginSwitch);\nexport default ConnectedPluginSwitch;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ConnectedPluginSwitch.js"],"names":["OHIF","PluginSwitch","commandsManager","connect","setLayout","redux","actions","mapStateToProps","state","viewports","activeViewportIndex","layout","viewportSpecificData","mapDispatchToProps","dispatch","data","mergeProps","propsFromState","propsFromDispatch","ownProps","buttons","label","icon","onClick","runCommand","ConnectedPluginSwitch"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;IAEQC,U,GAAcJ,IAAI,CAACK,KAAL,CAAWC,O,CAAzBF,S;;AAER,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA,yBAC+BA,KAAK,CAACC,SADrC;AAAA,MACvBC,mBADuB,oBACvBA,mBADuB;AAAA,MACFC,MADE,oBACFA,MADE;AAAA,MACMC,oBADN,oBACMA,oBADN;AAG/B,SAAO;AACLF,IAAAA,mBAAmB,EAAnBA,mBADK;AAELE,IAAAA,oBAAoB,EAApBA,oBAFK;AAGLD,IAAAA,MAAM,EAANA;AAHK,GAAP;AAKD,CARD;;AAUA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLV,IAAAA,SAAS,EAAE,mBAAAW,IAAI,EAAI;AACjBD,MAAAA,QAAQ,CAACV,UAAS,CAACW,IAAD,CAAV,CAAR;AACD;AAHI,GAAP;AAKD,CAND;AAQA;;;;;;;;;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,cAAD,EAAiBC,iBAAjB,EAAoCC,QAApC,EAAiD;AAClE;AACA;AAEA;AACA;AACA,MAAMC,OAAO,GAAG;AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACEC,IAAAA,KAAK,EAAE,QADT;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,OAAO,EAAE,mBAAM;AACbrB,MAAAA,eAAe,CAACsB,UAAhB,CAA2B,OAA3B;AACD;AALH,GA1Cc,CAAhB;AAmDA,SAAO;AACLJ,IAAAA,OAAO,EAAPA;AADK,GAAP;AAGD,CA5DD;;AA8DA,IAAMK,qBAAqB,GAAGtB,OAAO,CACnCI,eADmC,EAEnCM,kBAFmC,EAGnCG,UAHmC,CAAP,CAI5Bf,YAJ4B,CAA9B;AAMA,eAAewB,qBAAf","sourcesContent":["import OHIF from 'ohif-core';\nimport PluginSwitch from './PluginSwitch.js';\nimport { commandsManager } from './../App.js';\nimport { connect } from 'react-redux';\n\nconst { setLayout } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    viewportSpecificData,\n    layout,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setLayout: data => {\n      dispatch(setLayout(data));\n    },\n  };\n};\n\n/*function setSingleLayoutData(originalArray, viewportIndex, data) {\n  const viewports = originalArray.slice();\n  const layoutData = Object.assign({}, viewports[viewportIndex], data);\n\n  viewports[viewportIndex] = layoutData;\n\n  return viewports;\n}*/\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  //const { activeViewportIndex, layout } = propsFromState;\n  //const { setLayout } = propsFromDispatch;\n\n  // TODO: Do not display certain options if the current display set\n  // cannot be displayed using these view types\n  const buttons = [\n    /*{\n      text: 'Acquired',\n      type: 'command',\n      icon: 'bars',\n      active: false,\n      onClick: () => {\n        console.warn('Original Acquisition');\n\n        const layoutData = setSingleLayoutData(\n          layout.viewports,\n          activeViewportIndex,\n          { plugin: 'cornerstone' }\n        );\n\n        setLayout({ viewports: layoutData });\n      },\n    },\n    {\n      text: 'Axial',\n      icon: 'cube',\n      active: false,\n      onClick: () => {\n        commandsManager.runCommand('axial');\n      },\n    },\n    {\n      text: 'Sagittal',\n      icon: 'cube',\n      active: false,\n      onClick: () => {\n        commandsManager.runCommand('sagittal');\n      },\n    },\n    {\n      text: 'Coronal',\n      icon: 'cube',\n      active: false,\n      onClick: () => {\n        commandsManager.runCommand('coronal');\n      },\n    },*/\n    {\n      label: '2D MPR',\n      icon: 'cube',\n      onClick: () => {\n        commandsManager.runCommand('mpr2d');\n      },\n    },\n  ];\n\n  return {\n    buttons,\n  };\n};\n\nconst ConnectedPluginSwitch = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(PluginSwitch);\n\nexport default ConnectedPluginSwitch;\n"]},"metadata":{},"sourceType":"module"}