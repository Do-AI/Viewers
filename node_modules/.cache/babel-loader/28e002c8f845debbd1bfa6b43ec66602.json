{"ast":null,"code":"import cornerstone from 'cornerstone-core';\nvar buttonSize = {\n  width: 96,\n  height: 28\n};\nexport function getAddLabelButtonStyle(measurementData, eventData) {\n  var _measurementData$hand = measurementData.handles,\n      start = _measurementData$hand.start,\n      end = _measurementData$hand.end;\n  var client = eventData.currentPoints.client;\n  var clientStart = cornerstone.pixelToCanvas(eventData.element, start);\n  var clientEnd = cornerstone.pixelToCanvas(eventData.element, end);\n  var canvasOffSetLeft = client.x - clientStart.x;\n  var canvasOffSetTop = client.y - clientStart.y;\n  var position = {\n    left: clientEnd.x + canvasOffSetLeft,\n    top: clientEnd.y + canvasOffSetTop\n  };\n\n  if (start.y > end.y) {\n    position.top -= buttonSize.height;\n  }\n\n  if (start.x > end.x) {\n    position.left -= buttonSize.width;\n  }\n\n  return position;\n}\nexport function getDialogStyle(componentStyle) {\n  var style = Object.assign({}, componentStyle);\n  var dialogProps = {\n    width: 320,\n    height: 230\n  }; // Get max values to avoid position out of the screen\n\n  var maxLeft = window.innerWidth - dialogProps.width;\n  var maxTop = window.innerHeight - dialogProps.height; // Positioning the dialog with its center on the click event\n\n  style.left -= dialogProps.width / 2;\n  style.top -= dialogProps.height / 2;\n\n  if (style.left > maxLeft) {\n    style.left = maxLeft;\n  }\n\n  if (style.top > maxTop) {\n    style.top = maxTop;\n  }\n\n  return style;\n}","map":{"version":3,"sources":["/home/bitnami/Viewers/src/components/Labelling/labellingPositionUtils.js"],"names":["cornerstone","buttonSize","width","height","getAddLabelButtonStyle","measurementData","eventData","handles","start","end","client","currentPoints","clientStart","pixelToCanvas","element","clientEnd","canvasOffSetLeft","x","canvasOffSetTop","y","position","left","top","getDialogStyle","componentStyle","style","Object","assign","dialogProps","maxLeft","window","innerWidth","maxTop","innerHeight"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAAnB;AAKA,OAAO,SAASC,sBAAT,CAAgCC,eAAhC,EAAiDC,SAAjD,EAA4D;AAAA,8BAC1CD,eAAe,CAACE,OAD0B;AAAA,MACzDC,KADyD,yBACzDA,KADyD;AAAA,MAClDC,GADkD,yBAClDA,GADkD;AAAA,MAEzDC,MAFyD,GAE9CJ,SAAS,CAACK,aAFoC,CAEzDD,MAFyD;AAGjE,MAAME,WAAW,GAAGZ,WAAW,CAACa,aAAZ,CAA0BP,SAAS,CAACQ,OAApC,EAA6CN,KAA7C,CAApB;AACA,MAAMO,SAAS,GAAGf,WAAW,CAACa,aAAZ,CAA0BP,SAAS,CAACQ,OAApC,EAA6CL,GAA7C,CAAlB;AACA,MAAMO,gBAAgB,GAAGN,MAAM,CAACO,CAAP,GAAWL,WAAW,CAACK,CAAhD;AACA,MAAMC,eAAe,GAAGR,MAAM,CAACS,CAAP,GAAWP,WAAW,CAACO,CAA/C;AACA,MAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAEN,SAAS,CAACE,CAAV,GAAcD,gBADL;AAEfM,IAAAA,GAAG,EAAEP,SAAS,CAACI,CAAV,GAAcD;AAFJ,GAAjB;;AAKA,MAAIV,KAAK,CAACW,CAAN,GAAUV,GAAG,CAACU,CAAlB,EAAqB;AACnBC,IAAAA,QAAQ,CAACE,GAAT,IAAgBrB,UAAU,CAACE,MAA3B;AACD;;AACD,MAAIK,KAAK,CAACS,CAAN,GAAUR,GAAG,CAACQ,CAAlB,EAAqB;AACnBG,IAAAA,QAAQ,CAACC,IAAT,IAAiBpB,UAAU,CAACC,KAA5B;AACD;;AAED,SAAOkB,QAAP;AACD;AAED,OAAO,SAASG,cAAT,CAAwBC,cAAxB,EAAwC;AAC7C,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,cAAlB,CAAd;AACA,MAAMI,WAAW,GAAG;AAClB1B,IAAAA,KAAK,EAAE,GADW;AAElBC,IAAAA,MAAM,EAAE;AAFU,GAApB,CAF6C,CAO7C;;AACA,MAAM0B,OAAO,GAAGC,MAAM,CAACC,UAAP,GAAoBH,WAAW,CAAC1B,KAAhD;AACA,MAAM8B,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqBL,WAAW,CAACzB,MAAhD,CAT6C,CAW7C;;AACAsB,EAAAA,KAAK,CAACJ,IAAN,IAAcO,WAAW,CAAC1B,KAAZ,GAAoB,CAAlC;AACAuB,EAAAA,KAAK,CAACH,GAAN,IAAaM,WAAW,CAACzB,MAAZ,GAAqB,CAAlC;;AAEA,MAAIsB,KAAK,CAACJ,IAAN,GAAaQ,OAAjB,EAA0B;AACxBJ,IAAAA,KAAK,CAACJ,IAAN,GAAaQ,OAAb;AACD;;AACD,MAAIJ,KAAK,CAACH,GAAN,GAAYU,MAAhB,EAAwB;AACtBP,IAAAA,KAAK,CAACH,GAAN,GAAYU,MAAZ;AACD;;AAED,SAAOP,KAAP;AACD","sourcesContent":["import cornerstone from 'cornerstone-core';\n\nconst buttonSize = {\n  width: 96,\n  height: 28,\n};\n\nexport function getAddLabelButtonStyle(measurementData, eventData) {\n  const { start, end } = measurementData.handles;\n  const { client } = eventData.currentPoints;\n  const clientStart = cornerstone.pixelToCanvas(eventData.element, start);\n  const clientEnd = cornerstone.pixelToCanvas(eventData.element, end);\n  const canvasOffSetLeft = client.x - clientStart.x;\n  const canvasOffSetTop = client.y - clientStart.y;\n  const position = {\n    left: clientEnd.x + canvasOffSetLeft,\n    top: clientEnd.y + canvasOffSetTop,\n  };\n\n  if (start.y > end.y) {\n    position.top -= buttonSize.height;\n  }\n  if (start.x > end.x) {\n    position.left -= buttonSize.width;\n  }\n\n  return position;\n}\n\nexport function getDialogStyle(componentStyle) {\n  const style = Object.assign({}, componentStyle);\n  const dialogProps = {\n    width: 320,\n    height: 230,\n  };\n\n  // Get max values to avoid position out of the screen\n  const maxLeft = window.innerWidth - dialogProps.width;\n  const maxTop = window.innerHeight - dialogProps.height;\n\n  // Positioning the dialog with its center on the click event\n  style.left -= dialogProps.width / 2;\n  style.top -= dialogProps.height / 2;\n\n  if (style.left > maxLeft) {\n    style.left = maxLeft;\n  }\n  if (style.top > maxTop) {\n    style.top = maxTop;\n  }\n\n  return style;\n}\n"]},"metadata":{},"sourceType":"module"}