{"ast":null,"code":"import _regeneratorRuntime from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/routes/StandaloneRouting.js\";\nimport React, { Component } from 'react';\nimport { log, metadata, studies, utils } from 'ohif-core';\nimport PropTypes from 'prop-types';\nimport Viewer from '../connectedComponents/Viewer';\nimport { extensionManager } from './../App.js';\nimport qs from 'querystring';\nvar OHIFStudyMetadata = metadata.OHIFStudyMetadata;\nvar retrieveStudiesMetadata = studies.retrieveStudiesMetadata;\nvar studyMetadataManager = utils.studyMetadataManager,\n    updateMetaDataManager = utils.updateMetaDataManager;\n\nvar StandaloneRouting =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StandaloneRouting, _Component);\n\n  function StandaloneRouting() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StandaloneRouting);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StandaloneRouting)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      studies: null,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(StandaloneRouting, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var query, _studies, updatedStudies;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                query = qs.parse(this.props.location.search);\n                _context.next = 4;\n                return StandaloneRouting.parseQueryAndFetchStudies(query);\n\n              case 4:\n                _studies = _context.sent;\n                studyMetadataManager.purge(); // Map studies to new format, update metadata manager?\n\n                updatedStudies = _studies.map(function (study) {\n                  var studyMetadata = new OHIFStudyMetadata(study, study.studyInstanceUid);\n                  var sopClassHandlerModules = extensionManager.modules['sopClassHandlerModule'];\n                  study.displaySets = study.displaySets || studyMetadata.createDisplaySets(sopClassHandlerModules);\n                  studyMetadata.setDisplaySets(study.displaySets); // Updates WADO-RS metaDataManager\n\n                  updateMetaDataManager(study);\n                  studyMetadataManager.add(studyMetadata);\n                  return study;\n                });\n                this.setState({\n                  studies: updatedStudies\n                });\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                this.setState({\n                  error: _context.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"Error: \", JSON.stringify(this.state.error));\n      } else if (!this.state.studies) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(Viewer, {\n        studies: this.state.studies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      });\n    }\n  }], [{\n    key: \"parseQueryAndFetchStudies\",\n    value: function parseQueryAndFetchStudies(query) {\n      return new Promise(function (resolve, reject) {\n        var url = query.url;\n\n        if (!url) {\n          reject(new Error('No URL was specified. Use ?url=$yourURL'));\n        } // Define a request to the server to retrieve the study data\n        // as JSON, given a URL that was in the Route\n\n\n        var oReq = new XMLHttpRequest(); // Add event listeners for request failure\n\n        oReq.addEventListener('error', function (error) {\n          log.warn('An error occurred while retrieving the JSON data');\n          reject(error);\n        }); // When the JSON has been returned, parse it into a JavaScript Object\n        // and render the OHIF Viewer with this data\n\n        oReq.addEventListener('load', function () {\n          // Parse the response content\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n          if (!oReq.responseText) {\n            log.warn('Response was undefined');\n            reject(new Error('Response was undefined'));\n          }\n\n          log.info(JSON.stringify(oReq.responseText, null, 2));\n          var data = JSON.parse(oReq.responseText);\n\n          if (data.servers && query.studyInstanceUids) {\n            var server = data.servers.dicomWeb[0];\n            server.type = 'dicomWeb';\n            var studyInstanceUids = query.studyInstanceUids.split(';');\n            var seriesInstanceUids = [];\n            retrieveStudiesMetadata(server, studyInstanceUids, seriesInstanceUids).then(function (studies) {\n              resolve(studies);\n            }, function (error) {\n              reject(error);\n            });\n          } else {\n            resolve(data.studies);\n          }\n        }); // Open the Request to the server for the JSON data\n        // In this case we have a server-side route called /api/\n        // which responds to GET requests with the study data\n\n        log.info(\"Sending Request to: \".concat(url));\n        oReq.open('GET', url);\n        oReq.setRequestHeader('Accept', 'application/json'); // Fire the request to the server\n\n        oReq.send();\n      });\n    }\n  }]);\n\n  return StandaloneRouting;\n}(Component);\n\nStandaloneRouting.propTypes = {\n  location: PropTypes.object,\n  store: PropTypes.object\n};\nexport default StandaloneRouting;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/routes/StandaloneRouting.js"],"names":["React","Component","log","metadata","studies","utils","PropTypes","Viewer","extensionManager","qs","OHIFStudyMetadata","retrieveStudiesMetadata","studyMetadataManager","updateMetaDataManager","StandaloneRouting","state","error","query","parse","props","location","search","parseQueryAndFetchStudies","purge","updatedStudies","map","study","studyMetadata","studyInstanceUid","sopClassHandlerModules","modules","displaySets","createDisplaySets","setDisplaySets","add","setState","JSON","stringify","Promise","resolve","reject","url","Error","oReq","XMLHttpRequest","addEventListener","warn","responseText","info","data","servers","studyInstanceUids","server","dicomWeb","type","split","seriesInstanceUids","then","open","setRequestHeader","send","propTypes","object","store"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { log, metadata, studies, utils } from 'ohif-core';\n\nimport PropTypes from 'prop-types';\nimport Viewer from '../connectedComponents/Viewer';\nimport { extensionManager } from './../App.js';\nimport qs from 'querystring';\n\nconst { OHIFStudyMetadata } = metadata;\nconst { retrieveStudiesMetadata } = studies;\nconst { studyMetadataManager, updateMetaDataManager } = utils;\n\nclass StandaloneRouting extends Component {\n  state = {\n    studies: null,\n    error: null,\n  };\n\n  static propTypes = {\n    location: PropTypes.object,\n    store: PropTypes.object,\n  };\n\n  static parseQueryAndFetchStudies(query) {\n    return new Promise((resolve, reject) => {\n      const url = query.url;\n\n      if (!url) {\n        reject(new Error('No URL was specified. Use ?url=$yourURL'));\n      }\n\n      // Define a request to the server to retrieve the study data\n      // as JSON, given a URL that was in the Route\n      const oReq = new XMLHttpRequest();\n\n      // Add event listeners for request failure\n      oReq.addEventListener('error', error => {\n        log.warn('An error occurred while retrieving the JSON data');\n        reject(error);\n      });\n\n      // When the JSON has been returned, parse it into a JavaScript Object\n      // and render the OHIF Viewer with this data\n      oReq.addEventListener('load', () => {\n        // Parse the response content\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n        if (!oReq.responseText) {\n          log.warn('Response was undefined');\n          reject(new Error('Response was undefined'));\n        }\n\n        log.info(JSON.stringify(oReq.responseText, null, 2));\n\n        const data = JSON.parse(oReq.responseText);\n        if (data.servers && query.studyInstanceUids) {\n          const server = data.servers.dicomWeb[0];\n          server.type = 'dicomWeb';\n\n          const studyInstanceUids = query.studyInstanceUids.split(';');\n          const seriesInstanceUids = [];\n\n          retrieveStudiesMetadata(\n            server,\n            studyInstanceUids,\n            seriesInstanceUids\n          ).then(\n            studies => {\n              resolve(studies);\n            },\n            error => {\n              reject(error);\n            }\n          );\n        } else {\n          resolve(data.studies);\n        }\n      });\n\n      // Open the Request to the server for the JSON data\n      // In this case we have a server-side route called /api/\n      // which responds to GET requests with the study data\n      log.info(`Sending Request to: ${url}`);\n      oReq.open('GET', url);\n      oReq.setRequestHeader('Accept', 'application/json');\n\n      // Fire the request to the server\n      oReq.send();\n    });\n  }\n\n  async componentDidMount() {\n    try {\n      const query = qs.parse(this.props.location.search);\n      const studies = await StandaloneRouting.parseQueryAndFetchStudies(query);\n\n      studyMetadataManager.purge();\n\n      // Map studies to new format, update metadata manager?\n      const updatedStudies = studies.map(study => {\n        const studyMetadata = new OHIFStudyMetadata(\n          study,\n          study.studyInstanceUid\n        );\n        const sopClassHandlerModules =\n          extensionManager.modules['sopClassHandlerModule'];\n\n        study.displaySets =\n          study.displaySets ||\n          studyMetadata.createDisplaySets(sopClassHandlerModules);\n        studyMetadata.setDisplaySets(study.displaySets);\n\n        // Updates WADO-RS metaDataManager\n        updateMetaDataManager(study);\n\n        studyMetadataManager.add(studyMetadata);\n\n        return study;\n      });\n\n      this.setState({ studies: updatedStudies });\n    } catch (error) {\n      this.setState({ error });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    } else if (!this.state.studies) {\n      return <div>Loading...</div>;\n    }\n\n    return <Viewer studies={this.state.studies} />;\n  }\n}\n\nexport default StandaloneRouting;\n"]},"metadata":{},"sourceType":"module"}