{"ast":null,"code":"import cornerstone from 'cornerstone-core';\nimport cornerstoneTools from 'cornerstone-tools';\nimport dicomParser from 'dicom-parser';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nfunction getCjsExportFromNamespace(n) {\n  return n && n.default || n;\n}\n\nvar _typeof_1 = createCommonjsModule(function (module) {\n  function _typeof2(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof2 = function _typeof2(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof2 = function _typeof2(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof2(obj);\n  }\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n      module.exports = _typeof = function _typeof(obj) {\n        return _typeof2(obj);\n      };\n    } else {\n      module.exports = _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  module.exports = _typeof;\n});\n\nfunction getBoundingBox(context, textLines, x, y, options) {\n  if (Object.prototype.toString.call(textLines) !== '[object Array]') {\n    textLines = [textLines];\n  }\n\n  var padding = 5;\n  var font = cornerstoneTools.textStyle.getFont();\n  var fontSize = cornerstoneTools.textStyle.getFontSize();\n  context.save();\n  context.font = font;\n  context.textBaseline = 'top'; // Find the longest text width in the array of text data\n\n  var maxWidth = 0;\n  textLines.forEach(function (text) {\n    // Get the text width in the current font\n    var width = context.measureText(text).width; // Find the maximum with for all the text rows;\n\n    maxWidth = Math.max(maxWidth, width);\n  }); // Calculate the bounding box for this text box\n\n  var boundingBox = {\n    width: maxWidth + padding * 2,\n    height: padding + textLines.length * (fontSize + padding)\n  };\n\n  if (options && options.centering && options.centering.x === true) {\n    x -= boundingBox.width / 2;\n  }\n\n  if (options && options.centering && options.centering.y === true) {\n    y -= boundingBox.height / 2;\n  }\n\n  boundingBox.left = x;\n  boundingBox.top = y;\n  context.restore(); // Return the bounding box so it can be used for pointNearHandle\n\n  return boundingBox;\n}\n\nfunction pixelToPage(element, position) {\n  var enabledElement = cornerstone.getEnabledElement(element);\n  var result = {\n    x: 0,\n    y: 0\n  }; // Stop here if the cornerstone element is not enabled or position is not an object\n\n  if (!enabledElement || _typeof_1(position) !== 'object') {\n    return result;\n  }\n\n  var canvas = enabledElement.canvas;\n  var canvasOffset = $(canvas).offset();\n  result.x += canvasOffset.left;\n  result.y += canvasOffset.top;\n  var canvasPosition = cornerstone.pixelToCanvas(element, position);\n  result.x += canvasPosition.x;\n  result.y += canvasPosition.y;\n  return result;\n}\n\nfunction repositionTextBox(eventData, measurementData, config) {\n  // Stop here if it's not a measurement creating\n  if (!measurementData.isCreating) {\n    return;\n  }\n\n  var element = eventData.element;\n  var enabledElement = cornerstone.getEnabledElement(element);\n  var image = enabledElement.image;\n  var allowedBorders = OHIF.uiSettings.autoPositionMeasurementsTextCallOuts;\n  var allow = {\n    T: !allowedBorders || allowedBorders.includes('T'),\n    R: !allowedBorders || allowedBorders.includes('R'),\n    B: !allowedBorders || allowedBorders.includes('B'),\n    L: !allowedBorders || allowedBorders.includes('L')\n  };\n\n  var getAvailableBlankAreas = function getAvailableBlankAreas(enabledElement, labelWidth, labelHeight) {\n    var element = enabledElement.element,\n        canvas = enabledElement.canvas,\n        image = enabledElement.image;\n    var topLeft = cornerstone.pixelToCanvas(element, {\n      x: 0,\n      y: 0\n    });\n    var bottomRight = cornerstone.pixelToCanvas(element, {\n      x: image.width,\n      y: image.height\n    });\n    var $canvas = $(canvas);\n    var canvasWidth = $canvas.outerWidth();\n    var canvasHeight = $canvas.outerHeight();\n    var result = {};\n    result['x-1'] = allow.L && topLeft.x > labelWidth;\n    result['y-1'] = allow.T && topLeft.y > labelHeight;\n    result.x1 = allow.R && canvasWidth - bottomRight.x > labelWidth;\n    result.y1 = allow.B && canvasHeight - bottomRight.y > labelHeight;\n    return result;\n  };\n\n  var getRenderingInformation = function getRenderingInformation(limits, tool) {\n    var mid = {};\n    mid.x = limits.x / 2;\n    mid.y = limits.y / 2;\n    var directions = {};\n    directions.x = tool.x < mid.x ? -1 : 1;\n    directions.y = tool.y < mid.y ? -1 : 1;\n    var diffX = directions.x < 0 ? tool.x : limits.x - tool.x;\n    var diffY = directions.y < 0 ? tool.y : limits.y - tool.y;\n    var cornerAxis = diffY < diffX ? 'y' : 'x';\n    var map = {\n      'x-1': 'L',\n      'y-1': 'T',\n      x1: 'R',\n      y1: 'B'\n    };\n    var current = 0;\n\n    while (current < 4 && !allow[map[cornerAxis + directions[cornerAxis]]]) {\n      // Invert the direction for the next iteration\n      directions[cornerAxis] *= -1; // Invert the tempCornerAxis\n\n      cornerAxis = cornerAxis === 'x' ? 'y' : 'x';\n      current++;\n    }\n\n    return {\n      directions: directions,\n      cornerAxis: cornerAxis\n    };\n  };\n\n  var calculateAxisCenter = function calculateAxisCenter(axis, start, end) {\n    var a = start[axis];\n    var b = end[axis];\n    var lowest = Math.min(a, b);\n    var highest = Math.max(a, b);\n    return lowest + (highest - lowest) / 2;\n  };\n\n  var getTextBoxSizeInPixels = function getTextBoxSizeInPixels(element, bounds) {\n    var topLeft = cornerstone.pageToPixel(element, 0, 0);\n    var bottomRight = cornerstone.pageToPixel(element, bounds.x, bounds.y);\n    return {\n      x: bottomRight.x - topLeft.x,\n      y: bottomRight.y - topLeft.y\n    };\n  };\n\n  function getTextBoxOffset(config, cornerAxis, toolAxis, boxSize) {\n    config = config || {};\n    var centering = config.centering || {};\n    var centerX = !!centering.x;\n    var centerY = !!centering.y;\n    var halfBoxSizeX = boxSize.x / 2;\n    var halfBoxSizeY = boxSize.y / 2;\n    var offset = {\n      x: [],\n      y: []\n    };\n\n    if (cornerAxis === 'x') {\n      var offsetY = centerY ? 0 : halfBoxSizeY;\n      offset.x[-1] = centerX ? halfBoxSizeX : 0;\n      offset.x[1] = centerX ? -halfBoxSizeX : -boxSize.x;\n      offset.y[-1] = offsetY;\n      offset.y[1] = offsetY;\n    } else {\n      var offsetX = centerX ? 0 : halfBoxSizeX;\n      offset.x[-1] = offsetX;\n      offset.x[1] = offsetX;\n      offset.y[-1] = centerY ? halfBoxSizeY : 0;\n      offset.y[1] = centerY ? -halfBoxSizeY : -boxSize.y;\n    }\n\n    return offset;\n  }\n\n  var handles = measurementData.handles;\n  var textBox = handles.textBox;\n  var $canvas = $(enabledElement.canvas);\n  var canvasWidth = $canvas.outerWidth();\n  var canvasHeight = $canvas.outerHeight();\n  var offset = $canvas.offset();\n  var canvasDimensions = {\n    x: canvasWidth,\n    y: canvasHeight\n  };\n  var bounds = {};\n  bounds.x = textBox.boundingBox.width;\n  bounds.y = textBox.boundingBox.height;\n\n  var getHandlePosition = function getHandlePosition(key) {\n    var _handles$key = handles[key],\n        x = _handles$key.x,\n        y = _handles$key.y;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  var start = getHandlePosition('start');\n  var end = getHandlePosition('end');\n  var tool = {};\n  tool.x = calculateAxisCenter('x', start, end);\n  tool.y = calculateAxisCenter('y', start, end);\n  var limits = {};\n  limits.x = image.width;\n  limits.y = image.height;\n\n  var _getRenderingInformat = getRenderingInformation(limits, tool),\n      directions = _getRenderingInformat.directions,\n      cornerAxis = _getRenderingInformat.cornerAxis;\n\n  var availableAreas = getAvailableBlankAreas(enabledElement, bounds.x, bounds.y);\n  var tempDirections = Object.assign({}, directions);\n  var tempCornerAxis = cornerAxis;\n  var foundPlace = false;\n  var current = 0;\n\n  while (current < 4) {\n    if (availableAreas[tempCornerAxis + tempDirections[tempCornerAxis]]) {\n      foundPlace = true;\n      break;\n    } // Invert the direction for the next iteration\n\n\n    tempDirections[tempCornerAxis] *= -1; // Invert the tempCornerAxis\n\n    tempCornerAxis = tempCornerAxis === 'x' ? 'y' : 'x';\n    current++;\n  }\n\n  var cornerAxisPosition;\n\n  if (foundPlace) {\n    directions = Object.assign({}, directions, tempDirections);\n    cornerAxis = tempCornerAxis;\n    cornerAxisPosition = directions[cornerAxis] < 0 ? 0 : limits[cornerAxis];\n  } else {\n    limits = Object.assign({}, limits, canvasDimensions);\n    var toolPositionOnCanvas = cornerstone.pixelToCanvas(element, tool);\n    var renderingInformation = getRenderingInformation(limits, toolPositionOnCanvas);\n    directions = renderingInformation.directions;\n    cornerAxis = renderingInformation.cornerAxis;\n    var position = {\n      x: directions.x < 0 ? offset.left : offset.left + canvasWidth,\n      y: directions.y < 0 ? offset.top : offset.top + canvasHeight\n    };\n    var pixelPosition = cornerstone.pageToPixel(element, position.x, position.y);\n    cornerAxisPosition = pixelPosition[cornerAxis];\n  }\n\n  var toolAxis = cornerAxis === 'x' ? 'y' : 'x';\n  var boxSize = getTextBoxSizeInPixels(element, bounds);\n  textBox[cornerAxis] = cornerAxisPosition;\n  textBox[toolAxis] = tool[toolAxis]; // Adjust the text box position reducing its size from the corner axis\n\n  var textBoxOffset = getTextBoxOffset(config, cornerAxis, toolAxis, boxSize);\n  textBox[cornerAxis] += textBoxOffset[cornerAxis][directions[cornerAxis]]; // Preventing the text box from partially going outside the canvas area\n\n  var topLeft = cornerstone.pixelToCanvas(element, textBox);\n  var bottomRight = {\n    x: topLeft.x + bounds.x,\n    y: topLeft.y + bounds.y\n  };\n  var canvasBorders = {\n    x0: offset.left,\n    y0: offset.top,\n    x1: offset.left + canvasWidth,\n    y1: offset.top + canvasHeight\n  };\n\n  if (topLeft[toolAxis] < 0) {\n    var x = canvasBorders.x0;\n    var y = canvasBorders.y0;\n\n    var _pixelPosition = cornerstone.pageToPixel(element, x, y);\n\n    textBox[toolAxis] = _pixelPosition[toolAxis];\n  } else if (bottomRight[toolAxis] > canvasDimensions[toolAxis]) {\n    var _x = canvasBorders.x1 - bounds.x;\n\n    var _y = canvasBorders.y1 - bounds.y;\n\n    var _pixelPosition2 = cornerstone.pageToPixel(element, _x, _y);\n\n    textBox[toolAxis] = _pixelPosition2[toolAxis];\n  }\n}\n/**\n * A small set of utilities to help parsing DICOM element values.\n * In the future the functionality provided by this library might\n * be incorporated into dicomParser library.\n */\n\n\nvar parsingUtils = {\n  /**\n   * Check if supplied argument is a valid instance of the dicomParser.DataSet class.\n   * @param data {Object} An instance of the dicomParser.DataSet class.\n   * @returns {Boolean} Returns true if data is a valid instance of the dicomParser.DataSet class.\n   */\n  isValidDataSet: function isValidDataSet(data) {\n    return data instanceof dicomParser.DataSet;\n  },\n\n  /**\n   * Parses an element tag according to the 'AT' VR definition.\n   * @param data {Object} An instance of the dicomParser.DataSet class.\n   * @param tag {String} A DICOM tag with in the format xGGGGEEEE.\n   * @returns {String} A string representation of a data element tag or null if the field is not present or data is not long enough.\n   */\n  attributeTag: function attributeTag(data, tag) {\n    if (this.isValidDataSet(data) && tag in data.elements) {\n      var element = data.elements[tag];\n\n      if (element && element.length === 4) {\n        var parser = data.byteArrayParser.readUint16,\n            bytes = data.byteArray,\n            offset = element.dataOffset;\n        return 'x' + ('00000000' + (parser(bytes, offset) * 256 * 256 + parser(bytes, offset + 2)).toString(16)).substr(-8);\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Parses the string representation of a multi-valued element into an array of strings. If the parser\n   * parameter is passed and is a function, it will be applied to each element of the resulting array.\n   * @param data {Object} An instance of the dicomParser.DataSet class.\n   * @param tag {String} A DICOM tag with in the format xGGGGEEEE.\n   * @param parser {Function} An optional parser function that can be applied to each element of the array.\n   * @returns {Array} An array of floating point numbers or null if the field is not present or data is not long enough.\n   */\n  multiValue: function multiValue(data, tag, parser) {\n    if (this.isValidDataSet(data) && tag in data.elements) {\n      var element = data.elements[tag];\n\n      if (element && element.length > 0) {\n        var string = dicomParser.readFixedString(data.byteArray, element.dataOffset, element.length);\n\n        if (typeof string === 'string' && string.length > 0) {\n          if (typeof parser !== 'function') {\n            parser = null;\n          }\n\n          return string.split('\\\\').map(function (value) {\n            value = value.trim();\n            return parser !== null ? parser(value) : value;\n          });\n        }\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Parses a string to an array of floats for a multi-valued element.\n   * @param data {Object} An instance of the dicomParser.DataSet class.\n   * @param tag {String} A DICOM tag with in the format xGGGGEEEE.\n   * @returns {Array} An array of floating point numbers or null if the field is not present or data is not long enough.\n   */\n  floatArray: function floatArray(data, tag) {\n    return this.multiValue(data, tag, parseFloat);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar classCallCheck = _classCallCheck;\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar createClass = _createClass;\nvar MODULE_TYPES = {\n  COMMANDS: 'commandsModule',\n  PANEL: 'panelModule',\n  SOP_CLASS_HANDLER: 'sopClassHandlerModule',\n  TOOLBAR: 'toolbarModule',\n  VIEWPORT: 'viewportModule'\n};\nvar log$1 = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  trace: console.trace,\n  debug: console.debug,\n  time: console.time,\n  timeEnd: console.timeEnd\n};\n\nvar ExtensionManager =\n/*#__PURE__*/\nfunction () {\n  function ExtensionManager(_ref) {\n    var _this = this;\n\n    var commandsManager = _ref.commandsManager;\n    classCallCheck(this, ExtensionManager);\n    this.modules = {};\n    this.registeredExtensionIds = [];\n    this.moduleTypeNames = Object.values(MODULE_TYPES); //\n\n    this._commandsManager = commandsManager;\n    this.moduleTypeNames.forEach(function (moduleType) {\n      _this.modules[moduleType] = [];\n    });\n  }\n  /**\n   *\n   * @param {Object[]} extensions - Array of extensions\n   */\n\n\n  createClass(ExtensionManager, [{\n    key: \"registerExtensions\",\n    value: function registerExtensions(extensions) {\n      var _this2 = this;\n\n      extensions.forEach(function (extension) {\n        _this2.registerExtension(extension);\n      });\n    }\n    /**\n     *\n     * TODO: Id Management: SopClassHandlers currently refer to viewport module by id; setting the extension id as viewport module id is a workaround for now\n     * @param {Object} extension\n     */\n\n  }, {\n    key: \"registerExtension\",\n    value: function registerExtension(extension) {\n      var _this3 = this;\n\n      if (!extension) {\n        log$1.warn('Attempting to register a null/undefined extension. Exiting early.');\n        return;\n      }\n\n      var extensionId = extension.id;\n\n      if (!extensionId) {\n        extensionId = Math.random().toString(36).substr(2, 5);\n        log$1.warn(\"Extension ID not set. Using random string ID: \".concat(extensionId));\n      }\n\n      if (this.registeredExtensionIds.includes(extensionId)) {\n        log$1.warn(\"Extension ID \".concat(extensionId, \" has already been registered. Exiting before duplicating modules.\"));\n        return;\n      } // Register Modules\n\n\n      this.moduleTypeNames.forEach(function (moduleType) {\n        var extensionModule = _this3._getExtensionModule(moduleType, extension, extensionId);\n\n        if (extensionModule) {\n          _this3._initSpecialModuleTypes(moduleType, extensionModule);\n\n          _this3.modules[moduleType].push({\n            extensionId: extensionId,\n            module: extensionModule\n          });\n        }\n      }); // Track extension registration\n\n      this.registeredExtensionIds.push(extensionId);\n    }\n    /**\n     * @private\n     * @param {string} moduleType\n     * @param {Object} extension\n     * @param {string} extensionId - Used for logging warnings\n     */\n\n  }, {\n    key: \"_getExtensionModule\",\n    value: function _getExtensionModule(moduleType, extension, extensionId) {\n      var getModuleFnName = 'get' + _capitalizeFirstCharacter(moduleType);\n\n      var getModuleFn = extension[getModuleFnName];\n\n      if (!getModuleFn) {\n        return;\n      }\n\n      try {\n        var extensionModule = getModuleFn();\n\n        if (!extensionModule) {\n          log$1.warn(\"Null or undefined returned when registering the \".concat(getModuleFnName, \" module for the \").concat(extensionId, \" extension\"));\n        }\n\n        return extensionModule;\n      } catch (ex) {\n        log$1.error(\"Exception thrown while trying to call \".concat(getModuleFnName, \" for the \").concat(extensionId, \" extension\"));\n      }\n    }\n  }, {\n    key: \"_initSpecialModuleTypes\",\n    value: function _initSpecialModuleTypes(moduleType, extensionModule) {\n      switch (moduleType) {\n        case 'commandsModule':\n          {\n            var definitions = extensionModule.definitions,\n                defaultContext = extensionModule.defaultContext;\n\n            if (!definitions || Object.keys(definitions).length === 0) {\n              log$1.warn('Commands Module contains no command definitions');\n              return;\n            }\n\n            this._initCommandsModule(definitions, defaultContext);\n\n            break;\n          }\n\n        default: // code block\n\n      }\n    }\n    /**\n     *\n     * @private\n     * @param {Object[]} commandDefinitions\n     */\n\n  }, {\n    key: \"_initCommandsModule\",\n    value: function _initCommandsModule(commandDefinitions) {\n      var _this4 = this;\n\n      var defaultContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'VIEWER';\n\n      if (!this._commandsManager.getContext(defaultContext)) {\n        this._commandsManager.createContext(defaultContext);\n      }\n\n      Object.keys(commandDefinitions).forEach(function (commandName) {\n        var commandDefinition = commandDefinitions[commandName];\n        var commandHasContextThatDoesNotExist = commandDefinition.context && !_this4._commandsManager.getContext(commandDefinition.context);\n\n        if (commandHasContextThatDoesNotExist) {\n          _this4._commandsManager.createContext(commandDefinition.context);\n        }\n\n        _this4._commandsManager.registerCommand(commandDefinition.context || defaultContext, commandName, commandDefinition);\n      });\n    }\n  }]);\n  return ExtensionManager;\n}();\n\nfunction _capitalizeFirstCharacter(lower) {\n  return lower.charAt(0).toUpperCase() + lower.substr(1);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar assertThisInitialized = _assertThisInitialized;\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof_1(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nvar possibleConstructorReturn = _possibleConstructorReturn;\nvar getPrototypeOf = createCommonjsModule(function (module) {\n  function _getPrototypeOf(o) {\n    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  module.exports = _getPrototypeOf;\n});\nvar setPrototypeOf = createCommonjsModule(function (module) {\n  function _setPrototypeOf(o, p) {\n    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  module.exports = _setPrototypeOf;\n});\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nvar inherits = _inherits;\n/**\n * Constants\n */\n\nvar STRING = 'string';\nvar NUMBER = 'number';\nvar FUNCTION = 'function';\nvar OBJECT = 'object';\n/**\n * Class Definition\n */\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor and Instance Methods\n   */\n  function Metadata(data, uid) {\n    classCallCheck(this, Metadata); // Define the main \"_data\" private property as an immutable property.\n    // IMPORTANT: This property can only be set during instance construction.\n\n    Object.defineProperty(this, '_data', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: data\n    }); // Define the main \"_uid\" private property as an immutable property.\n    // IMPORTANT: This property can only be set during instance construction.\n\n    Object.defineProperty(this, '_uid', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: uid\n    }); // Define \"_custom\" properties as an immutable property.\n    // IMPORTANT: This property can only be set during instance construction.\n\n    Object.defineProperty(this, '_custom', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: Object.create(null)\n    });\n  }\n\n  createClass(Metadata, [{\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n  }, {\n    key: \"getDataProperty\",\n    value: function getDataProperty(propertyName) {\n      var propertyValue;\n      var _data = this._data;\n\n      if (_data instanceof Object || _typeof_1(_data) === OBJECT && _data !== null) {\n        propertyValue = _data[propertyName];\n      }\n\n      return propertyValue;\n    }\n    /**\n     * Get unique object ID\n     */\n\n  }, {\n    key: \"getObjectID\",\n    value: function getObjectID() {\n      return this._uid;\n    }\n    /**\n     * Set custom attribute value\n     * @param {String} attribute Custom attribute name\n     * @param {Any} value     Custom attribute value\n     */\n\n  }, {\n    key: \"setCustomAttribute\",\n    value: function setCustomAttribute(attribute, value) {\n      this._custom[attribute] = value;\n    }\n    /**\n     * Get custom attribute value\n     * @param  {String} attribute Custom attribute name\n     * @return {Any}              Custom attribute value\n     */\n\n  }, {\n    key: \"getCustomAttribute\",\n    value: function getCustomAttribute(attribute) {\n      return this._custom[attribute];\n    }\n    /**\n     * Check if a custom attribute exists\n     * @param  {String} attribute Custom attribute name\n     * @return {Boolean}          True if custom attribute exists or false if not\n     */\n\n  }, {\n    key: \"customAttributeExists\",\n    value: function customAttributeExists(attribute) {\n      return attribute in this._custom;\n    }\n    /**\n     * Set custom attributes in batch mode.\n     * @param {Object} attributeMap An object whose own properties will be used as custom attributes.\n     */\n\n  }, {\n    key: \"setCustomAttributes\",\n    value: function setCustomAttributes(attributeMap) {\n      var _hasOwn = Object.prototype.hasOwnProperty;\n      var _custom = this._custom;\n\n      for (var attribute in attributeMap) {\n        if (_hasOwn.call(attributeMap, attribute)) {\n          _custom[attribute] = attributeMap[attribute];\n        }\n      }\n    }\n    /**\n     * Static Methods\n     */\n\n  }], [{\n    key: \"isValidUID\",\n    value: function isValidUID(uid) {\n      return _typeof_1(uid) === STRING && uid.length > 0;\n    }\n  }, {\n    key: \"isValidIndex\",\n    value: function isValidIndex(index) {\n      return _typeof_1(index) === NUMBER && index >= 0 && (index | 0) === index;\n    }\n  }, {\n    key: \"isValidCallback\",\n    value: function isValidCallback(callback) {\n      return _typeof_1(callback) === FUNCTION;\n    }\n  }]);\n  return Metadata;\n}();\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nvar isNativeFunction = _isNativeFunction;\nvar construct = createCommonjsModule(function (module) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      module.exports = _construct = Reflect.construct;\n    } else {\n      module.exports = _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  module.exports = _construct;\n});\nvar wrapNativeSuper = createCommonjsModule(function (module) {\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== \"function\") {\n        throw new TypeError(\"Super expression must either be null or a function\");\n      }\n\n      if (typeof _cache !== \"undefined\") {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return construct(Class, arguments, getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  module.exports = _wrapNativeSuper;\n}); // @TODO: improve this object\n\n/**\n * Objects to be used to throw errors\n */\n\nvar OHIFError =\n/*#__PURE__*/\nfunction (_Error) {\n  inherits(OHIFError, _Error);\n\n  function OHIFError(message) {\n    var _this;\n\n    classCallCheck(this, OHIFError);\n    _this = possibleConstructorReturn(this, getPrototypeOf(OHIFError).call(this));\n    _this.message = message;\n    _this.stack = new Error().stack;\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return OHIFError;\n}(wrapNativeSuper(Error));\n/**\n * ATTENTION! This class should never depend on StudyMetadata or SeriesMetadata classes as this could\n * possibly cause circular dependency issues.\n */\n\n\nvar UNDEFINED = 'undefined';\nvar STRING$1 = 'string';\nvar STUDY_INSTANCE_UID = 'x0020000d';\nvar SERIES_INSTANCE_UID = 'x0020000e';\n\nvar InstanceMetadata =\n/*#__PURE__*/\nfunction (_Metadata) {\n  inherits(InstanceMetadata, _Metadata);\n\n  function InstanceMetadata(data, uid) {\n    var _this;\n\n    classCallCheck(this, InstanceMetadata);\n    _this = possibleConstructorReturn(this, getPrototypeOf(InstanceMetadata).call(this, data, uid)); // Initialize Private Properties\n\n    Object.defineProperties(assertThisInitialized(assertThisInitialized(_this)), {\n      _sopInstanceUID: {\n        configurable: true,\n        // configurable so that it can be redefined in sub-classes...\n        enumerable: false,\n        writable: true,\n        value: null\n      },\n      _imageId: {\n        configurable: true,\n        // configurable so that it can be redefined in sub-classes...\n        enumerable: false,\n        writable: true,\n        value: null\n      }\n    }); // Initialize Public Properties\n\n    _this._definePublicProperties();\n\n    return _this;\n  }\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Define Public Properties\n   * This method should only be called during initialization (inside the class constructor)\n   */\n\n\n  createClass(InstanceMetadata, [{\n    key: \"_definePublicProperties\",\n    value: function _definePublicProperties() {\n      /**\n       * Property: this.sopInstanceUID\n       * Same as this.getSOPInstanceUID()\n       * It's specially useful in contexts where a method call is not suitable like in search criteria. For example:\n       * sopInstanceCollection.findBy({\n       *   sopInstanceUID: '1.2.3.4.5.6.77777.8888888.99999999999.0'\n       * });\n       */\n      Object.defineProperty(this, 'sopInstanceUID', {\n        configurable: false,\n        enumerable: false,\n        get: function get() {\n          return this.getSOPInstanceUID();\n        }\n      });\n    }\n    /**\n     * Public Methods\n     */\n\n    /**\n     * Returns the StudyInstanceUID of the current instance. This method is basically a shorthand the full \"getTagValue\" method call.\n     */\n\n  }, {\n    key: \"getStudyInstanceUID\",\n    value: function getStudyInstanceUID() {\n      return this.getTagValue(STUDY_INSTANCE_UID, null);\n    }\n    /**\n     * Returns the SeriesInstanceUID of the current instance. This method is basically a shorthand the full \"getTagValue\" method call.\n     */\n\n  }, {\n    key: \"getSeriesInstanceUID\",\n    value: function getSeriesInstanceUID() {\n      return this.getTagValue(SERIES_INSTANCE_UID, null);\n    }\n    /**\n     * Returns the SOPInstanceUID of the current instance.\n     */\n\n  }, {\n    key: \"getSOPInstanceUID\",\n    value: function getSOPInstanceUID() {\n      return this._sopInstanceUID;\n    } // @TODO: Improve this... (E.g.: blob data)\n\n  }, {\n    key: \"getStringValue\",\n    value: function getStringValue(tagOrProperty, index, defaultValue) {\n      var value = this.getTagValue(tagOrProperty, defaultValue);\n\n      if (_typeof_1(value) !== STRING$1 && _typeof_1(value) !== UNDEFINED) {\n        value = value.toString();\n      }\n\n      return InstanceMetadata.getIndexedValue(value, index, defaultValue);\n    } // @TODO: Improve this... (E.g.: blob data)\n\n  }, {\n    key: \"getFloatValue\",\n    value: function getFloatValue(tagOrProperty, index, defaultValue) {\n      var value = this.getTagValue(tagOrProperty, defaultValue);\n      value = InstanceMetadata.getIndexedValue(value, index, defaultValue);\n\n      if (value instanceof Array) {\n        value.forEach(function (val, idx) {\n          value[idx] = parseFloat(val);\n        });\n        return value;\n      }\n\n      return _typeof_1(value) === STRING$1 ? parseFloat(value) : value;\n    } // @TODO: Improve this... (E.g.: blob data)\n\n  }, {\n    key: \"getIntValue\",\n    value: function getIntValue(tagOrProperty, index, defaultValue) {\n      var value = this.getTagValue(tagOrProperty, defaultValue);\n      value = InstanceMetadata.getIndexedValue(value, index, defaultValue);\n\n      if (value instanceof Array) {\n        value.forEach(function (val, idx) {\n          value[idx] = parseFloat(val);\n        });\n        return value;\n      }\n\n      return _typeof_1(value) === STRING$1 ? parseInt(value) : value;\n    }\n    /**\n     * @deprecated Please use getTagValue instead.\n     */\n\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue(tagOrProperty, defaultValue) {\n      return this.getTagValue(tagOrProperty, defaultValue);\n    }\n    /**\n     * This function should be overriden by specialized classes in order to allow client libraries or viewers to take advantage of the Study Metadata API.\n     */\n\n  }, {\n    key: \"getTagValue\",\n    value: function getTagValue(tagOrProperty, defaultValue) {\n      /**\n       * Please override this method on a specialized class.\n       */\n      throw new OHIFError('InstanceMetadata::getTagValue is not overriden. Please, override it in a specialized class. See OHIFInstanceMetadata for example');\n    }\n    /**\n     * Compares the current instance with another one.\n     * @param {InstanceMetadata} instance An instance of the InstanceMetadata class.\n     * @returns {boolean} Returns true if both instances refer to the same instance.\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(instance) {\n      var self = this;\n      return instance === self || instance instanceof InstanceMetadata && instance.getSOPInstanceUID() === self.getSOPInstanceUID();\n    }\n    /**\n     * Check if the tagOrProperty exists\n     * @param  {String} tagOrProperty tag or property be checked\n     * @return {Boolean}   True if the tag or property exists or false if doesn't\n     */\n\n  }, {\n    key: \"tagExists\",\n    value: function tagExists(tagOrProperty) {\n      /**\n       * Please override this method\n       */\n      throw new OHIFError('InstanceMetadata::tagExists is not overriden. Please, override it in a specialized class. See OHIFInstanceMetadata for example');\n    }\n    /**\n     * Get custom image id of a sop instance\n     * @return {Any}          sop instance image id\n     */\n\n  }, {\n    key: \"getImageId\",\n    value: function getImageId(frame) {\n      /**\n       * Please override this method\n       */\n      throw new OHIFError('InstanceMetadata::getImageId is not overriden. Please, override it in a specialized class. See OHIFInstanceMetadata for example');\n    }\n    /**\n     * Static Methods\n     */\n\n    /**\n     * Get an value based that can be index based. This function is called by all getters. See above functions.\n     *     - If value is a String and has indexes:\n     *         - If undefined index: returns an array of the split values.\n     *         - If defined index:\n     *             - If invalid: returns defaultValue\n     *             - If valid: returns the indexed value\n     *      - If value is not a String, returns default value.\n     */\n\n  }], [{\n    key: \"getIndexedValue\",\n    value: function getIndexedValue(value, index, defaultValue) {\n      var result = defaultValue;\n\n      if (_typeof_1(value) === STRING$1) {\n        var hasIndexValues = value.indexOf('\\\\') !== -1;\n        result = value;\n\n        if (hasIndexValues) {\n          var splitValues = value.split('\\\\');\n\n          if (Metadata.isValidIndex(index)) {\n            var indexedValue = splitValues[index];\n            result = _typeof_1(indexedValue) !== STRING$1 ? defaultValue : indexedValue;\n          } else {\n            result = splitValues;\n          }\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return InstanceMetadata;\n}(Metadata); // TODO: Deprecate since we have the same thing in dcmjs?\n\n\nvar NUMBER$1 = 'number';\nvar STRING$2 = 'string';\nvar REGEX_TAG = /^x[0-9a-fx]{8}$/;\nvar DICOMTagDescriptions = Object.create(Object.prototype, {\n  _descriptions: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: Object.create(null)\n  },\n  tagNumberToString: {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: function tagNumberToString(tag) {\n      var string; // by default, undefined is returned...\n\n      if (this.isValidTagNumber(tag)) {\n        // if it's a number, build its hexadecimal representation...\n        string = 'x' + ('00000000' + tag.toString(16)).substr(-8);\n      }\n\n      return string;\n    }\n  },\n  isValidTagNumber: {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: function isValidTagNumber(tag) {\n      return _typeof_1(tag) === NUMBER$1 && tag >= 0 && tag <= 0xffffffff;\n    }\n  },\n  isValidTag: {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: function isValidTag(tag) {\n      return _typeof_1(tag) === STRING$2 ? REGEX_TAG.test(tag) : this.isValidTagNumber(tag);\n    }\n  },\n  find: {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: function find(name) {\n      var description; // by default, undefined is returned...\n\n      if (_typeof_1(name) !== STRING$2) {\n        // if it's a number, a tag string will be returned...\n        name = this.tagNumberToString(name);\n      }\n\n      if (_typeof_1(name) === STRING$2) {\n        description = this._descriptions[name];\n      }\n\n      return description;\n    }\n  },\n  init: {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: function init(descriptionMap) {\n      var _hasOwn = Object.prototype.hasOwnProperty;\n      var _descriptions = this._descriptions;\n\n      for (var tag in descriptionMap) {\n        if (_hasOwn.call(descriptionMap, tag)) {\n          if (!this.isValidTag(tag)) {\n            // Skip in case tag is not valid...\n            console.info(\"DICOMTagDescriptions: Invalid tag \\\"\".concat(tag, \"\\\"...\"));\n            continue;\n          }\n\n          if (tag in _descriptions) {\n            // Skip in case the tag is duplicated...\n            console.info(\"DICOMTagDescriptions: Duplicated tag \\\"\".concat(tag, \"\\\"...\"));\n            continue;\n          } // Save keyword...\n\n\n          var keyword = descriptionMap[tag]; // Create a description entry and freeze it...\n\n          var entry = Object.create(null);\n          entry.tag = tag;\n          entry.keyword = keyword;\n          Object.freeze(entry); // Add tag references to entry...\n\n          _descriptions[tag] = entry; // Add keyword references to entry (if not present already)...\n\n          if (keyword in _descriptions) {\n            var currentEntry = _descriptions[keyword];\n            console.info(\"DICOMTagDescriptions: Using <\".concat(currentEntry.tag, \",\").concat(currentEntry.keyword, \"> instead of <\").concat(entry.tag, \",\").concat(entry.keyword, \"> for keyword \\\"\").concat(keyword, \"\\\"...\"));\n          } else {\n            _descriptions[keyword] = entry;\n          }\n        }\n      } // Freeze internal description map...\n\n\n      Object.freeze(_descriptions); // Freeze itself...\n\n      Object.freeze(this);\n    }\n  }\n});\n/**\n * Map with DICOM Tag Descriptions\n */\n\nvar initialTagDescriptionMap = {\n  x00020000: 'FileMetaInfoGroupLength',\n  x00020001: 'FileMetaInfoVersion',\n  x00020002: 'MediaStorageSOPClassUID',\n  x00020003: 'MediaStorageSOPInstanceUID',\n  x00020010: 'TransferSyntaxUID',\n  x00020012: 'ImplementationClassUID',\n  x00020013: 'ImplementationVersionName',\n  x00020016: 'SourceApplicationEntityTitle',\n  x00020100: 'PrivateInformationCreatorUID',\n  x00020102: 'PrivateInformation',\n  x00041130: 'FileSetID',\n  x00041141: 'FileSetDescriptorFileID',\n  x00041142: 'SpecificCharacterSetOfFile',\n  x00041200: 'FirstDirectoryRecordOffset',\n  x00041202: 'LastDirectoryRecordOffset',\n  x00041212: 'FileSetConsistencyFlag',\n  x00041220: 'DirectoryRecordSequence',\n  x00041400: 'OffsetOfNextDirectoryRecord',\n  x00041410: 'RecordInUseFlag',\n  x00041420: 'LowerLevelDirectoryEntityOffset',\n  x00041430: 'DirectoryRecordType',\n  x00041432: 'PrivateRecordUID',\n  x00041500: 'ReferencedFileID',\n  x00041504: 'MRDRDirectoryRecordOffset',\n  x00041510: 'ReferencedSOPClassUIDInFile',\n  x00041511: 'ReferencedSOPInstanceUIDInFile',\n  x00041512: 'ReferencedTransferSyntaxUIDInFile',\n  x0004151a: 'ReferencedRelatedSOPClassUIDInFile',\n  x00041600: 'NumberOfReferences',\n  x00080000: 'IdentifyingGroupLength',\n  x00080001: 'LengthToEnd',\n  x00080005: 'SpecificCharacterSet',\n  x00080006: 'LanguageCodeSequence',\n  x00080008: 'ImageType',\n  x00080010: 'RecognitionCode',\n  x00080012: 'InstanceCreationDate',\n  x00080013: 'InstanceCreationTime',\n  x00080014: 'InstanceCreatorUID',\n  x00080016: 'SOPClassUID',\n  x00080018: 'SOPInstanceUID',\n  x0008001a: 'RelatedGeneralSOPClassUID',\n  x0008001b: 'OriginalSpecializedSOPClassUID',\n  x00080020: 'StudyDate',\n  x00080021: 'SeriesDate',\n  x00080022: 'AcquisitionDate',\n  x00080023: 'ContentDate',\n  x00080024: 'OverlayDate',\n  x00080025: 'CurveDate',\n  x0008002a: 'AcquisitionDateTime',\n  x00080030: 'StudyTime',\n  x00080031: 'SeriesTime',\n  x00080032: 'AcquisitionTime',\n  x00080033: 'ContentTime',\n  x00080034: 'OverlayTime',\n  x00080035: 'CurveTime',\n  x00080040: 'DataSetType',\n  x00080041: 'DataSetSubtype',\n  x00080042: 'NuclearMedicineSeriesType',\n  x00080050: 'AccessionNumber',\n  x00080052: 'QueryRetrieveLevel',\n  x00080054: 'RetrieveAETitle',\n  x00080056: 'InstanceAvailability',\n  x00080058: 'FailedSOPInstanceUIDList',\n  x00080060: 'Modality',\n  x00080061: 'ModalitiesInStudy',\n  x00080062: 'SOPClassesInStudy',\n  x00080064: 'ConversionType',\n  x00080068: 'PresentationIntentType',\n  x00080070: 'Manufacturer',\n  x00080080: 'InstitutionName',\n  x00080081: 'InstitutionAddress',\n  x00080082: 'InstitutionCodeSequence',\n  x00080090: 'ReferringPhysicianName',\n  x00080092: 'ReferringPhysicianAddress',\n  x00080094: 'ReferringPhysicianTelephoneNumber',\n  x00080096: 'ReferringPhysicianIDSequence',\n  x00080100: 'CodeValue',\n  x00080102: 'CodingSchemeDesignator',\n  x00080103: 'CodingSchemeVersion',\n  x00080104: 'CodeMeaning',\n  x00080105: 'MappingResource',\n  x00080106: 'ContextGroupVersion',\n  x00080107: 'ContextGroupLocalVersion',\n  x0008010b: 'ContextGroupExtensionFlag',\n  x0008010c: 'CodingSchemeUID',\n  x0008010d: 'ContextGroupExtensionCreatorUID',\n  x0008010f: 'ContextIdentifier',\n  x00080110: 'CodingSchemeIDSequence',\n  x00080112: 'CodingSchemeRegistry',\n  x00080114: 'CodingSchemeExternalID',\n  x00080115: 'CodingSchemeName',\n  x00080116: 'CodingSchemeResponsibleOrganization',\n  x00080117: 'ContextUID',\n  x00080201: 'TimezoneOffsetFromUTC',\n  x00081000: 'NetworkID',\n  x00081010: 'StationName',\n  x00081030: 'StudyDescription',\n  x00081032: 'ProcedureCodeSequence',\n  x0008103e: 'SeriesDescription',\n  x00081040: 'InstitutionalDepartmentName',\n  x00081048: 'PhysiciansOfRecord',\n  x00081049: 'PhysiciansOfRecordIDSequence',\n  x00081050: 'PerformingPhysicianName',\n  x00081052: 'PerformingPhysicianIDSequence',\n  x00081060: 'NameOfPhysicianReadingStudy',\n  x00081062: 'PhysicianReadingStudyIDSequence',\n  x00081070: 'OperatorsName',\n  x00081072: 'OperatorIDSequence',\n  x00081080: 'AdmittingDiagnosesDescription',\n  x00081084: 'AdmittingDiagnosesCodeSequence',\n  x00081090: 'ManufacturersModelName',\n  x00081100: 'ReferencedResultsSequence',\n  x00081110: 'ReferencedStudySequence',\n  x00081111: 'ReferencedPerformedProcedureStepSequence',\n  x00081115: 'ReferencedSeriesSequence',\n  x00081120: 'ReferencedPatientSequence',\n  x00081125: 'ReferencedVisitSequence',\n  x00081130: 'ReferencedOverlaySequence',\n  x0008113a: 'ReferencedWaveformSequence',\n  x00081140: 'ReferencedImageSequence',\n  x00081145: 'ReferencedCurveSequence',\n  x0008114a: 'ReferencedInstanceSequence',\n  x00081150: 'ReferencedSOPClassUID',\n  x00081155: 'ReferencedSOPInstanceUID',\n  x0008115a: 'SOPClassesSupported',\n  x00081160: 'ReferencedFrameNumber',\n  x00081161: 'SimpleFrameList',\n  x00081162: 'CalculatedFrameList',\n  x00081163: 'TimeRange',\n  x00081164: 'FrameExtractionSequence',\n  x00081195: 'TransactionUID',\n  x00081197: 'FailureReason',\n  x00081198: 'FailedSOPSequence',\n  x00081199: 'ReferencedSOPSequence',\n  x00081200: 'OtherReferencedStudiesSequence',\n  x00081250: 'RelatedSeriesSequence',\n  x00082110: 'LossyImageCompressionRetired',\n  x00082111: 'DerivationDescription',\n  x00082112: 'SourceImageSequence',\n  x00082120: 'StageName',\n  x00082122: 'StageNumber',\n  x00082124: 'NumberOfStages',\n  x00082127: 'ViewName',\n  x00082128: 'ViewNumber',\n  x00082129: 'NumberOfEventTimers',\n  x0008212a: 'NumberOfViewsInStage',\n  x00082130: 'EventElapsedTimes',\n  x00082132: 'EventTimerNames',\n  x00082133: 'EventTimerSequence',\n  x00082134: 'EventTimeOffset',\n  x00082135: 'EventCodeSequence',\n  x00082142: 'StartTrim',\n  x00082143: 'StopTrim',\n  x00082144: 'RecommendedDisplayFrameRate',\n  x00082200: 'TransducerPosition',\n  x00082204: 'TransducerOrientation',\n  x00082208: 'AnatomicStructure',\n  x00082218: 'AnatomicRegionSequence',\n  x00082220: 'AnatomicRegionModifierSequence',\n  x00082228: 'PrimaryAnatomicStructureSequence',\n  x00082229: 'AnatomicStructureOrRegionSequence',\n  x00082230: 'AnatomicStructureModifierSequence',\n  x00082240: 'TransducerPositionSequence',\n  x00082242: 'TransducerPositionModifierSequence',\n  x00082244: 'TransducerOrientationSequence',\n  x00082246: 'TransducerOrientationModifierSeq',\n  x00082253: 'AnatomicEntrancePortalCodeSeqTrial',\n  x00082255: 'AnatomicApproachDirCodeSeqTrial',\n  x00082256: 'AnatomicPerspectiveDescrTrial',\n  x00082257: 'AnatomicPerspectiveCodeSeqTrial',\n  x00083001: 'AlternateRepresentationSequence',\n  x00083010: 'IrradiationEventUID',\n  x00084000: 'IdentifyingComments',\n  x00089007: 'FrameType',\n  x00089092: 'ReferencedImageEvidenceSequence',\n  x00089121: 'ReferencedRawDataSequence',\n  x00089123: 'CreatorVersionUID',\n  x00089124: 'DerivationImageSequence',\n  x00089154: 'SourceImageEvidenceSequence',\n  x00089205: 'PixelPresentation',\n  x00089206: 'VolumetricProperties',\n  x00089207: 'VolumeBasedCalculationTechnique',\n  x00089208: 'ComplexImageComponent',\n  x00089209: 'AcquisitionContrast',\n  x00089215: 'DerivationCodeSequence',\n  x00089237: 'GrayscalePresentationStateSequence',\n  x00089410: 'ReferencedOtherPlaneSequence',\n  x00089458: 'FrameDisplaySequence',\n  x00089459: 'RecommendedDisplayFrameRateInFloat',\n  x00089460: 'SkipFrameRangeFlag',\n  // x00091001: 'FullFidelity',\n  // x00091002: 'SuiteID',\n  // x00091004: 'ProductID',\n  // x00091027: 'ImageActualDate',\n  // x00091030: 'ServiceID',\n  // x00091031: 'MobileLocationNumber',\n  // x000910e3: 'EquipmentUID',\n  // x000910e6: 'GenesisVersionNow',\n  // x000910e7: 'ExamRecordChecksum',\n  // x000910e9: 'ActualSeriesDataTimeStamp',\n  x00100000: 'PatientGroupLength',\n  x00100010: 'PatientName',\n  x00100020: 'PatientID',\n  x00100021: 'IssuerOfPatientID',\n  x00100022: 'TypeOfPatientID',\n  x00100030: 'PatientBirthDate',\n  x00100032: 'PatientBirthTime',\n  x00100040: 'PatientSex',\n  x00100050: 'PatientInsurancePlanCodeSequence',\n  x00100101: 'PatientPrimaryLanguageCodeSeq',\n  x00100102: 'PatientPrimaryLanguageCodeModSeq',\n  x00101000: 'OtherPatientIDs',\n  x00101001: 'OtherPatientNames',\n  x00101002: 'OtherPatientIDsSequence',\n  x00101005: 'PatientBirthName',\n  x00101010: 'PatientAge',\n  x00101020: 'PatientSize',\n  x00101030: 'PatientWeight',\n  x00101040: 'PatientAddress',\n  x00101050: 'InsurancePlanIdentification',\n  x00101060: 'PatientMotherBirthName',\n  x00101080: 'MilitaryRank',\n  x00101081: 'BranchOfService',\n  x00101090: 'MedicalRecordLocator',\n  x00102000: 'MedicalAlerts',\n  x00102110: 'Allergies',\n  x00102150: 'CountryOfResidence',\n  x00102152: 'RegionOfResidence',\n  x00102154: 'PatientTelephoneNumbers',\n  x00102160: 'EthnicGroup',\n  x00102180: 'Occupation',\n  x001021a0: 'SmokingStatus',\n  x001021b0: 'AdditionalPatientHistory',\n  x001021c0: 'PregnancyStatus',\n  x001021d0: 'LastMenstrualDate',\n  x001021f0: 'PatientReligiousPreference',\n  x00102201: 'PatientSpeciesDescription',\n  x00102202: 'PatientSpeciesCodeSequence',\n  x00102203: 'PatientSexNeutered',\n  x00102210: 'AnatomicalOrientationType',\n  x00102292: 'PatientBreedDescription',\n  x00102293: 'PatientBreedCodeSequence',\n  x00102294: 'BreedRegistrationSequence',\n  x00102295: 'BreedRegistrationNumber',\n  x00102296: 'BreedRegistryCodeSequence',\n  x00102297: 'ResponsiblePerson',\n  x00102298: 'ResponsiblePersonRole',\n  x00102299: 'ResponsibleOrganization',\n  x00104000: 'PatientComments',\n  x00109431: 'ExaminedBodyThickness',\n  x00111010: 'PatientStatus',\n  x00120010: 'ClinicalTrialSponsorName',\n  x00120020: 'ClinicalTrialProtocolID',\n  x00120021: 'ClinicalTrialProtocolName',\n  x00120030: 'ClinicalTrialSiteID',\n  x00120031: 'ClinicalTrialSiteName',\n  x00120040: 'ClinicalTrialSubjectID',\n  x00120042: 'ClinicalTrialSubjectReadingID',\n  x00120050: 'ClinicalTrialTimePointID',\n  x00120051: 'ClinicalTrialTimePointDescription',\n  x00120060: 'ClinicalTrialCoordinatingCenter',\n  x00120062: 'PatientIdentityRemoved',\n  x00120063: 'DeidentificationMethod',\n  x00120064: 'DeidentificationMethodCodeSequence',\n  x00120071: 'ClinicalTrialSeriesID',\n  x00120072: 'ClinicalTrialSeriesDescription',\n  x00120084: 'DistributionType',\n  x00120085: 'ConsentForDistributionFlag',\n  x00180000: 'AcquisitionGroupLength',\n  x00180010: 'ContrastBolusAgent',\n  x00180012: 'ContrastBolusAgentSequence',\n  x00180014: 'ContrastBolusAdministrationRoute',\n  x00180015: 'BodyPartExamined',\n  x00180020: 'ScanningSequence',\n  x00180021: 'SequenceVariant',\n  x00180022: 'ScanOptions',\n  x00180023: 'MRAcquisitionType',\n  x00180024: 'SequenceName',\n  x00180025: 'AngioFlag',\n  x00180026: 'InterventionDrugInformationSeq',\n  x00180027: 'InterventionDrugStopTime',\n  x00180028: 'InterventionDrugDose',\n  x00180029: 'InterventionDrugSequence',\n  x0018002a: 'AdditionalDrugSequence',\n  x00180030: 'Radionuclide',\n  x00180031: 'Radiopharmaceutical',\n  x00180032: 'EnergyWindowCenterline',\n  x00180033: 'EnergyWindowTotalWidth',\n  x00180034: 'InterventionDrugName',\n  x00180035: 'InterventionDrugStartTime',\n  x00180036: 'InterventionSequence',\n  x00180037: 'TherapyType',\n  x00180038: 'InterventionStatus',\n  x00180039: 'TherapyDescription',\n  x0018003a: 'InterventionDescription',\n  x00180040: 'CineRate',\n  x00180042: 'InitialCineRunState',\n  x00180050: 'SliceThickness',\n  x00180060: 'KVP',\n  x00180070: 'CountsAccumulated',\n  x00180071: 'AcquisitionTerminationCondition',\n  x00180072: 'EffectiveDuration',\n  x00180073: 'AcquisitionStartCondition',\n  x00180074: 'AcquisitionStartConditionData',\n  x00180075: 'AcquisitionEndConditionData',\n  x00180080: 'RepetitionTime',\n  x00180081: 'EchoTime',\n  x00180082: 'InversionTime',\n  x00180083: 'NumberOfAverages',\n  x00180084: 'ImagingFrequency',\n  x00180085: 'ImagedNucleus',\n  x00180086: 'EchoNumber',\n  x00180087: 'MagneticFieldStrength',\n  x00180088: 'SpacingBetweenSlices',\n  x00180089: 'NumberOfPhaseEncodingSteps',\n  x00180090: 'DataCollectionDiameter',\n  x00180091: 'EchoTrainLength',\n  x00180093: 'PercentSampling',\n  x00180094: 'PercentPhaseFieldOfView',\n  x00180095: 'PixelBandwidth',\n  x00181000: 'DeviceSerialNumber',\n  x00181002: 'DeviceUID',\n  x00181003: 'DeviceID',\n  x00181004: 'PlateID',\n  x00181005: 'GeneratorID',\n  x00181006: 'GridID',\n  x00181007: 'CassetteID',\n  x00181008: 'GantryID',\n  x00181010: 'SecondaryCaptureDeviceID',\n  x00181011: 'HardcopyCreationDeviceID',\n  x00181012: 'DateOfSecondaryCapture',\n  x00181014: 'TimeOfSecondaryCapture',\n  x00181016: 'SecondaryCaptureDeviceManufacturer',\n  x00181017: 'HardcopyDeviceManufacturer',\n  x00181018: 'SecondaryCaptureDeviceModelName',\n  x00181019: 'SecondaryCaptureDeviceSoftwareVers',\n  x0018101a: 'HardcopyDeviceSoftwareVersion',\n  x0018101b: 'HardcopyDeviceModelName',\n  x00181020: 'SoftwareVersion',\n  x00181022: 'VideoImageFormatAcquired',\n  x00181023: 'DigitalImageFormatAcquired',\n  x00181030: 'ProtocolName',\n  x00181040: 'ContrastBolusRoute',\n  x00181041: 'ContrastBolusVolume',\n  x00181042: 'ContrastBolusStartTime',\n  x00181043: 'ContrastBolusStopTime',\n  x00181044: 'ContrastBolusTotalDose',\n  x00181045: 'SyringeCounts',\n  x00181046: 'ContrastFlowRate',\n  x00181047: 'ContrastFlowDuration',\n  x00181048: 'ContrastBolusIngredient',\n  x00181049: 'ContrastBolusConcentration',\n  x00181050: 'SpatialResolution',\n  x00181060: 'TriggerTime',\n  x00181061: 'TriggerSourceOrType',\n  x00181062: 'NominalInterval',\n  x00181063: 'FrameTime',\n  x00181064: 'CardiacFramingType',\n  x00181065: 'FrameTimeVector',\n  x00181066: 'FrameDelay',\n  x00181067: 'ImageTriggerDelay',\n  x00181068: 'MultiplexGroupTimeOffset',\n  x00181069: 'TriggerTimeOffset',\n  x0018106a: 'SynchronizationTrigger',\n  x0018106c: 'SynchronizationChannel',\n  x0018106e: 'TriggerSamplePosition',\n  x00181070: 'RadiopharmaceuticalRoute',\n  x00181071: 'RadiopharmaceuticalVolume',\n  x00181072: 'RadiopharmaceuticalStartTime',\n  x00181073: 'RadiopharmaceuticalStopTime',\n  x00181074: 'RadionuclideTotalDose',\n  x00181075: 'RadionuclideHalfLife',\n  x00181076: 'RadionuclidePositronFraction',\n  x00181077: 'RadiopharmaceuticalSpecActivity',\n  x00181078: 'RadiopharmaceuticalStartDateTime',\n  x00181079: 'RadiopharmaceuticalStopDateTime',\n  x00181080: 'BeatRejectionFlag',\n  x00181081: 'LowRRValue',\n  x00181082: 'HighRRValue',\n  x00181083: 'IntervalsAcquired',\n  x00181084: 'IntervalsRejected',\n  x00181085: 'PVCRejection',\n  x00181086: 'SkipBeats',\n  x00181088: 'HeartRate',\n  x00181090: 'CardiacNumberOfImages',\n  x00181094: 'TriggerWindow',\n  x00181100: 'ReconstructionDiameter',\n  x00181110: 'DistanceSourceToDetector',\n  x00181111: 'DistanceSourceToPatient',\n  x00181114: 'EstimatedRadiographicMagnification',\n  x00181120: 'GantryDetectorTilt',\n  x00181121: 'GantryDetectorSlew',\n  x00181130: 'TableHeight',\n  x00181131: 'TableTraverse',\n  x00181134: 'TableMotion',\n  x00181135: 'TableVerticalIncrement',\n  x00181136: 'TableLateralIncrement',\n  x00181137: 'TableLongitudinalIncrement',\n  x00181138: 'TableAngle',\n  x0018113a: 'TableType',\n  x00181140: 'RotationDirection',\n  x00181141: 'AngularPosition',\n  x00181142: 'RadialPosition',\n  x00181143: 'ScanArc',\n  x00181144: 'AngularStep',\n  x00181145: 'CenterOfRotationOffset',\n  x00181146: 'RotationOffset',\n  x00181147: 'FieldOfViewShape',\n  x00181149: 'FieldOfViewDimensions',\n  x00181150: 'ExposureTime',\n  x00181151: 'XRayTubeCurrent',\n  x00181152: 'Exposure',\n  x00181153: 'ExposureInMicroAmpSec',\n  x00181154: 'AveragePulseWidth',\n  x00181155: 'RadiationSetting',\n  x00181156: 'RectificationType',\n  x0018115a: 'RadiationMode',\n  x0018115e: 'ImageAreaDoseProduct',\n  x00181160: 'FilterType',\n  x00181161: 'TypeOfFilters',\n  x00181162: 'IntensifierSize',\n  x00181164: 'ImagerPixelSpacing',\n  x00181166: 'Grid',\n  x00181170: 'GeneratorPower',\n  x00181180: 'CollimatorGridName',\n  x00181181: 'CollimatorType',\n  x00181182: 'FocalDistance',\n  x00181183: 'XFocusCenter',\n  x00181184: 'YFocusCenter',\n  x00181190: 'FocalSpots',\n  x00181191: 'AnodeTargetMaterial',\n  x001811a0: 'BodyPartThickness',\n  x001811a2: 'CompressionForce',\n  x00181200: 'DateOfLastCalibration',\n  x00181201: 'TimeOfLastCalibration',\n  x00181210: 'ConvolutionKernel',\n  x00181240: 'UpperLowerPixelValues',\n  x00181242: 'ActualFrameDuration',\n  x00181243: 'CountRate',\n  x00181244: 'PreferredPlaybackSequencing',\n  x00181250: 'ReceiveCoilName',\n  x00181251: 'TransmitCoilName',\n  x00181260: 'PlateType',\n  x00181261: 'PhosphorType',\n  x00181300: 'ScanVelocity',\n  x00181301: 'WholeBodyTechnique',\n  x00181302: 'ScanLength',\n  x00181310: 'AcquisitionMatrix',\n  x00181312: 'InPlanePhaseEncodingDirection',\n  x00181314: 'FlipAngle',\n  x00181315: 'VariableFlipAngleFlag',\n  x00181316: 'SAR',\n  x00181318: 'DB-Dt',\n  x00181400: 'AcquisitionDeviceProcessingDescr',\n  x00181401: 'AcquisitionDeviceProcessingCode',\n  x00181402: 'CassetteOrientation',\n  x00181403: 'CassetteSize',\n  x00181404: 'ExposuresOnPlate',\n  x00181405: 'RelativeXRayExposure',\n  x00181450: 'ColumnAngulation',\n  x00181460: 'TomoLayerHeight',\n  x00181470: 'TomoAngle',\n  x00181480: 'TomoTime',\n  x00181490: 'TomoType',\n  x00181491: 'TomoClass',\n  x00181495: 'NumberOfTomosynthesisSourceImages',\n  x00181500: 'PositionerMotion',\n  x00181508: 'PositionerType',\n  x00181510: 'PositionerPrimaryAngle',\n  x00181511: 'PositionerSecondaryAngle',\n  x00181520: 'PositionerPrimaryAngleIncrement',\n  x00181521: 'PositionerSecondaryAngleIncrement',\n  x00181530: 'DetectorPrimaryAngle',\n  x00181531: 'DetectorSecondaryAngle',\n  x00181600: 'ShutterShape',\n  x00181602: 'ShutterLeftVerticalEdge',\n  x00181604: 'ShutterRightVerticalEdge',\n  x00181606: 'ShutterUpperHorizontalEdge',\n  x00181608: 'ShutterLowerHorizontalEdge',\n  x00181610: 'CenterOfCircularShutter',\n  x00181612: 'RadiusOfCircularShutter',\n  x00181620: 'VerticesOfPolygonalShutter',\n  x00181622: 'ShutterPresentationValue',\n  x00181623: 'ShutterOverlayGroup',\n  x00181624: 'ShutterPresentationColorCIELabVal',\n  x00181700: 'CollimatorShape',\n  x00181702: 'CollimatorLeftVerticalEdge',\n  x00181704: 'CollimatorRightVerticalEdge',\n  x00181706: 'CollimatorUpperHorizontalEdge',\n  x00181708: 'CollimatorLowerHorizontalEdge',\n  x00181710: 'CenterOfCircularCollimator',\n  x00181712: 'RadiusOfCircularCollimator',\n  x00181720: 'VerticesOfPolygonalCollimator',\n  x00181800: 'AcquisitionTimeSynchronized',\n  x00181801: 'TimeSource',\n  x00181802: 'TimeDistributionProtocol',\n  x00181803: 'NTPSourceAddress',\n  x00182001: 'PageNumberVector',\n  x00182002: 'FrameLabelVector',\n  x00182003: 'FramePrimaryAngleVector',\n  x00182004: 'FrameSecondaryAngleVector',\n  x00182005: 'SliceLocationVector',\n  x00182006: 'DisplayWindowLabelVector',\n  x00182010: 'NominalScannedPixelSpacing',\n  x00182020: 'DigitizingDeviceTransportDirection',\n  x00182030: 'RotationOfScannedFilm',\n  x00183100: 'IVUSAcquisition',\n  x00183101: 'IVUSPullbackRate',\n  x00183102: 'IVUSGatedRate',\n  x00183103: 'IVUSPullbackStartFrameNumber',\n  x00183104: 'IVUSPullbackStopFrameNumber',\n  x00183105: 'LesionNumber',\n  x00184000: 'AcquisitionComments',\n  x00185000: 'OutputPower',\n  x00185010: 'TransducerData',\n  x00185012: 'FocusDepth',\n  x00185020: 'ProcessingFunction',\n  x00185021: 'PostprocessingFunction',\n  x00185022: 'MechanicalIndex',\n  x00185024: 'BoneThermalIndex',\n  x00185026: 'CranialThermalIndex',\n  x00185027: 'SoftTissueThermalIndex',\n  x00185028: 'SoftTissueFocusThermalIndex',\n  x00185029: 'SoftTissueSurfaceThermalIndex',\n  x00185030: 'DynamicRange',\n  x00185040: 'TotalGain',\n  x00185050: 'DepthOfScanField',\n  x00185100: 'PatientPosition',\n  x00185101: 'ViewPosition',\n  x00185104: 'ProjectionEponymousNameCodeSeq',\n  x00185210: 'ImageTransformationMatrix',\n  x00185212: 'ImageTranslationVector',\n  x00186000: 'Sensitivity',\n  x00186011: 'SequenceOfUltrasoundRegions',\n  x00186012: 'RegionSpatialFormat',\n  x00186014: 'RegionDataType',\n  x00186016: 'RegionFlags',\n  x00186018: 'RegionLocationMinX0',\n  x0018601a: 'RegionLocationMinY0',\n  x0018601c: 'RegionLocationMaxX1',\n  x0018601e: 'RegionLocationMaxY1',\n  x00186020: 'ReferencePixelX0',\n  x00186022: 'ReferencePixelY0',\n  x00186024: 'PhysicalUnitsXDirection',\n  x00186026: 'PhysicalUnitsYDirection',\n  x00186028: 'ReferencePixelPhysicalValueX',\n  x0018602a: 'ReferencePixelPhysicalValueY',\n  x0018602c: 'PhysicalDeltaX',\n  x0018602e: 'PhysicalDeltaY',\n  x00186030: 'TransducerFrequency',\n  x00186031: 'TransducerType',\n  x00186032: 'PulseRepetitionFrequency',\n  x00186034: 'DopplerCorrectionAngle',\n  x00186036: 'SteeringAngle',\n  x00186038: 'DopplerSampleVolumeXPosRetired',\n  x00186039: 'DopplerSampleVolumeXPosition',\n  x0018603a: 'DopplerSampleVolumeYPosRetired',\n  x0018603b: 'DopplerSampleVolumeYPosition',\n  x0018603c: 'TMLinePositionX0Retired',\n  x0018603d: 'TMLinePositionX0',\n  x0018603e: 'TMLinePositionY0Retired',\n  x0018603f: 'TMLinePositionY0',\n  x00186040: 'TMLinePositionX1Retired',\n  x00186041: 'TMLinePositionX1',\n  x00186042: 'TMLinePositionY1Retired',\n  x00186043: 'TMLinePositionY1',\n  x00186044: 'PixelComponentOrganization',\n  x00186046: 'PixelComponentMask',\n  x00186048: 'PixelComponentRangeStart',\n  x0018604a: 'PixelComponentRangeStop',\n  x0018604c: 'PixelComponentPhysicalUnits',\n  x0018604e: 'PixelComponentDataType',\n  x00186050: 'NumberOfTableBreakPoints',\n  x00186052: 'TableOfXBreakPoints',\n  x00186054: 'TableOfYBreakPoints',\n  x00186056: 'NumberOfTableEntries',\n  x00186058: 'TableOfPixelValues',\n  x0018605a: 'TableOfParameterValues',\n  x00186060: 'RWaveTimeVector',\n  x00187000: 'DetectorConditionsNominalFlag',\n  x00187001: 'DetectorTemperature',\n  x00187004: 'DetectorType',\n  x00187005: 'DetectorConfiguration',\n  x00187006: 'DetectorDescription',\n  x00187008: 'DetectorMode',\n  x0018700a: 'DetectorID',\n  x0018700c: 'DateOfLastDetectorCalibration',\n  x0018700e: 'TimeOfLastDetectorCalibration',\n  x00187010: 'DetectorExposuresSinceCalibration',\n  x00187011: 'DetectorExposuresSinceManufactured',\n  x00187012: 'DetectorTimeSinceLastExposure',\n  x00187014: 'DetectorActiveTime',\n  x00187016: 'DetectorActiveOffsetFromExposure',\n  x0018701a: 'DetectorBinning',\n  x00187020: 'DetectorElementPhysicalSize',\n  x00187022: 'DetectorElementSpacing',\n  x00187024: 'DetectorActiveShape',\n  x00187026: 'DetectorActiveDimensions',\n  x00187028: 'DetectorActiveOrigin',\n  x0018702a: 'DetectorManufacturerName',\n  x0018702b: 'DetectorManufacturersModelName',\n  x00187030: 'FieldOfViewOrigin',\n  x00187032: 'FieldOfViewRotation',\n  x00187034: 'FieldOfViewHorizontalFlip',\n  x00187040: 'GridAbsorbingMaterial',\n  x00187041: 'GridSpacingMaterial',\n  x00187042: 'GridThickness',\n  x00187044: 'GridPitch',\n  x00187046: 'GridAspectRatio',\n  x00187048: 'GridPeriod',\n  x0018704c: 'GridFocalDistance',\n  x00187050: 'FilterMaterial',\n  x00187052: 'FilterThicknessMinimum',\n  x00187054: 'FilterThicknessMaximum',\n  x00187060: 'ExposureControlMode',\n  x00187062: 'ExposureControlModeDescription',\n  x00187064: 'ExposureStatus',\n  x00187065: 'PhototimerSetting',\n  x00188150: 'ExposureTimeInMicroSec',\n  x00188151: 'XRayTubeCurrentInMicroAmps',\n  x00189004: 'ContentQualification',\n  x00189005: 'PulseSequenceName',\n  x00189006: 'MRImagingModifierSequence',\n  x00189008: 'EchoPulseSequence',\n  x00189009: 'InversionRecovery',\n  x00189010: 'FlowCompensation',\n  x00189011: 'MultipleSpinEcho',\n  x00189012: 'MultiPlanarExcitation',\n  x00189014: 'PhaseContrast',\n  x00189015: 'TimeOfFlightContrast',\n  x00189016: 'Spoiling',\n  x00189017: 'SteadyStatePulseSequence',\n  x00189018: 'EchoPlanarPulseSequence',\n  x00189019: 'TagAngleFirstAxis',\n  x00189020: 'MagnetizationTransfer',\n  x00189021: 'T2Preparation',\n  x00189022: 'BloodSignalNulling',\n  x00189024: 'SaturationRecovery',\n  x00189025: 'SpectrallySelectedSuppression',\n  x00189026: 'SpectrallySelectedExcitation',\n  x00189027: 'SpatialPresaturation',\n  x00189028: 'Tagging',\n  x00189029: 'OversamplingPhase',\n  x00189030: 'TagSpacingFirstDimension',\n  x00189032: 'GeometryOfKSpaceTraversal',\n  x00189033: 'SegmentedKSpaceTraversal',\n  x00189034: 'RectilinearPhaseEncodeReordering',\n  x00189035: 'TagThickness',\n  x00189036: 'PartialFourierDirection',\n  x00189037: 'CardiacSynchronizationTechnique',\n  x00189041: 'ReceiveCoilManufacturerName',\n  x00189042: 'MRReceiveCoilSequence',\n  x00189043: 'ReceiveCoilType',\n  x00189044: 'QuadratureReceiveCoil',\n  x00189045: 'MultiCoilDefinitionSequence',\n  x00189046: 'MultiCoilConfiguration',\n  x00189047: 'MultiCoilElementName',\n  x00189048: 'MultiCoilElementUsed',\n  x00189049: 'MRTransmitCoilSequence',\n  x00189050: 'TransmitCoilManufacturerName',\n  x00189051: 'TransmitCoilType',\n  x00189052: 'SpectralWidth',\n  x00189053: 'ChemicalShiftReference',\n  x00189054: 'VolumeLocalizationTechnique',\n  x00189058: 'MRAcquisitionFrequencyEncodeSteps',\n  x00189059: 'Decoupling',\n  x00189060: 'DecoupledNucleus',\n  x00189061: 'DecouplingFrequency',\n  x00189062: 'DecouplingMethod',\n  x00189063: 'DecouplingChemicalShiftReference',\n  x00189064: 'KSpaceFiltering',\n  x00189065: 'TimeDomainFiltering',\n  x00189066: 'NumberOfZeroFills',\n  x00189067: 'BaselineCorrection',\n  x00189069: 'ParallelReductionFactorInPlane',\n  x00189070: 'CardiacRRIntervalSpecified',\n  x00189073: 'AcquisitionDuration',\n  x00189074: 'FrameAcquisitionDateTime',\n  x00189075: 'DiffusionDirectionality',\n  x00189076: 'DiffusionGradientDirectionSequence',\n  x00189077: 'ParallelAcquisition',\n  x00189078: 'ParallelAcquisitionTechnique',\n  x00189079: 'InversionTimes',\n  x00189080: 'MetaboliteMapDescription',\n  x00189081: 'PartialFourier',\n  x00189082: 'EffectiveEchoTime',\n  x00189083: 'MetaboliteMapCodeSequence',\n  x00189084: 'ChemicalShiftSequence',\n  x00189085: 'CardiacSignalSource',\n  x00189087: 'DiffusionBValue',\n  x00189089: 'DiffusionGradientOrientation',\n  x00189090: 'VelocityEncodingDirection',\n  x00189091: 'VelocityEncodingMinimumValue',\n  x00189093: 'NumberOfKSpaceTrajectories',\n  x00189094: 'CoverageOfKSpace',\n  x00189095: 'SpectroscopyAcquisitionPhaseRows',\n  x00189096: 'ParallelReductFactorInPlaneRetired',\n  x00189098: 'TransmitterFrequency',\n  x00189100: 'ResonantNucleus',\n  x00189101: 'FrequencyCorrection',\n  x00189103: 'MRSpectroscopyFOV-GeometrySequence',\n  x00189104: 'SlabThickness',\n  x00189105: 'SlabOrientation',\n  x00189106: 'MidSlabPosition',\n  x00189107: 'MRSpatialSaturationSequence',\n  x00189112: 'MRTimingAndRelatedParametersSeq',\n  x00189114: 'MREchoSequence',\n  x00189115: 'MRModifierSequence',\n  x00189117: 'MRDiffusionSequence',\n  x00189118: 'CardiacTriggerSequence',\n  x00189119: 'MRAveragesSequence',\n  x00189125: 'MRFOV-GeometrySequence',\n  x00189126: 'VolumeLocalizationSequence',\n  x00189127: 'SpectroscopyAcquisitionDataColumns',\n  x00189147: 'DiffusionAnisotropyType',\n  x00189151: 'FrameReferenceDateTime',\n  x00189152: 'MRMetaboliteMapSequence',\n  x00189155: 'ParallelReductionFactorOutOfPlane',\n  x00189159: 'SpectroscopyOutOfPlanePhaseSteps',\n  x00189166: 'BulkMotionStatus',\n  x00189168: 'ParallelReductionFactSecondInPlane',\n  x00189169: 'CardiacBeatRejectionTechnique',\n  x00189170: 'RespiratoryMotionCompTechnique',\n  x00189171: 'RespiratorySignalSource',\n  x00189172: 'BulkMotionCompensationTechnique',\n  x00189173: 'BulkMotionSignalSource',\n  x00189174: 'ApplicableSafetyStandardAgency',\n  x00189175: 'ApplicableSafetyStandardDescr',\n  x00189176: 'OperatingModeSequence',\n  x00189177: 'OperatingModeType',\n  x00189178: 'OperatingMode',\n  x00189179: 'SpecificAbsorptionRateDefinition',\n  x00189180: 'GradientOutputType',\n  x00189181: 'SpecificAbsorptionRateValue',\n  x00189182: 'GradientOutput',\n  x00189183: 'FlowCompensationDirection',\n  x00189184: 'TaggingDelay',\n  x00189185: 'RespiratoryMotionCompTechDescr',\n  x00189186: 'RespiratorySignalSourceID',\n  x00189195: 'ChemicalShiftsMinIntegrateLimitHz',\n  x00189196: 'ChemicalShiftsMaxIntegrateLimitHz',\n  x00189197: 'MRVelocityEncodingSequence',\n  x00189198: 'FirstOrderPhaseCorrection',\n  x00189199: 'WaterReferencedPhaseCorrection',\n  x00189200: 'MRSpectroscopyAcquisitionType',\n  x00189214: 'RespiratoryCyclePosition',\n  x00189217: 'VelocityEncodingMaximumValue',\n  x00189218: 'TagSpacingSecondDimension',\n  x00189219: 'TagAngleSecondAxis',\n  x00189220: 'FrameAcquisitionDuration',\n  x00189226: 'MRImageFrameTypeSequence',\n  x00189227: 'MRSpectroscopyFrameTypeSequence',\n  x00189231: 'MRAcqPhaseEncodingStepsInPlane',\n  x00189232: 'MRAcqPhaseEncodingStepsOutOfPlane',\n  x00189234: 'SpectroscopyAcqPhaseColumns',\n  x00189236: 'CardiacCyclePosition',\n  x00189239: 'SpecificAbsorptionRateSequence',\n  x00189240: 'RFEchoTrainLength',\n  x00189241: 'GradientEchoTrainLength',\n  x00189295: 'ChemicalShiftsMinIntegrateLimitPPM',\n  x00189296: 'ChemicalShiftsMaxIntegrateLimitPPM',\n  x00189301: 'CTAcquisitionTypeSequence',\n  x00189302: 'AcquisitionType',\n  x00189303: 'TubeAngle',\n  x00189304: 'CTAcquisitionDetailsSequence',\n  x00189305: 'RevolutionTime',\n  x00189306: 'SingleCollimationWidth',\n  x00189307: 'TotalCollimationWidth',\n  x00189308: 'CTTableDynamicsSequence',\n  x00189309: 'TableSpeed',\n  x00189310: 'TableFeedPerRotation',\n  x00189311: 'SpiralPitchFactor',\n  x00189312: 'CTGeometrySequence',\n  x00189313: 'DataCollectionCenterPatient',\n  x00189314: 'CTReconstructionSequence',\n  x00189315: 'ReconstructionAlgorithm',\n  x00189316: 'ConvolutionKernelGroup',\n  x00189317: 'ReconstructionFieldOfView',\n  x00189318: 'ReconstructionTargetCenterPatient',\n  x00189319: 'ReconstructionAngle',\n  x00189320: 'ImageFilter',\n  x00189321: 'CTExposureSequence',\n  x00189322: 'ReconstructionPixelSpacing',\n  x00189323: 'ExposureModulationType',\n  x00189324: 'EstimatedDoseSaving',\n  x00189325: 'CTXRayDetailsSequence',\n  x00189326: 'CTPositionSequence',\n  x00189327: 'TablePosition',\n  x00189328: 'ExposureTimeInMilliSec',\n  x00189329: 'CTImageFrameTypeSequence',\n  x00189330: 'XRayTubeCurrentInMilliAmps',\n  x00189332: 'ExposureInMilliAmpSec',\n  x00189333: 'ConstantVolumeFlag',\n  x00189334: 'FluoroscopyFlag',\n  x00189335: 'SourceToDataCollectionCenterDist',\n  x00189337: 'ContrastBolusAgentNumber',\n  x00189338: 'ContrastBolusIngredientCodeSeq',\n  x00189340: 'ContrastAdministrationProfileSeq',\n  x00189341: 'ContrastBolusUsageSequence',\n  x00189342: 'ContrastBolusAgentAdministered',\n  x00189343: 'ContrastBolusAgentDetected',\n  x00189344: 'ContrastBolusAgentPhase',\n  x00189345: 'CTDIvol',\n  x00189346: 'CTDIPhantomTypeCodeSequence',\n  x00189351: 'CalciumScoringMassFactorPatient',\n  x00189352: 'CalciumScoringMassFactorDevice',\n  x00189353: 'EnergyWeightingFactor',\n  x00189360: 'CTAdditionalXRaySourceSequence',\n  x00189401: 'ProjectionPixelCalibrationSequence',\n  x00189402: 'DistanceSourceToIsocenter',\n  x00189403: 'DistanceObjectToTableTop',\n  x00189404: 'ObjectPixelSpacingInCenterOfBeam',\n  x00189405: 'PositionerPositionSequence',\n  x00189406: 'TablePositionSequence',\n  x00189407: 'CollimatorShapeSequence',\n  x00189412: 'XA-XRFFrameCharacteristicsSequence',\n  x00189417: 'FrameAcquisitionSequence',\n  x00189420: 'XRayReceptorType',\n  x00189423: 'AcquisitionProtocolName',\n  x00189424: 'AcquisitionProtocolDescription',\n  x00189425: 'ContrastBolusIngredientOpaque',\n  x00189426: 'DistanceReceptorPlaneToDetHousing',\n  x00189427: 'IntensifierActiveShape',\n  x00189428: 'IntensifierActiveDimensions',\n  x00189429: 'PhysicalDetectorSize',\n  x00189430: 'PositionOfIsocenterProjection',\n  x00189432: 'FieldOfViewSequence',\n  x00189433: 'FieldOfViewDescription',\n  x00189434: 'ExposureControlSensingRegionsSeq',\n  x00189435: 'ExposureControlSensingRegionShape',\n  x00189436: 'ExposureControlSensRegionLeftEdge',\n  x00189437: 'ExposureControlSensRegionRightEdge',\n  x00189440: 'CenterOfCircExposControlSensRegion',\n  x00189441: 'RadiusOfCircExposControlSensRegion',\n  x00189447: 'ColumnAngulationPatient',\n  x00189449: 'BeamAngle',\n  x00189451: 'FrameDetectorParametersSequence',\n  x00189452: 'CalculatedAnatomyThickness',\n  x00189455: 'CalibrationSequence',\n  x00189456: 'ObjectThicknessSequence',\n  x00189457: 'PlaneIdentification',\n  x00189461: 'FieldOfViewDimensionsInFloat',\n  x00189462: 'IsocenterReferenceSystemSequence',\n  x00189463: 'PositionerIsocenterPrimaryAngle',\n  x00189464: 'PositionerIsocenterSecondaryAngle',\n  x00189465: 'PositionerIsocenterDetRotAngle',\n  x00189466: 'TableXPositionToIsocenter',\n  x00189467: 'TableYPositionToIsocenter',\n  x00189468: 'TableZPositionToIsocenter',\n  x00189469: 'TableHorizontalRotationAngle',\n  x00189470: 'TableHeadTiltAngle',\n  x00189471: 'TableCradleTiltAngle',\n  x00189472: 'FrameDisplayShutterSequence',\n  x00189473: 'AcquiredImageAreaDoseProduct',\n  x00189474: 'CArmPositionerTabletopRelationship',\n  x00189476: 'XRayGeometrySequence',\n  x00189477: 'IrradiationEventIDSequence',\n  x00189504: 'XRay3DFrameTypeSequence',\n  x00189506: 'ContributingSourcesSequence',\n  x00189507: 'XRay3DAcquisitionSequence',\n  x00189508: 'PrimaryPositionerScanArc',\n  x00189509: 'SecondaryPositionerScanArc',\n  x00189510: 'PrimaryPositionerScanStartAngle',\n  x00189511: 'SecondaryPositionerScanStartAngle',\n  x00189514: 'PrimaryPositionerIncrement',\n  x00189515: 'SecondaryPositionerIncrement',\n  x00189516: 'StartAcquisitionDateTime',\n  x00189517: 'EndAcquisitionDateTime',\n  x00189524: 'ApplicationName',\n  x00189525: 'ApplicationVersion',\n  x00189526: 'ApplicationManufacturer',\n  x00189527: 'AlgorithmType',\n  x00189528: 'AlgorithmDescription',\n  x00189530: 'XRay3DReconstructionSequence',\n  x00189531: 'ReconstructionDescription',\n  x00189538: 'PerProjectionAcquisitionSequence',\n  x00189601: 'DiffusionBMatrixSequence',\n  x00189602: 'DiffusionBValueXX',\n  x00189603: 'DiffusionBValueXY',\n  x00189604: 'DiffusionBValueXZ',\n  x00189605: 'DiffusionBValueYY',\n  x00189606: 'DiffusionBValueYZ',\n  x00189607: 'DiffusionBValueZZ',\n  x00189701: 'DecayCorrectionDateTime',\n  x00189715: 'StartDensityThreshold',\n  x00189722: 'TerminationTimeThreshold',\n  x00189725: 'DetectorGeometry',\n  x00189727: 'AxialDetectorDimension',\n  x00189735: 'PETPositionSequence',\n  x00189739: 'NumberOfIterations',\n  x00189740: 'NumberOfSubsets',\n  x00189751: 'PETFrameTypeSequence',\n  x00189756: 'ReconstructionType',\n  x00189758: 'DecayCorrected',\n  x00189759: 'AttenuationCorrected',\n  x00189760: 'ScatterCorrected',\n  x00189761: 'DeadTimeCorrected',\n  x00189762: 'GantryMotionCorrected',\n  x00189763: 'PatientMotionCorrected',\n  x00189765: 'RandomsCorrected',\n  x00189767: 'SensitivityCalibrated',\n  x00189801: 'DepthsOfFocus',\n  x00189804: 'ExclusionStartDatetime',\n  x00189805: 'ExclusionDuration',\n  x00189807: 'ImageDataTypeSequence',\n  x00189808: 'DataType',\n  x0018980b: 'AliasedDataType',\n  x0018a001: 'ContributingEquipmentSequence',\n  x0018a002: 'ContributionDateTime',\n  x0018a003: 'ContributionDescription',\n  // x00191002: 'NumberOfCellsIInDetector',\n  // x00191003: 'CellNumberAtTheta',\n  // x00191004: 'CellSpacing',\n  // x0019100f: 'HorizFrameOfRef',\n  // x00191011: 'SeriesContrast',\n  // x00191012: 'LastPseq',\n  // x00191013: 'StartNumberForBaseline',\n  // x00191014: 'EndNumberForBaseline',\n  // x00191015: 'StartNumberForEnhancedScans',\n  // x00191016: 'EndNumberForEnhancedScans',\n  // x00191017: 'SeriesPlane',\n  // x00191018: 'FirstScanRas',\n  // x00191019: 'FirstScanLocation',\n  // x0019101a: 'LastScanRas',\n  // x0019101b: 'LastScanLoc',\n  // x0019101e: 'DisplayFieldOfView',\n  // x00191023: 'TableSpeed',\n  // x00191024: 'MidScanTime',\n  // x00191025: 'MidScanFlag',\n  // x00191026: 'DegreesOfAzimuth',\n  // x00191027: 'GantryPeriod',\n  // x0019102a: 'XRayOnPosition',\n  // x0019102b: 'XRayOffPosition',\n  // x0019102c: 'NumberOfTriggers',\n  // x0019102e: 'AngleOfFirstView',\n  // x0019102f: 'TriggerFrequency',\n  // x00191039: 'ScanFOVType',\n  // x00191040: 'StatReconFlag',\n  // x00191041: 'ComputeType',\n  // x00191042: 'SegmentNumber',\n  // x00191043: 'TotalSegmentsRequested',\n  // x00191044: 'InterscanDelay',\n  // x00191047: 'ViewCompressionFactor',\n  // x0019104a: 'TotalNoOfRefChannels',\n  // x0019104b: 'DataSizeForScanData',\n  // x00191052: 'ReconPostProcflag',\n  // x00191057: 'CTWaterNumber',\n  // x00191058: 'CTBoneNumber',\n  // x0019105a: 'AcquisitionDuration',\n  // x0019105e: 'NumberOfChannels',\n  // x0019105f: 'IncrementBetweenChannels',\n  // x00191060: 'StartingView',\n  // x00191061: 'NumberOfViews',\n  // x00191062: 'IncrementBetweenViews',\n  // x0019106a: 'DependantOnNoViewsProcessed',\n  // x0019106b: 'FieldOfViewInDetectorCells',\n  // x00191070: 'ValueOfBackProjectionButton',\n  // x00191071: 'SetIfFatqEstimatesWereUsed',\n  // x00191072: 'ZChanAvgOverViews',\n  // x00191073: 'AvgOfLeftRefChansOverViews',\n  // x00191074: 'MaxLeftChanOverViews',\n  // x00191075: 'AvgOfRightRefChansOverViews',\n  // x00191076: 'MaxRightChanOverViews',\n  // x0019107d: 'SecondEcho',\n  // x0019107e: 'NumberOfEchoes',\n  // x0019107f: 'TableDelta',\n  // x00191081: 'Contiguous',\n  // x00191084: 'PeakSAR',\n  // x00191085: 'MonitorSAR',\n  // x00191087: 'CardiacRepetitionTime',\n  // x00191088: 'ImagesPerCardiacCycle',\n  // x0019108a: 'ActualReceiveGainAnalog',\n  // x0019108b: 'ActualReceiveGainDigital',\n  // x0019108d: 'DelayAfterTrigger',\n  // x0019108f: 'Swappf',\n  // x00191090: 'PauseInterval',\n  // x00191091: 'PulseTime',\n  // x00191092: 'SliceOffsetOnFreqAxis',\n  // x00191093: 'CenterFrequency',\n  // x00191094: 'TransmitGain',\n  // x00191095: 'AnalogReceiverGain',\n  // x00191096: 'DigitalReceiverGain',\n  // x00191097: 'BitmapDefiningCVs',\n  // x00191098: 'CenterFreqMethod',\n  // x0019109b: 'PulseSeqMode',\n  // x0019109c: 'PulseSeqName',\n  // x0019109d: 'PulseSeqDate',\n  // x0019109e: 'InternalPulseSeqName',\n  // x0019109f: 'TransmittingCoil',\n  // x001910a0: 'SurfaceCoilType',\n  // x001910a1: 'ExtremityCoilFlag',\n  // x001910a2: 'RawDataRunNumber',\n  // x001910a3: 'CalibratedFieldStrength',\n  // x001910a4: 'SATFatWaterBone',\n  // x001910a5: 'ReceiveBandwidth',\n  // x001910a7: 'UserData01',\n  // x001910a8: 'UserData02',\n  // x001910a9: 'UserData03',\n  // x001910aa: 'UserData04',\n  // x001910ab: 'UserData05',\n  // x001910ac: 'UserData06',\n  // x001910ad: 'UserData07',\n  // x001910ae: 'UserData08',\n  // x001910af: 'UserData09',\n  // x001910b0: 'UserData10',\n  // x001910b1: 'UserData11',\n  // x001910b2: 'UserData12',\n  // x001910b3: 'UserData13',\n  // x001910b4: 'UserData14',\n  // x001910b5: 'UserData15',\n  // x001910b6: 'UserData16',\n  // x001910b7: 'UserData17',\n  // x001910b8: 'UserData18',\n  // x001910b9: 'UserData19',\n  // x001910ba: 'UserData20',\n  // x001910bb: 'UserData21',\n  // x001910bc: 'UserData22',\n  // x001910bd: 'UserData23',\n  // x001910be: 'ProjectionAngle',\n  // x001910c0: 'SaturationPlanes',\n  // x001910c1: 'SurfaceCoilIntensity',\n  // x001910c2: 'SATLocationR',\n  // x001910c3: 'SATLocationL',\n  // x001910c4: 'SATLocationA',\n  // x001910c5: 'SATLocationP',\n  // x001910c6: 'SATLocationH',\n  // x001910c7: 'SATLocationF',\n  // x001910c8: 'SATThicknessR-L',\n  // x001910c9: 'SATThicknessA-P',\n  // x001910ca: 'SATThicknessH-F',\n  // x001910cb: 'PrescribedFlowAxis',\n  // x001910cc: 'VelocityEncoding',\n  // x001910cd: 'ThicknessDisclaimer',\n  // x001910ce: 'PrescanType',\n  // x001910cf: 'PrescanStatus',\n  // x001910d0: 'RawDataType',\n  // x001910d2: 'ProjectionAlgorithm',\n  // x001910d3: 'ProjectionAlgorithm',\n  // x001910d5: 'FractionalEcho',\n  // x001910d6: 'PrepPulse',\n  // x001910d7: 'CardiacPhases',\n  // x001910d8: 'VariableEchoflag',\n  // x001910d9: 'ConcatenatedSAT',\n  // x001910da: 'ReferenceChannelUsed',\n  // x001910db: 'BackProjectorCoefficient',\n  // x001910dc: 'PrimarySpeedCorrectionUsed',\n  // x001910dd: 'OverrangeCorrectionUsed',\n  // x001910de: 'DynamicZAlphaValue',\n  // x001910df: 'UserData',\n  // x001910e0: 'UserData',\n  // x001910e2: 'VelocityEncodeScale',\n  // x001910f2: 'FastPhases',\n  // x001910f9: 'TransmissionGain',\n  x00200000: 'RelationshipGroupLength',\n  x0020000d: 'StudyInstanceUID',\n  x0020000e: 'SeriesInstanceUID',\n  x00200010: 'StudyID',\n  x00200011: 'SeriesNumber',\n  x00200012: 'AcquisitionNumber',\n  x00200013: 'InstanceNumber',\n  x00200014: 'IsotopeNumber',\n  x00200015: 'PhaseNumber',\n  x00200016: 'IntervalNumber',\n  x00200017: 'TimeSlotNumber',\n  x00200018: 'AngleNumber',\n  x00200019: 'ItemNumber',\n  x00200020: 'PatientOrientation',\n  x00200022: 'OverlayNumber',\n  x00200024: 'CurveNumber',\n  x00200026: 'LookupTableNumber',\n  x00200030: 'ImagePosition',\n  x00200032: 'ImagePositionPatient',\n  x00200035: 'ImageOrientation',\n  x00200037: 'ImageOrientationPatient',\n  x00200050: 'Location',\n  x00200052: 'FrameOfReferenceUID',\n  x00200060: 'Laterality',\n  x00200062: 'ImageLaterality',\n  x00200070: 'ImageGeometryType',\n  x00200080: 'MaskingImage',\n  x00200100: 'TemporalPositionIdentifier',\n  x00200105: 'NumberOfTemporalPositions',\n  x00200110: 'TemporalResolution',\n  x00200200: 'SynchronizationFrameOfReferenceUID',\n  x00201000: 'SeriesInStudy',\n  x00201001: 'AcquisitionsInSeries',\n  x00201002: 'ImagesInAcquisition',\n  x00201003: 'ImagesInSeries',\n  x00201004: 'AcquisitionsInStudy',\n  x00201005: 'ImagesInStudy',\n  x00201020: 'Reference',\n  x00201040: 'PositionReferenceIndicator',\n  x00201041: 'SliceLocation',\n  x00201070: 'OtherStudyNumbers',\n  x00201200: 'NumberOfPatientRelatedStudies',\n  x00201202: 'NumberOfPatientRelatedSeries',\n  x00201204: 'NumberOfPatientRelatedInstances',\n  x00201206: 'NumberOfStudyRelatedSeries',\n  x00201208: 'NumberOfStudyRelatedInstances',\n  x00201209: 'NumberOfSeriesRelatedInstances',\n  x002031xx: 'SourceImageIDs',\n  x00203401: 'ModifyingDeviceID',\n  x00203402: 'ModifiedImageID',\n  x00203403: 'ModifiedImageDate',\n  x00203404: 'ModifyingDeviceManufacturer',\n  x00203405: 'ModifiedImageTime',\n  x00203406: 'ModifiedImageDescription',\n  x00204000: 'ImageComments',\n  x00205000: 'OriginalImageIdentification',\n  x00205002: 'OriginalImageIdentNomenclature',\n  x00209056: 'StackID',\n  x00209057: 'InStackPositionNumber',\n  x00209071: 'FrameAnatomySequence',\n  x00209072: 'FrameLaterality',\n  x00209111: 'FrameContentSequence',\n  x00209113: 'PlanePositionSequence',\n  x00209116: 'PlaneOrientationSequence',\n  x00209128: 'TemporalPositionIndex',\n  x00209153: 'TriggerDelayTime',\n  x00209156: 'FrameAcquisitionNumber',\n  x00209157: 'DimensionIndexValues',\n  x00209158: 'FrameComments',\n  x00209161: 'ConcatenationUID',\n  x00209162: 'InConcatenationNumber',\n  x00209163: 'InConcatenationTotalNumber',\n  x00209164: 'DimensionOrganizationUID',\n  x00209165: 'DimensionIndexPointer',\n  x00209167: 'FunctionalGroupPointer',\n  x00209213: 'DimensionIndexPrivateCreator',\n  x00209221: 'DimensionOrganizationSequence',\n  x00209222: 'DimensionIndexSequence',\n  x00209228: 'ConcatenationFrameOffsetNumber',\n  x00209238: 'FunctionalGroupPrivateCreator',\n  x00209241: 'NominalPercentageOfCardiacPhase',\n  x00209245: 'NominalPercentOfRespiratoryPhase',\n  x00209246: 'StartingRespiratoryAmplitude',\n  x00209247: 'StartingRespiratoryPhase',\n  x00209248: 'EndingRespiratoryAmplitude',\n  x00209249: 'EndingRespiratoryPhase',\n  x00209250: 'RespiratoryTriggerType',\n  x00209251: 'RRIntervalTimeNominal',\n  x00209252: 'ActualCardiacTriggerDelayTime',\n  x00209253: 'RespiratorySynchronizationSequence',\n  x00209254: 'RespiratoryIntervalTime',\n  x00209255: 'NominalRespiratoryTriggerDelayTime',\n  x00209256: 'RespiratoryTriggerDelayThreshold',\n  x00209257: 'ActualRespiratoryTriggerDelayTime',\n  x00209301: 'ImagePositionVolume',\n  x00209302: 'ImageOrientationVolume',\n  x00209308: 'ApexPosition',\n  x00209421: 'DimensionDescriptionLabel',\n  x00209450: 'PatientOrientationInFrameSequence',\n  x00209453: 'FrameLabel',\n  x00209518: 'AcquisitionIndex',\n  x00209529: 'ContributingSOPInstancesRefSeq',\n  x00209536: 'ReconstructionIndex',\n  // x00211003: 'SeriesFromWhichPrescribed',\n  // x00211005: 'GenesisVersionNow',\n  // x00211007: 'SeriesRecordChecksum',\n  // x00211018: 'GenesisVersionNow',\n  // x00211019: 'AcqreconRecordChecksum',\n  // x00211020: 'TableStartLocation',\n  // x00211035: 'SeriesFromWhichPrescribed',\n  // x00211036: 'ImageFromWhichPrescribed',\n  // x00211037: 'ScreenFormat',\n  // x0021104a: 'AnatomicalReferenceForScout',\n  // x0021104f: 'LocationsInAcquisition',\n  // x00211050: 'GraphicallyPrescribed',\n  // x00211051: 'RotationFromSourceXRot',\n  // x00211052: 'RotationFromSourceYRot',\n  // x00211053: 'RotationFromSourceZRot',\n  // x00211054: 'ImagePosition',\n  // x00211055: 'ImageOrientation',\n  // x00211056: 'IntegerSlop',\n  // x00211057: 'IntegerSlop',\n  // x00211058: 'IntegerSlop',\n  // x00211059: 'IntegerSlop',\n  // x0021105a: 'IntegerSlop',\n  // x0021105b: 'FloatSlop',\n  // x0021105c: 'FloatSlop',\n  // x0021105d: 'FloatSlop',\n  // x0021105e: 'FloatSlop',\n  // x0021105f: 'FloatSlop',\n  // x00211081: 'AutoWindowLevelAlpha',\n  // x00211082: 'AutoWindowLevelBeta',\n  // x00211083: 'AutoWindowLevelWindow',\n  // x00211084: 'ToWindowLevelLevel',\n  // x00211090: 'TubeFocalSpotPosition',\n  // x00211091: 'BiopsyPosition',\n  // x00211092: 'BiopsyTLocation',\n  // x00211093: 'BiopsyRefLocation',\n  x00220001: 'LightPathFilterPassThroughWavelen',\n  x00220002: 'LightPathFilterPassBand',\n  x00220003: 'ImagePathFilterPassThroughWavelen',\n  x00220004: 'ImagePathFilterPassBand',\n  x00220005: 'PatientEyeMovementCommanded',\n  x00220006: 'PatientEyeMovementCommandCodeSeq',\n  x00220007: 'SphericalLensPower',\n  x00220008: 'CylinderLensPower',\n  x00220009: 'CylinderAxis',\n  x0022000a: 'EmmetropicMagnification',\n  x0022000b: 'IntraOcularPressure',\n  x0022000c: 'HorizontalFieldOfView',\n  x0022000d: 'PupilDilated',\n  x0022000e: 'DegreeOfDilation',\n  x00220010: 'StereoBaselineAngle',\n  x00220011: 'StereoBaselineDisplacement',\n  x00220012: 'StereoHorizontalPixelOffset',\n  x00220013: 'StereoVerticalPixelOffset',\n  x00220014: 'StereoRotation',\n  x00220015: 'AcquisitionDeviceTypeCodeSequence',\n  x00220016: 'IlluminationTypeCodeSequence',\n  x00220017: 'LightPathFilterTypeStackCodeSeq',\n  x00220018: 'ImagePathFilterTypeStackCodeSeq',\n  x00220019: 'LensesCodeSequence',\n  x0022001a: 'ChannelDescriptionCodeSequence',\n  x0022001b: 'RefractiveStateSequence',\n  x0022001c: 'MydriaticAgentCodeSequence',\n  x0022001d: 'RelativeImagePositionCodeSequence',\n  x00220020: 'StereoPairsSequence',\n  x00220021: 'LeftImageSequence',\n  x00220022: 'RightImageSequence',\n  x00220030: 'AxialLengthOfTheEye',\n  x00220031: 'OphthalmicFrameLocationSequence',\n  x00220032: 'ReferenceCoordinates',\n  x00220035: 'DepthSpatialResolution',\n  x00220036: 'MaximumDepthDistortion',\n  x00220037: 'AlongScanSpatialResolution',\n  x00220038: 'MaximumAlongScanDistortion',\n  x00220039: 'OphthalmicImageOrientation',\n  x00220041: 'DepthOfTransverseImage',\n  x00220042: 'MydriaticAgentConcUnitsSeq',\n  x00220048: 'AcrossScanSpatialResolution',\n  x00220049: 'MaximumAcrossScanDistortion',\n  x0022004e: 'MydriaticAgentConcentration',\n  x00220055: 'IlluminationWaveLength',\n  x00220056: 'IlluminationPower',\n  x00220057: 'IlluminationBandwidth',\n  x00220058: 'MydriaticAgentSequence',\n  // x00231001: 'NumberOfSeriesInStudy',\n  // x00231002: 'NumberOfUnarchivedSeries',\n  // x00231010: 'ReferenceImageField',\n  // x00231050: 'SummaryImage',\n  // x00231070: 'StartTimeSecsInFirstAxial',\n  // x00231074: 'NoofUpdatesToHeader',\n  // x0023107d: 'IndicatesIfTheStudyHasCompleteInfo',\n  // x00251006: 'LastPulseSequenceUsed',\n  // x00251007: 'ImagesInSeries',\n  // x00251010: 'LandmarkCounter',\n  // x00251011: 'NumberOfAcquisitions',\n  // x00251014: 'IndicatesNoofUpdatesToHeader',\n  // x00251017: 'SeriesCompleteFlag',\n  // x00251018: 'NumberOfImagesArchived',\n  // x00251019: 'LastImageNumberUsed',\n  // x0025101a: 'PrimaryReceiverSuiteAndHost',\n  // x00271006: 'ImageArchiveFlag',\n  // x00271010: 'ScoutType',\n  // x0027101c: 'VmaMamp',\n  // x0027101d: 'VmaPhase',\n  // x0027101e: 'VmaMod',\n  // x0027101f: 'VmaClip',\n  // x00271020: 'SmartScanOnOffFlag',\n  // x00271030: 'ForeignImageRevision',\n  // x00271031: 'ImagingMode',\n  // x00271032: 'PulseSequence',\n  // x00271033: 'ImagingOptions',\n  // x00271035: 'PlaneType',\n  // x00271036: 'ObliquePlane',\n  // x00271040: 'RASLetterOfImageLocation',\n  // x00271041: 'ImageLocation',\n  // x00271042: 'CenterRCoordOfPlaneImage',\n  // x00271043: 'CenterACoordOfPlaneImage',\n  // x00271044: 'CenterSCoordOfPlaneImage',\n  // x00271045: 'NormalRCoord',\n  // x00271046: 'NormalACoord',\n  // x00271047: 'NormalSCoord',\n  // x00271048: 'RCoordOfTopRightCorner',\n  // x00271049: 'ACoordOfTopRightCorner',\n  // x0027104a: 'SCoordOfTopRightCorner',\n  // x0027104b: 'RCoordOfBottomRightCorner',\n  // x0027104c: 'ACoordOfBottomRightCorner',\n  // x0027104d: 'SCoordOfBottomRightCorner',\n  // x00271050: 'TableStartLocation',\n  // x00271051: 'TableEndLocation',\n  // x00271052: 'RASLetterForSideOfImage',\n  // x00271053: 'RASLetterForAnteriorPosterior',\n  // x00271054: 'RASLetterForScoutStartLoc',\n  // x00271055: 'RASLetterForScoutEndLoc',\n  // x00271060: 'ImageDimensionX',\n  // x00271061: 'ImageDimensionY',\n  // x00271062: 'NumberOfExcitations',\n  x00280000: 'ImagePresentationGroupLength',\n  x00280002: 'SamplesPerPixel',\n  x00280003: 'SamplesPerPixelUsed',\n  x00280004: 'PhotometricInterpretation',\n  x00280005: 'ImageDimensions',\n  x00280006: 'PlanarConfiguration',\n  x00280008: 'NumberOfFrames',\n  x00280009: 'FrameIncrementPointer',\n  x0028000a: 'FrameDimensionPointer',\n  x00280010: 'Rows',\n  x00280011: 'Columns',\n  x00280012: 'Planes',\n  x00280014: 'UltrasoundColorDataPresent',\n  x00280030: 'PixelSpacing',\n  x00280031: 'ZoomFactor',\n  x00280032: 'ZoomCenter',\n  x00280034: 'PixelAspectRatio',\n  x00280040: 'ImageFormat',\n  x00280050: 'ManipulatedImage',\n  x00280051: 'CorrectedImage',\n  x0028005f: 'CompressionRecognitionCode',\n  x00280060: 'CompressionCode',\n  x00280061: 'CompressionOriginator',\n  x00280062: 'CompressionLabel',\n  x00280063: 'CompressionDescription',\n  x00280065: 'CompressionSequence',\n  x00280066: 'CompressionStepPointers',\n  x00280068: 'RepeatInterval',\n  x00280069: 'BitsGrouped',\n  x00280070: 'PerimeterTable',\n  x00280071: 'PerimeterValue',\n  x00280080: 'PredictorRows',\n  x00280081: 'PredictorColumns',\n  x00280082: 'PredictorConstants',\n  x00280090: 'BlockedPixels',\n  x00280091: 'BlockRows',\n  x00280092: 'BlockColumns',\n  x00280093: 'RowOverlap',\n  x00280094: 'ColumnOverlap',\n  x00280100: 'BitsAllocated',\n  x00280101: 'BitsStored',\n  x00280102: 'HighBit',\n  x00280103: 'PixelRepresentation',\n  x00280104: 'SmallestValidPixelValue',\n  x00280105: 'LargestValidPixelValue',\n  x00280106: 'SmallestImagePixelValue',\n  x00280107: 'LargestImagePixelValue',\n  x00280108: 'SmallestPixelValueInSeries',\n  x00280109: 'LargestPixelValueInSeries',\n  x00280110: 'SmallestImagePixelValueInPlane',\n  x00280111: 'LargestImagePixelValueInPlane',\n  x00280120: 'PixelPaddingValue',\n  x00280121: 'PixelPaddingRangeLimit',\n  x00280200: 'ImageLocation',\n  x00280300: 'QualityControlImage',\n  x00280301: 'BurnedInAnnotation',\n  x00280400: 'TransformLabel',\n  x00280401: 'TransformVersionNumber',\n  x00280402: 'NumberOfTransformSteps',\n  x00280403: 'SequenceOfCompressedData',\n  x00280404: 'DetailsOfCoefficients',\n  x002804x2: 'CoefficientCoding',\n  x002804x3: 'CoefficientCodingPointers',\n  x00280700: 'DCTLabel',\n  x00280701: 'DataBlockDescription',\n  x00280702: 'DataBlock',\n  x00280710: 'NormalizationFactorFormat',\n  x00280720: 'ZonalMapNumberFormat',\n  x00280721: 'ZonalMapLocation',\n  x00280722: 'ZonalMapFormat',\n  x00280730: 'AdaptiveMapFormat',\n  x00280740: 'CodeNumberFormat',\n  x002808x0: 'CodeLabel',\n  x002808x2: 'NumberOfTables',\n  x002808x3: 'CodeTableLocation',\n  x002808x4: 'BitsForCodeWord',\n  x002808x8: 'ImageDataLocation',\n  x00280a02: 'PixelSpacingCalibrationType',\n  x00280a04: 'PixelSpacingCalibrationDescription',\n  x00281040: 'PixelIntensityRelationship',\n  x00281041: 'PixelIntensityRelationshipSign',\n  x00281050: 'WindowCenter',\n  x00281051: 'WindowWidth',\n  x00281052: 'RescaleIntercept',\n  x00281053: 'RescaleSlope',\n  x00281054: 'RescaleType',\n  x00281055: 'WindowCenterAndWidthExplanation',\n  x00281056: 'VOI_LUTFunction',\n  x00281080: 'GrayScale',\n  x00281090: 'RecommendedViewingMode',\n  x00281100: 'GrayLookupTableDescriptor',\n  x00281101: 'RedPaletteColorTableDescriptor',\n  x00281102: 'GreenPaletteColorTableDescriptor',\n  x00281103: 'BluePaletteColorTableDescriptor',\n  x00281111: 'LargeRedPaletteColorTableDescr',\n  x00281112: 'LargeGreenPaletteColorTableDescr',\n  x00281113: 'LargeBluePaletteColorTableDescr',\n  x00281199: 'PaletteColorTableUID',\n  x00281200: 'GrayLookupTableData',\n  x00281201: 'RedPaletteColorTableData',\n  x00281202: 'GreenPaletteColorTableData',\n  x00281203: 'BluePaletteColorTableData',\n  x00281211: 'LargeRedPaletteColorTableData',\n  x00281212: 'LargeGreenPaletteColorTableData',\n  x00281213: 'LargeBluePaletteColorTableData',\n  x00281214: 'LargePaletteColorLookupTableUID',\n  x00281221: 'SegmentedRedColorTableData',\n  x00281222: 'SegmentedGreenColorTableData',\n  x00281223: 'SegmentedBlueColorTableData',\n  x00281300: 'BreastImplantPresent',\n  x00281350: 'PartialView',\n  x00281351: 'PartialViewDescription',\n  x00281352: 'PartialViewCodeSequence',\n  x0028135a: 'SpatialLocationsPreserved',\n  x00281402: 'DataPathAssignment',\n  x00281404: 'BlendingLUT1Sequence',\n  x00281406: 'BlendingWeightConstant',\n  x00281408: 'BlendingLookupTableData',\n  x0028140c: 'BlendingLUT2Sequence',\n  x0028140e: 'DataPathID',\n  x0028140f: 'RGBLUTTransferFunction',\n  x00281410: 'AlphaLUTTransferFunction',\n  x00282000: 'ICCProfile',\n  x00282110: 'LossyImageCompression',\n  x00282112: 'LossyImageCompressionRatio',\n  x00282114: 'LossyImageCompressionMethod',\n  x00283000: 'ModalityLUTSequence',\n  x00283002: 'LUTDescriptor',\n  x00283003: 'LUTExplanation',\n  x00283004: 'ModalityLUTType',\n  x00283006: 'LUTData',\n  x00283010: 'VOILUTSequence',\n  x00283110: 'SoftcopyVOILUTSequence',\n  x00284000: 'ImagePresentationComments',\n  x00285000: 'BiPlaneAcquisitionSequence',\n  x00286010: 'RepresentativeFrameNumber',\n  x00286020: 'FrameNumbersOfInterest',\n  x00286022: 'FrameOfInterestDescription',\n  x00286023: 'FrameOfInterestType',\n  x00286030: 'MaskPointers',\n  x00286040: 'RWavePointer',\n  x00286100: 'MaskSubtractionSequence',\n  x00286101: 'MaskOperation',\n  x00286102: 'ApplicableFrameRange',\n  x00286110: 'MaskFrameNumbers',\n  x00286112: 'ContrastFrameAveraging',\n  x00286114: 'MaskSubPixelShift',\n  x00286120: 'TIDOffset',\n  x00286190: 'MaskOperationExplanation',\n  x00287fe0: 'PixelDataProviderURL',\n  x00289001: 'DataPointRows',\n  x00289002: 'DataPointColumns',\n  x00289003: 'SignalDomainColumns',\n  x00289099: 'LargestMonochromePixelValue',\n  x00289108: 'DataRepresentation',\n  x00289110: 'PixelMeasuresSequence',\n  x00289132: 'FrameVOILUTSequence',\n  x00289145: 'PixelValueTransformationSequence',\n  x00289235: 'SignalDomainRows',\n  x00289411: 'DisplayFilterPercentage',\n  x00289415: 'FramePixelShiftSequence',\n  x00289416: 'SubtractionItemID',\n  x00289422: 'PixelIntensityRelationshipLUTSeq',\n  x00289443: 'FramePixelDataPropertiesSequence',\n  x00289444: 'GeometricalProperties',\n  x00289445: 'GeometricMaximumDistortion',\n  x00289446: 'ImageProcessingApplied',\n  x00289454: 'MaskSelectionMode',\n  x00289474: 'LUTFunction',\n  x00289478: 'MaskVisibilityPercentage',\n  x00289501: 'PixelShiftSequence',\n  x00289502: 'RegionPixelShiftSequence',\n  x00289503: 'VerticesOfTheRegion',\n  x00289506: 'PixelShiftFrameRange',\n  x00289507: 'LUTFrameRange',\n  x00289520: 'ImageToEquipmentMappingMatrix',\n  x00289537: 'EquipmentCoordinateSystemID',\n  // x00291004: 'LowerRangeOfPixels1a',\n  // x00291005: 'LowerRangeOfPixels1b',\n  // x00291006: 'LowerRangeOfPixels1c',\n  // x00291007: 'LowerRangeOfPixels1d',\n  // x00291008: 'LowerRangeOfPixels1e',\n  // x00291009: 'LowerRangeOfPixels1f',\n  // x0029100a: 'LowerRangeOfPixels1g',\n  // x00291015: 'LowerRangeOfPixels1h',\n  // x00291016: 'LowerRangeOfPixels1i',\n  // x00291017: 'LowerRangeOfPixels2',\n  // x00291018: 'UpperRangeOfPixels2',\n  // x0029101a: 'LenOfTotHdrInBytes',\n  // x00291026: 'VersionOfTheHdrStruct',\n  // x00291034: 'AdvantageCompOverflow',\n  // x00291035: 'AdvantageCompUnderflow',\n  x00320000: 'StudyGroupLength',\n  x0032000a: 'StudyStatusID',\n  x0032000c: 'StudyPriorityID',\n  x00320012: 'StudyIDIssuer',\n  x00320032: 'StudyVerifiedDate',\n  x00320033: 'StudyVerifiedTime',\n  x00320034: 'StudyReadDate',\n  x00320035: 'StudyReadTime',\n  x00321000: 'ScheduledStudyStartDate',\n  x00321001: 'ScheduledStudyStartTime',\n  x00321010: 'ScheduledStudyStopDate',\n  x00321011: 'ScheduledStudyStopTime',\n  x00321020: 'ScheduledStudyLocation',\n  x00321021: 'ScheduledStudyLocationAETitle',\n  x00321030: 'ReasonForStudy',\n  x00321031: 'RequestingPhysicianIDSequence',\n  x00321032: 'RequestingPhysician',\n  x00321033: 'RequestingService',\n  x00321040: 'StudyArrivalDate',\n  x00321041: 'StudyArrivalTime',\n  x00321050: 'StudyCompletionDate',\n  x00321051: 'StudyCompletionTime',\n  x00321055: 'StudyComponentStatusID',\n  x00321060: 'RequestedProcedureDescription',\n  x00321064: 'RequestedProcedureCodeSequence',\n  x00321070: 'RequestedContrastAgent',\n  x00324000: 'StudyComments',\n  x00380004: 'ReferencedPatientAliasSequence',\n  x00380008: 'VisitStatusID',\n  x00380010: 'AdmissionID',\n  x00380011: 'IssuerOfAdmissionID',\n  x00380016: 'RouteOfAdmissions',\n  x0038001a: 'ScheduledAdmissionDate',\n  x0038001b: 'ScheduledAdmissionTime',\n  x0038001c: 'ScheduledDischargeDate',\n  x0038001d: 'ScheduledDischargeTime',\n  x0038001e: 'ScheduledPatientInstitResidence',\n  x00380020: 'AdmittingDate',\n  x00380021: 'AdmittingTime',\n  x00380030: 'DischargeDate',\n  x00380032: 'DischargeTime',\n  x00380040: 'DischargeDiagnosisDescription',\n  x00380044: 'DischargeDiagnosisCodeSequence',\n  x00380050: 'SpecialNeeds',\n  x00380060: 'ServiceEpisodeID',\n  x00380061: 'IssuerOfServiceEpisodeID',\n  x00380062: 'ServiceEpisodeDescription',\n  x00380100: 'PertinentDocumentsSequence',\n  x00380300: 'CurrentPatientLocation',\n  x00380400: 'PatientInstitutionResidence',\n  x00380500: 'PatientState',\n  x00380502: 'PatientClinicalTrialParticipSeq',\n  x00384000: 'VisitComments',\n  x003a0004: 'WaveformOriginality',\n  x003a0005: 'NumberOfWaveformChannels',\n  x003a0010: 'NumberOfWaveformSamples',\n  x003a001a: 'SamplingFrequency',\n  x003a0020: 'MultiplexGroupLabel',\n  x003a0200: 'ChannelDefinitionSequence',\n  x003a0202: 'WaveformChannelNumber',\n  x003a0203: 'ChannelLabel',\n  x003a0205: 'ChannelStatus',\n  x003a0208: 'ChannelSourceSequence',\n  x003a0209: 'ChannelSourceModifiersSequence',\n  x003a020a: 'SourceWaveformSequence',\n  x003a020c: 'ChannelDerivationDescription',\n  x003a0210: 'ChannelSensitivity',\n  x003a0211: 'ChannelSensitivityUnitsSequence',\n  x003a0212: 'ChannelSensitivityCorrectionFactor',\n  x003a0213: 'ChannelBaseline',\n  x003a0214: 'ChannelTimeSkew',\n  x003a0215: 'ChannelSampleSkew',\n  x003a0218: 'ChannelOffset',\n  x003a021a: 'WaveformBitsStored',\n  x003a0220: 'FilterLowFrequency',\n  x003a0221: 'FilterHighFrequency',\n  x003a0222: 'NotchFilterFrequency',\n  x003a0223: 'NotchFilterBandwidth',\n  x003a0230: 'WaveformDataDisplayScale',\n  x003a0231: 'WaveformDisplayBkgCIELabValue',\n  x003a0240: 'WaveformPresentationGroupSequence',\n  x003a0241: 'PresentationGroupNumber',\n  x003a0242: 'ChannelDisplaySequence',\n  x003a0244: 'ChannelRecommendDisplayCIELabValue',\n  x003a0245: 'ChannelPosition',\n  x003a0246: 'DisplayShadingFlag',\n  x003a0247: 'FractionalChannelDisplayScale',\n  x003a0248: 'AbsoluteChannelDisplayScale',\n  x003a0300: 'MultiplexAudioChannelsDescrCodeSeq',\n  x003a0301: 'ChannelIdentificationCode',\n  x003a0302: 'ChannelMode',\n  x00400001: 'ScheduledStationAETitle',\n  x00400002: 'ScheduledProcedureStepStartDate',\n  x00400003: 'ScheduledProcedureStepStartTime',\n  x00400004: 'ScheduledProcedureStepEndDate',\n  x00400005: 'ScheduledProcedureStepEndTime',\n  x00400006: 'ScheduledPerformingPhysiciansName',\n  x00400007: 'ScheduledProcedureStepDescription',\n  x00400008: 'ScheduledProtocolCodeSequence',\n  x00400009: 'ScheduledProcedureStepID',\n  x0040000a: 'StageCodeSequence',\n  x0040000b: 'ScheduledPerformingPhysicianIDSeq',\n  x00400010: 'ScheduledStationName',\n  x00400011: 'ScheduledProcedureStepLocation',\n  x00400012: 'PreMedication',\n  x00400020: 'ScheduledProcedureStepStatus',\n  x00400031: 'LocalNamespaceEntityID',\n  x00400032: 'UniversalEntityID',\n  x00400033: 'UniversalEntityIDType',\n  x00400035: 'IdentifierTypeCode',\n  x00400036: 'AssigningFacilitySequence',\n  x00400100: 'ScheduledProcedureStepSequence',\n  x00400220: 'ReferencedNonImageCompositeSOPSeq',\n  x00400241: 'PerformedStationAETitle',\n  x00400242: 'PerformedStationName',\n  x00400243: 'PerformedLocation',\n  x00400244: 'PerformedProcedureStepStartDate',\n  x00400245: 'PerformedProcedureStepStartTime',\n  x00400250: 'PerformedProcedureStepEndDate',\n  x00400251: 'PerformedProcedureStepEndTime',\n  x00400252: 'PerformedProcedureStepStatus',\n  x00400253: 'PerformedProcedureStepID',\n  x00400254: 'PerformedProcedureStepDescription',\n  x00400255: 'PerformedProcedureTypeDescription',\n  x00400260: 'PerformedProtocolCodeSequence',\n  x00400261: 'PerformedProtocolType',\n  x00400270: 'ScheduledStepAttributesSequence',\n  x00400275: 'RequestAttributesSequence',\n  x00400280: 'CommentsOnPerformedProcedureStep',\n  x00400281: 'ProcStepDiscontinueReasonCodeSeq',\n  x00400293: 'QuantitySequence',\n  x00400294: 'Quantity',\n  x00400295: 'MeasuringUnitsSequence',\n  x00400296: 'BillingItemSequence',\n  x00400300: 'TotalTimeOfFluoroscopy',\n  x00400301: 'TotalNumberOfExposures',\n  x00400302: 'EntranceDose',\n  x00400303: 'ExposedArea',\n  x00400306: 'DistanceSourceToEntrance',\n  x00400307: 'DistanceSourceToSupport',\n  x0040030e: 'ExposureDoseSequence',\n  x00400310: 'CommentsOnRadiationDose',\n  x00400312: 'XRayOutput',\n  x00400314: 'HalfValueLayer',\n  x00400316: 'OrganDose',\n  x00400318: 'OrganExposed',\n  x00400320: 'BillingProcedureStepSequence',\n  x00400321: 'FilmConsumptionSequence',\n  x00400324: 'BillingSuppliesAndDevicesSequence',\n  x00400330: 'ReferencedProcedureStepSequence',\n  x00400340: 'PerformedSeriesSequence',\n  x00400400: 'CommentsOnScheduledProcedureStep',\n  x00400440: 'ProtocolContextSequence',\n  x00400441: 'ContentItemModifierSequence',\n  x0040050a: 'SpecimenAccessionNumber',\n  x00400512: 'ContainerIdentifier',\n  x0040051a: 'ContainerDescription',\n  x00400550: 'SpecimenSequence',\n  x00400551: 'SpecimenIdentifier',\n  x00400552: 'SpecimenDescriptionSequenceTrial',\n  x00400553: 'SpecimenDescriptionTrial',\n  x00400554: 'SpecimenUID',\n  x00400555: 'AcquisitionContextSequence',\n  x00400556: 'AcquisitionContextDescription',\n  x0040059a: 'SpecimenTypeCodeSequence',\n  x00400600: 'SpecimenShortDescription',\n  x004006fa: 'SlideIdentifier',\n  x0040071a: 'ImageCenterPointCoordinatesSeq',\n  x0040072a: 'XOffsetInSlideCoordinateSystem',\n  x0040073a: 'YOffsetInSlideCoordinateSystem',\n  x0040074a: 'ZOffsetInSlideCoordinateSystem',\n  x004008d8: 'PixelSpacingSequence',\n  x004008da: 'CoordinateSystemAxisCodeSequence',\n  x004008ea: 'MeasurementUnitsCodeSequence',\n  x004009f8: 'VitalStainCodeSequenceTrial',\n  x00401001: 'RequestedProcedureID',\n  x00401002: 'ReasonForRequestedProcedure',\n  x00401003: 'RequestedProcedurePriority',\n  x00401004: 'PatientTransportArrangements',\n  x00401005: 'RequestedProcedureLocation',\n  x00401006: 'PlacerOrderNumber-Procedure',\n  x00401007: 'FillerOrderNumber-Procedure',\n  x00401008: 'ConfidentialityCode',\n  x00401009: 'ReportingPriority',\n  x0040100a: 'ReasonForRequestedProcedureCodeSeq',\n  x00401010: 'NamesOfIntendedRecipientsOfResults',\n  x00401011: 'IntendedRecipientsOfResultsIDSeq',\n  x00401101: 'PersonIdentificationCodeSequence',\n  x00401102: 'PersonAddress',\n  x00401103: 'PersonTelephoneNumbers',\n  x00401400: 'RequestedProcedureComments',\n  x00402001: 'ReasonForImagingServiceRequest',\n  x00402004: 'IssueDateOfImagingServiceRequest',\n  x00402005: 'IssueTimeOfImagingServiceRequest',\n  x00402006: 'PlacerOrderNumberImagingServiceRequestRetired',\n  x00402007: 'FillerOrderNumberImagingServiceRequestRetired',\n  x00402008: 'OrderEnteredBy',\n  x00402009: 'OrderEntererLocation',\n  x00402010: 'OrderCallbackPhoneNumber',\n  x00402016: 'PlacerOrderNum-ImagingServiceReq',\n  x00402017: 'FillerOrderNum-ImagingServiceReq',\n  x00402400: 'ImagingServiceRequestComments',\n  x00403001: 'ConfidentialityOnPatientDataDescr',\n  x00404001: 'GenPurposeScheduledProcStepStatus',\n  x00404002: 'GenPurposePerformedProcStepStatus',\n  x00404003: 'GenPurposeSchedProcStepPriority',\n  x00404004: 'SchedProcessingApplicationsCodeSeq',\n  x00404005: 'SchedProcedureStepStartDateAndTime',\n  x00404006: 'MultipleCopiesFlag',\n  x00404007: 'PerformedProcessingAppsCodeSeq',\n  x00404009: 'HumanPerformerCodeSequence',\n  x00404010: 'SchedProcStepModificationDateTime',\n  x00404011: 'ExpectedCompletionDateAndTime',\n  x00404015: 'ResultingGenPurposePerfProcStepSeq',\n  x00404016: 'RefGenPurposeSchedProcStepSeq',\n  x00404018: 'ScheduledWorkitemCodeSequence',\n  x00404019: 'PerformedWorkitemCodeSequence',\n  x00404020: 'InputAvailabilityFlag',\n  x00404021: 'InputInformationSequence',\n  x00404022: 'RelevantInformationSequence',\n  x00404023: 'RefGenPurSchedProcStepTransUID',\n  x00404025: 'ScheduledStationNameCodeSequence',\n  x00404026: 'ScheduledStationClassCodeSequence',\n  x00404027: 'SchedStationGeographicLocCodeSeq',\n  x00404028: 'PerformedStationNameCodeSequence',\n  x00404029: 'PerformedStationClassCodeSequence',\n  x00404030: 'PerformedStationGeogLocCodeSeq',\n  x00404031: 'RequestedSubsequentWorkItemCodeSeq',\n  x00404032: 'NonDICOMOutputCodeSequence',\n  x00404033: 'OutputInformationSequence',\n  x00404034: 'ScheduledHumanPerformersSequence',\n  x00404035: 'ActualHumanPerformersSequence',\n  x00404036: 'HumanPerformersOrganization',\n  x00404037: 'HumanPerformerName',\n  x00404040: 'RawDataHandling',\n  x00408302: 'EntranceDoseInMilliGy',\n  x00409094: 'RefImageRealWorldValueMappingSeq',\n  x00409096: 'RealWorldValueMappingSequence',\n  x00409098: 'PixelValueMappingCodeSequence',\n  x00409210: 'LUTLabel',\n  x00409211: 'RealWorldValueLastValueMapped',\n  x00409212: 'RealWorldValueLUTData',\n  x00409216: 'RealWorldValueFirstValueMapped',\n  x00409224: 'RealWorldValueIntercept',\n  x00409225: 'RealWorldValueSlope',\n  x0040a010: 'RelationshipType',\n  x0040a027: 'VerifyingOrganization',\n  x0040a030: 'VerificationDateTime',\n  x0040a032: 'ObservationDateTime',\n  x0040a040: 'ValueType',\n  x0040a043: 'ConceptNameCodeSequence',\n  x0040a050: 'ContinuityOfContent',\n  x0040a073: 'VerifyingObserverSequence',\n  x0040a075: 'VerifyingObserverName',\n  x0040a078: 'AuthorObserverSequence',\n  x0040a07a: 'ParticipantSequence',\n  x0040a07c: 'CustodialOrganizationSequence',\n  x0040a080: 'ParticipationType',\n  x0040a082: 'ParticipationDateTime',\n  x0040a084: 'ObserverType',\n  x0040a088: 'VerifyingObserverIdentCodeSequence',\n  x0040a090: 'EquivalentCDADocumentSequence',\n  x0040a0b0: 'ReferencedWaveformChannels',\n  x0040a120: 'DateTime',\n  x0040a121: 'Date',\n  x0040a122: 'Time',\n  x0040a123: 'PersonName',\n  x0040a124: 'UID',\n  x0040a130: 'TemporalRangeType',\n  x0040a132: 'ReferencedSamplePositions',\n  x0040a136: 'ReferencedFrameNumbers',\n  x0040a138: 'ReferencedTimeOffsets',\n  x0040a13a: 'ReferencedDateTime',\n  x0040a160: 'TextValue',\n  x0040a168: 'ConceptCodeSequence',\n  x0040a170: 'PurposeOfReferenceCodeSequence',\n  x0040a180: 'AnnotationGroupNumber',\n  x0040a195: 'ModifierCodeSequence',\n  x0040a300: 'MeasuredValueSequence',\n  x0040a301: 'NumericValueQualifierCodeSequence',\n  x0040a30a: 'NumericValue',\n  x0040a353: 'AddressTrial',\n  x0040a354: 'TelephoneNumberTrial',\n  x0040a360: 'PredecessorDocumentsSequence',\n  x0040a370: 'ReferencedRequestSequence',\n  x0040a372: 'PerformedProcedureCodeSequence',\n  x0040a375: 'CurrentRequestedProcEvidenceSeq',\n  x0040a385: 'PertinentOtherEvidenceSequence',\n  x0040a390: 'HL7StructuredDocumentRefSeq',\n  x0040a491: 'CompletionFlag',\n  x0040a492: 'CompletionFlagDescription',\n  x0040a493: 'VerificationFlag',\n  x0040a494: 'ArchiveRequested',\n  x0040a496: 'PreliminaryFlag',\n  x0040a504: 'ContentTemplateSequence',\n  x0040a525: 'IdenticalDocumentsSequence',\n  x0040a730: 'ContentSequence',\n  x0040b020: 'AnnotationSequence',\n  x0040db00: 'TemplateIdentifier',\n  x0040db06: 'TemplateVersion',\n  x0040db07: 'TemplateLocalVersion',\n  x0040db0b: 'TemplateExtensionFlag',\n  x0040db0c: 'TemplateExtensionOrganizationUID',\n  x0040db0d: 'TemplateExtensionCreatorUID',\n  x0040db73: 'ReferencedContentItemIdentifier',\n  x0040e001: 'HL7InstanceIdentifier',\n  x0040e004: 'HL7DocumentEffectiveTime',\n  x0040e006: 'HL7DocumentTypeCodeSequence',\n  x0040e010: 'RetrieveURI',\n  x0040e011: 'RetrieveLocationUID',\n  x00420010: 'DocumentTitle',\n  x00420011: 'EncapsulatedDocument',\n  x00420012: 'MIMETypeOfEncapsulatedDocument',\n  x00420013: 'SourceInstanceSequence',\n  x00420014: 'ListOfMIMETypes',\n  // x00431001: 'BitmapOfPrescanOptions',\n  // x00431002: 'GradientOffsetInX',\n  // x00431003: 'GradientOffsetInY',\n  // x00431004: 'GradientOffsetInZ',\n  // x00431005: 'ImgIsOriginalOrUnoriginal',\n  // x00431006: 'NumberOfEPIShots',\n  // x00431007: 'ViewsPerSegment',\n  // x00431008: 'RespiratoryRateBpm',\n  // x00431009: 'RespiratoryTriggerPoint',\n  // x0043100a: 'TypeOfReceiverUsed',\n  // x0043100b: 'PeakRateOfChangeOfGradientField',\n  // x0043100c: 'LimitsInUnitsOfPercent',\n  // x0043100d: 'PSDEstimatedLimit',\n  // x0043100e: 'PSDEstimatedLimitInTeslaPerSecond',\n  // x0043100f: 'Saravghead',\n  // x00431010: 'WindowValue',\n  // x00431011: 'TotalInputViews',\n  // x00431012: 'X-RayChain',\n  // x00431013: 'DeconKernelParameters',\n  // x00431014: 'CalibrationParameters',\n  // x00431015: 'TotalOutputViews',\n  // x00431016: 'NumberOfOverranges',\n  // x00431017: 'IBHImageScaleFactors',\n  // x00431018: 'BBHCoefficients',\n  // x00431019: 'NumberOfBBHChainsToBlend',\n  // x0043101a: 'StartingChannelNumber',\n  // x0043101b: 'PpscanParameters',\n  // x0043101c: 'GEImageIntegrity',\n  // x0043101d: 'LevelValue',\n  // x0043101e: 'DeltaStartTime',\n  // x0043101f: 'MaxOverrangesInAView',\n  // x00431020: 'AvgOverrangesAllViews',\n  // x00431021: 'CorrectedAfterGlowTerms',\n  // x00431025: 'ReferenceChannels',\n  // x00431026: 'NoViewsRefChansBlocked',\n  // x00431027: 'ScanPitchRatio',\n  // x00431028: 'UniqueImageIden',\n  // x00431029: 'HistogramTables',\n  // x0043102a: 'UserDefinedData',\n  // x0043102b: 'PrivateScanOptions',\n  // x0043102c: 'EffectiveEchoSpacing',\n  // x0043102d: 'StringSlopField1',\n  // x0043102e: 'StringSlopField2',\n  // x0043102f: 'RawDataType',\n  // x00431030: 'RawDataType',\n  // x00431031: 'RACordOfTargetReconCenter',\n  // x00431032: 'RawDataType',\n  // x00431033: 'NegScanspacing',\n  // x00431034: 'OffsetFrequency',\n  // x00431035: 'UserUsageTag',\n  // x00431036: 'UserFillMapMSW',\n  // x00431037: 'UserFillMapLSW',\n  // x00431038: 'User25-48',\n  // x00431039: 'SlopInt6-9',\n  // x00431040: 'TriggerOnPosition',\n  // x00431041: 'DegreeOfRotation',\n  // x00431042: 'DASTriggerSource',\n  // x00431043: 'DASFpaGain',\n  // x00431044: 'DASOutputSource',\n  // x00431045: 'DASAdInput',\n  // x00431046: 'DASCalMode',\n  // x00431047: 'DASCalFrequency',\n  // x00431048: 'DASRegXm',\n  // x00431049: 'DASAutoZero',\n  // x0043104a: 'StartingChannelOfView',\n  // x0043104b: 'DASXmPattern',\n  // x0043104c: 'TGGCTriggerMode',\n  // x0043104d: 'StartScanToXrayOnDelay',\n  // x0043104e: 'DurationOfXrayOn',\n  // x00431060: 'SlopInt10-17',\n  // x00431061: 'ScannerStudyEntityUID',\n  // x00431062: 'ScannerStudyID',\n  // x0043106f: 'ScannerTableEntry',\n  x00440001: 'ProductPackageIdentifier',\n  x00440002: 'SubstanceAdministrationApproval',\n  x00440003: 'ApprovalStatusFurtherDescription',\n  x00440004: 'ApprovalStatusDateTime',\n  x00440007: 'ProductTypeCodeSequence',\n  x00440008: 'ProductName',\n  x00440009: 'ProductDescription',\n  x0044000a: 'ProductLotIdentifier',\n  x0044000b: 'ProductExpirationDateTime',\n  x00440010: 'SubstanceAdministrationDateTime',\n  x00440011: 'SubstanceAdministrationNotes',\n  x00440012: 'SubstanceAdministrationDeviceID',\n  x00440013: 'ProductParameterSequence',\n  x00440019: 'SubstanceAdminParameterSeq',\n  // x00451001: 'NumberOfMacroRowsInDetector',\n  // x00451002: 'MacroWidthAtISOCenter',\n  // x00451003: 'DASType',\n  // x00451004: 'DASGain',\n  // x00451005: 'DASTemperature',\n  // x00451006: 'TableDirectionInOrOut',\n  // x00451007: 'ZSmoothingFactor',\n  // x00451008: 'ViewWeightingMode',\n  // x00451009: 'SigmaRowNumberWhichRowsWereUsed',\n  // x0045100a: 'MinimumDasValueFoundInTheScanData',\n  // x0045100b: 'MaximumOffsetShiftValueUsed',\n  // x0045100c: 'NumberOfViewsShifted',\n  // x0045100d: 'ZTrackingFlag',\n  // x0045100e: 'MeanZError',\n  // x0045100f: 'ZTrackingMaximumError',\n  // x00451010: 'StartingViewForRow2a',\n  // x00451011: 'NumberOfViewsInRow2a',\n  // x00451012: 'StartingViewForRow1a',\n  // x00451013: 'SigmaMode',\n  // x00451014: 'NumberOfViewsInRow1a',\n  // x00451015: 'StartingViewForRow2b',\n  // x00451016: 'NumberOfViewsInRow2b',\n  // x00451017: 'StartingViewForRow1b',\n  // x00451018: 'NumberOfViewsInRow1b',\n  // x00451019: 'AirFilterCalibrationDate',\n  // x0045101a: 'AirFilterCalibrationTime',\n  // x0045101b: 'PhantomCalibrationDate',\n  // x0045101c: 'PhantomCalibrationTime',\n  // x0045101d: 'ZSlopeCalibrationDate',\n  // x0045101e: 'ZSlopeCalibrationTime',\n  // x0045101f: 'CrosstalkCalibrationDate',\n  // x00451020: 'CrosstalkCalibrationTime',\n  // x00451021: 'IterboneOptionFlag',\n  // x00451022: 'PeristalticFlagOption',\n  x00460012: 'LensDescription',\n  x00460014: 'RightLensSequence',\n  x00460015: 'LeftLensSequence',\n  x00460018: 'CylinderSequence',\n  x00460028: 'PrismSequence',\n  x00460030: 'HorizontalPrismPower',\n  x00460032: 'HorizontalPrismBase',\n  x00460034: 'VerticalPrismPower',\n  x00460036: 'VerticalPrismBase',\n  x00460038: 'LensSegmentType',\n  x00460040: 'OpticalTransmittance',\n  x00460042: 'ChannelWidth',\n  x00460044: 'PupilSize',\n  x00460046: 'CornealSize',\n  x00460060: 'DistancePupillaryDistance',\n  x00460062: 'NearPupillaryDistance',\n  x00460064: 'OtherPupillaryDistance',\n  x00460075: 'RadiusOfCurvature',\n  x00460076: 'KeratometricPower',\n  x00460077: 'KeratometricAxis',\n  x00460092: 'BackgroundColor',\n  x00460094: 'Optotype',\n  x00460095: 'OptotypePresentation',\n  x00460100: 'AddNearSequence',\n  x00460101: 'AddIntermediateSequence',\n  x00460102: 'AddOtherSequence',\n  x00460104: 'AddPower',\n  x00460106: 'ViewingDistance',\n  x00460125: 'ViewingDistanceType',\n  x00460135: 'VisualAcuityModifiers',\n  x00460137: 'DecimalVisualAcuity',\n  x00460139: 'OptotypeDetailedDefinition',\n  x00460146: 'SpherePower',\n  x00460147: 'CylinderPower',\n  x00500004: 'CalibrationImage',\n  x00500010: 'DeviceSequence',\n  x00500014: 'DeviceLength',\n  x00500015: 'ContainerComponentWidth',\n  x00500016: 'DeviceDiameter',\n  x00500017: 'DeviceDiameterUnits',\n  x00500018: 'DeviceVolume',\n  x00500019: 'InterMarkerDistance',\n  x0050001b: 'ContainerComponentID',\n  x00500020: 'DeviceDescription',\n  x00540010: 'EnergyWindowVector',\n  x00540011: 'NumberOfEnergyWindows',\n  x00540012: 'EnergyWindowInformationSequence',\n  x00540013: 'EnergyWindowRangeSequence',\n  x00540014: 'EnergyWindowLowerLimit',\n  x00540015: 'EnergyWindowUpperLimit',\n  x00540016: 'RadiopharmaceuticalInformationSeq',\n  x00540017: 'ResidualSyringeCounts',\n  x00540018: 'EnergyWindowName',\n  x00540020: 'DetectorVector',\n  x00540021: 'NumberOfDetectors',\n  x00540022: 'DetectorInformationSequence',\n  x00540030: 'PhaseVector',\n  x00540031: 'NumberOfPhases',\n  x00540032: 'PhaseInformationSequence',\n  x00540033: 'NumberOfFramesInPhase',\n  x00540036: 'PhaseDelay',\n  x00540038: 'PauseBetweenFrames',\n  x00540039: 'PhaseDescription',\n  x00540050: 'RotationVector',\n  x00540051: 'NumberOfRotations',\n  x00540052: 'RotationInformationSequence',\n  x00540053: 'NumberOfFramesInRotation',\n  x00540060: 'RRIntervalVector',\n  x00540061: 'NumberOfRRIntervals',\n  x00540062: 'GatedInformationSequence',\n  x00540063: 'DataInformationSequence',\n  x00540070: 'TimeSlotVector',\n  x00540071: 'NumberOfTimeSlots',\n  x00540072: 'TimeSlotInformationSequence',\n  x00540073: 'TimeSlotTime',\n  x00540080: 'SliceVector',\n  x00540081: 'NumberOfSlices',\n  x00540090: 'AngularViewVector',\n  x00540100: 'TimeSliceVector',\n  x00540101: 'NumberOfTimeSlices',\n  x00540200: 'StartAngle',\n  x00540202: 'TypeOfDetectorMotion',\n  x00540210: 'TriggerVector',\n  x00540211: 'NumberOfTriggersInPhase',\n  x00540220: 'ViewCodeSequence',\n  x00540222: 'ViewModifierCodeSequence',\n  x00540300: 'RadionuclideCodeSequence',\n  x00540302: 'AdministrationRouteCodeSequence',\n  x00540304: 'RadiopharmaceuticalCodeSequence',\n  x00540306: 'CalibrationDataSequence',\n  x00540308: 'EnergyWindowNumber',\n  x00540400: 'ImageID',\n  x00540410: 'PatientOrientationCodeSequence',\n  x00540412: 'PatientOrientationModifierCodeSeq',\n  x00540414: 'PatientGantryRelationshipCodeSeq',\n  x00540500: 'SliceProgressionDirection',\n  x00541000: 'SeriesType',\n  x00541001: 'Units',\n  x00541002: 'CountsSource',\n  x00541004: 'ReprojectionMethod',\n  x00541100: 'RandomsCorrectionMethod',\n  x00541101: 'AttenuationCorrectionMethod',\n  x00541102: 'DecayCorrection',\n  x00541103: 'ReconstructionMethod',\n  x00541104: 'DetectorLinesOfResponseUsed',\n  x00541105: 'ScatterCorrectionMethod',\n  x00541200: 'AxialAcceptance',\n  x00541201: 'AxialMash',\n  x00541202: 'TransverseMash',\n  x00541203: 'DetectorElementSize',\n  x00541210: 'CoincidenceWindowWidth',\n  x00541220: 'SecondaryCountsType',\n  x00541300: 'FrameReferenceTime',\n  x00541310: 'PrimaryCountsAccumulated',\n  x00541311: 'SecondaryCountsAccumulated',\n  x00541320: 'SliceSensitivityFactor',\n  x00541321: 'DecayFactor',\n  x00541322: 'DoseCalibrationFactor',\n  x00541323: 'ScatterFractionFactor',\n  x00541324: 'DeadTimeFactor',\n  x00541330: 'ImageIndex',\n  x00541400: 'CountsIncluded',\n  x00541401: 'DeadTimeCorrectionFlag',\n  x00603000: 'HistogramSequence',\n  x00603002: 'HistogramNumberOfBins',\n  x00603004: 'HistogramFirstBinValue',\n  x00603006: 'HistogramLastBinValue',\n  x00603008: 'HistogramBinWidth',\n  x00603010: 'HistogramExplanation',\n  x00603020: 'HistogramData',\n  x00620001: 'SegmentationType',\n  x00620002: 'SegmentSequence',\n  x00620003: 'SegmentedPropertyCategoryCodeSeq',\n  x00620004: 'SegmentNumber',\n  x00620005: 'SegmentLabel',\n  x00620006: 'SegmentDescription',\n  x00620008: 'SegmentAlgorithmType',\n  x00620009: 'SegmentAlgorithmName',\n  x0062000a: 'SegmentIdentificationSequence',\n  x0062000b: 'ReferencedSegmentNumber',\n  x0062000c: 'RecommendedDisplayGrayscaleValue',\n  x0062000d: 'RecommendedDisplayCIELabValue',\n  x0062000e: 'MaximumFractionalValue',\n  x0062000f: 'SegmentedPropertyTypeCodeSequence',\n  x00620010: 'SegmentationFractionalType',\n  x00640002: 'DeformableRegistrationSequence',\n  x00640003: 'SourceFrameOfReferenceUID',\n  x00640005: 'DeformableRegistrationGridSequence',\n  x00640007: 'GridDimensions',\n  x00640008: 'GridResolution',\n  x00640009: 'VectorGridData',\n  x0064000f: 'PreDeformationMatrixRegistSeq',\n  x00640010: 'PostDeformationMatrixRegistSeq',\n  x00660001: 'NumberOfSurfaces',\n  x00660002: 'SurfaceSequence',\n  x00660003: 'SurfaceNumber',\n  x00660004: 'SurfaceComments',\n  x00660009: 'SurfaceProcessing',\n  x0066000a: 'SurfaceProcessingRatio',\n  x0066000e: 'FiniteVolume',\n  x00660010: 'Manifold',\n  x00660011: 'SurfacePointsSequence',\n  x00660015: 'NumberOfSurfacePoints',\n  x00660016: 'PointCoordinatesData',\n  x00660017: 'PointPositionAccuracy',\n  x00660018: 'MeanPointDistance',\n  x00660019: 'MaximumPointDistance',\n  x0066001b: 'AxisOfRotation',\n  x0066001c: 'CenterOfRotation',\n  x0066001e: 'NumberOfVectors',\n  x0066001f: 'VectorDimensionality',\n  x00660020: 'VectorAccuracy',\n  x00660021: 'VectorCoordinateData',\n  x00660023: 'TrianglePointIndexList',\n  x00660024: 'EdgePointIndexList',\n  x00660025: 'VertexPointIndexList',\n  x00660026: 'TriangleStripSequence',\n  x00660027: 'TriangleFanSequence',\n  x00660028: 'LineSequence',\n  x00660029: 'PrimitivePointIndexList',\n  x0066002a: 'SurfaceCount',\n  x0066002f: 'AlgorithmFamilyCodeSequ',\n  x00660031: 'AlgorithmVersion',\n  x00660032: 'AlgorithmParameters',\n  x00660034: 'FacetSequence',\n  x00660036: 'AlgorithmName',\n  x00700001: 'GraphicAnnotationSequence',\n  x00700002: 'GraphicLayer',\n  x00700003: 'BoundingBoxAnnotationUnits',\n  x00700004: 'AnchorPointAnnotationUnits',\n  x00700005: 'GraphicAnnotationUnits',\n  x00700006: 'UnformattedTextValue',\n  x00700008: 'TextObjectSequence',\n  x00700009: 'GraphicObjectSequence',\n  x00700010: 'BoundingBoxTopLeftHandCorner',\n  x00700011: 'BoundingBoxBottomRightHandCorner',\n  x00700012: 'BoundingBoxTextHorizJustification',\n  x00700014: 'AnchorPoint',\n  x00700015: 'AnchorPointVisibility',\n  x00700020: 'GraphicDimensions',\n  x00700021: 'NumberOfGraphicPoints',\n  x00700022: 'GraphicData',\n  x00700023: 'GraphicType',\n  x00700024: 'GraphicFilled',\n  x00700040: 'ImageRotationRetired',\n  x00700041: 'ImageHorizontalFlip',\n  x00700042: 'ImageRotation',\n  x00700050: 'DisplayedAreaTopLeftTrial',\n  x00700051: 'DisplayedAreaBottomRightTrial',\n  x00700052: 'DisplayedAreaTopLeft',\n  x00700053: 'DisplayedAreaBottomRight',\n  x0070005a: 'DisplayedAreaSelectionSequence',\n  x00700060: 'GraphicLayerSequence',\n  x00700062: 'GraphicLayerOrder',\n  x00700066: 'GraphicLayerRecDisplayGraysclValue',\n  x00700067: 'GraphicLayerRecDisplayRGBValue',\n  x00700068: 'GraphicLayerDescription',\n  x00700080: 'ContentLabel',\n  x00700081: 'ContentDescription',\n  x00700082: 'PresentationCreationDate',\n  x00700083: 'PresentationCreationTime',\n  x00700084: 'ContentCreatorName',\n  x00700086: 'ContentCreatorIDCodeSequence',\n  x00700100: 'PresentationSizeMode',\n  x00700101: 'PresentationPixelSpacing',\n  x00700102: 'PresentationPixelAspectRatio',\n  x00700103: 'PresentationPixelMagRatio',\n  x00700306: 'ShapeType',\n  x00700308: 'RegistrationSequence',\n  x00700309: 'MatrixRegistrationSequence',\n  x0070030a: 'MatrixSequence',\n  x0070030c: 'FrameOfRefTransformationMatrixType',\n  x0070030d: 'RegistrationTypeCodeSequence',\n  x0070030f: 'FiducialDescription',\n  x00700310: 'FiducialIdentifier',\n  x00700311: 'FiducialIdentifierCodeSequence',\n  x00700312: 'ContourUncertaintyRadius',\n  x00700314: 'UsedFiducialsSequence',\n  x00700318: 'GraphicCoordinatesDataSequence',\n  x0070031a: 'FiducialUID',\n  x0070031c: 'FiducialSetSequence',\n  x0070031e: 'FiducialSequence',\n  x00700401: 'GraphicLayerRecomDisplayCIELabVal',\n  x00700402: 'BlendingSequence',\n  x00700403: 'RelativeOpacity',\n  x00700404: 'ReferencedSpatialRegistrationSeq',\n  x00700405: 'BlendingPosition',\n  x00720002: 'HangingProtocolName',\n  x00720004: 'HangingProtocolDescription',\n  x00720006: 'HangingProtocolLevel',\n  x00720008: 'HangingProtocolCreator',\n  x0072000a: 'HangingProtocolCreationDateTime',\n  x0072000c: 'HangingProtocolDefinitionSequence',\n  x0072000e: 'HangingProtocolUserIDCodeSequence',\n  x00720010: 'HangingProtocolUserGroupName',\n  x00720012: 'SourceHangingProtocolSequence',\n  x00720014: 'NumberOfPriorsReferenced',\n  x00720020: 'ImageSetsSequence',\n  x00720022: 'ImageSetSelectorSequence',\n  x00720024: 'ImageSetSelectorUsageFlag',\n  x00720026: 'SelectorAttribute',\n  x00720028: 'SelectorValueNumber',\n  x00720030: 'TimeBasedImageSetsSequence',\n  x00720032: 'ImageSetNumber',\n  x00720034: 'ImageSetSelectorCategory',\n  x00720038: 'RelativeTime',\n  x0072003a: 'RelativeTimeUnits',\n  x0072003c: 'AbstractPriorValue',\n  x0072003e: 'AbstractPriorCodeSequence',\n  x00720040: 'ImageSetLabel',\n  x00720050: 'SelectorAttributeVR',\n  x00720052: 'SelectorSequencePointer',\n  x00720054: 'SelectorSeqPointerPrivateCreator',\n  x00720056: 'SelectorAttributePrivateCreator',\n  x00720060: 'SelectorATValue',\n  x00720062: 'SelectorCSValue',\n  x00720064: 'SelectorISValue',\n  x00720066: 'SelectorLOValue',\n  x00720068: 'SelectorLTValue',\n  x0072006a: 'SelectorPNValue',\n  x0072006c: 'SelectorSHValue',\n  x0072006e: 'SelectorSTValue',\n  x00720070: 'SelectorUTValue',\n  x00720072: 'SelectorDSValue',\n  x00720074: 'SelectorFDValue',\n  x00720076: 'SelectorFLValue',\n  x00720078: 'SelectorULValue',\n  x0072007a: 'SelectorUSValue',\n  x0072007c: 'SelectorSLValue',\n  x0072007e: 'SelectorSSValue',\n  x00720080: 'SelectorCodeSequenceValue',\n  x00720100: 'NumberOfScreens',\n  x00720102: 'NominalScreenDefinitionSequence',\n  x00720104: 'NumberOfVerticalPixels',\n  x00720106: 'NumberOfHorizontalPixels',\n  x00720108: 'DisplayEnvironmentSpatialPosition',\n  x0072010a: 'ScreenMinimumGrayscaleBitDepth',\n  x0072010c: 'ScreenMinimumColorBitDepth',\n  x0072010e: 'ApplicationMaximumRepaintTime',\n  x00720200: 'DisplaySetsSequence',\n  x00720202: 'DisplaySetNumber',\n  x00720203: 'DisplaySetLabel',\n  x00720204: 'DisplaySetPresentationGroup',\n  x00720206: 'DisplaySetPresentationGroupDescr',\n  x00720208: 'PartialDataDisplayHandling',\n  x00720210: 'SynchronizedScrollingSequence',\n  x00720212: 'DisplaySetScrollingGroup',\n  x00720214: 'NavigationIndicatorSequence',\n  x00720216: 'NavigationDisplaySet',\n  x00720218: 'ReferenceDisplaySets',\n  x00720300: 'ImageBoxesSequence',\n  x00720302: 'ImageBoxNumber',\n  x00720304: 'ImageBoxLayoutType',\n  x00720306: 'ImageBoxTileHorizontalDimension',\n  x00720308: 'ImageBoxTileVerticalDimension',\n  x00720310: 'ImageBoxScrollDirection',\n  x00720312: 'ImageBoxSmallScrollType',\n  x00720314: 'ImageBoxSmallScrollAmount',\n  x00720316: 'ImageBoxLargeScrollType',\n  x00720318: 'ImageBoxLargeScrollAmount',\n  x00720320: 'ImageBoxOverlapPriority',\n  x00720330: 'CineRelativeToRealTime',\n  x00720400: 'FilterOperationsSequence',\n  x00720402: 'FilterByCategory',\n  x00720404: 'FilterByAttributePresence',\n  x00720406: 'FilterByOperator',\n  x00720432: 'SynchronizedImageBoxList',\n  x00720434: 'TypeOfSynchronization',\n  x00720500: 'BlendingOperationType',\n  x00720510: 'ReformattingOperationType',\n  x00720512: 'ReformattingThickness',\n  x00720514: 'ReformattingInterval',\n  x00720516: 'ReformattingOpInitialViewDir',\n  x00720520: 'RenderingType3D',\n  x00720600: 'SortingOperationsSequence',\n  x00720602: 'SortByCategory',\n  x00720604: 'SortingDirection',\n  x00720700: 'DisplaySetPatientOrientation',\n  x00720702: 'VOIType',\n  x00720704: 'PseudoColorType',\n  x00720706: 'ShowGrayscaleInverted',\n  x00720710: 'ShowImageTrueSizeFlag',\n  x00720712: 'ShowGraphicAnnotationFlag',\n  x00720714: 'ShowPatientDemographicsFlag',\n  x00720716: 'ShowAcquisitionTechniquesFlag',\n  x00720717: 'DisplaySetHorizontalJustification',\n  x00720718: 'DisplaySetVerticalJustification',\n  x00741000: 'UnifiedProcedureStepState',\n  x00741002: 'UPSProgressInformationSequence',\n  x00741004: 'UnifiedProcedureStepProgress',\n  x00741006: 'UnifiedProcedureStepProgressDescr',\n  x00741008: 'UnifiedProcedureStepComURISeq',\n  x0074100a: 'ContactURI',\n  x0074100c: 'ContactDisplayName',\n  x00741020: 'BeamTaskSequence',\n  x00741022: 'BeamTaskType',\n  x00741024: 'BeamOrderIndex',\n  x00741030: 'DeliveryVerificationImageSequence',\n  x00741032: 'VerificationImageTiming',\n  x00741034: 'DoubleExposureFlag',\n  x00741036: 'DoubleExposureOrdering',\n  x00741038: 'DoubleExposureMeterset',\n  x0074103a: 'DoubleExposureFieldDelta',\n  x00741040: 'RelatedReferenceRTImageSequence',\n  x00741042: 'GeneralMachineVerificationSequence',\n  x00741044: 'ConventionalMachineVerificationSeq',\n  x00741046: 'IonMachineVerificationSequence',\n  x00741048: 'FailedAttributesSequence',\n  x0074104a: 'OverriddenAttributesSequence',\n  x0074104c: 'ConventionalControlPointVerifySeq',\n  x0074104e: 'IonControlPointVerificationSeq',\n  x00741050: 'AttributeOccurrenceSequence',\n  x00741052: 'AttributeOccurrencePointer',\n  x00741054: 'AttributeItemSelector',\n  x00741056: 'AttributeOccurrencePrivateCreator',\n  x00741200: 'ScheduledProcedureStepPriority',\n  x00741202: 'StudyListLabel',\n  x00741204: 'ProcedureStepLabel',\n  x00741210: 'ScheduledProcessingParametersSeq',\n  x00741212: 'PerformedProcessingParametersSeq',\n  x00741216: 'UPSPerformedProcedureSequence',\n  x00741220: 'RelatedProcedureStepSequence',\n  x00741222: 'ProcedureStepRelationshipType',\n  x00741230: 'DeletionLock',\n  x00741234: 'ReceivingAE',\n  x00741236: 'RequestingAE',\n  x00741238: 'ReasonForCancellation',\n  x00741242: 'SCPStatus',\n  x00741244: 'SubscriptionListStatus',\n  x00741246: 'UPSListStatus',\n  x00880130: 'StorageMediaFileSetID',\n  x00880140: 'StorageMediaFileSetUID',\n  x00880200: 'IconImageSequence',\n  x00880904: 'TopicTitle',\n  x00880906: 'TopicSubject',\n  x00880910: 'TopicAuthor',\n  x00880912: 'TopicKeywords',\n  x01000410: 'SOPInstanceStatus',\n  x01000420: 'SOPAuthorizationDateAndTime',\n  x01000424: 'SOPAuthorizationComment',\n  x01000426: 'AuthorizationEquipmentCertNumber',\n  x04000005: 'MACIDNumber',\n  x04000010: 'MACCalculationTransferSyntaxUID',\n  x04000015: 'MACAlgorithm',\n  x04000020: 'DataElementsSigned',\n  x04000100: 'DigitalSignatureUID',\n  x04000105: 'DigitalSignatureDateTime',\n  x04000110: 'CertificateType',\n  x04000115: 'CertificateOfSigner',\n  x04000120: 'Signature',\n  x04000305: 'CertifiedTimestampType',\n  x04000310: 'CertifiedTimestamp',\n  x04000401: 'DigitalSignaturePurposeCodeSeq',\n  x04000402: 'ReferencedDigitalSignatureSeq',\n  x04000403: 'ReferencedSOPInstanceMACSeq',\n  x04000404: 'MAC',\n  x04000500: 'EncryptedAttributesSequence',\n  x04000510: 'EncryptedContentTransferSyntaxUID',\n  x04000520: 'EncryptedContent',\n  x04000550: 'ModifiedAttributesSequence',\n  x04000561: 'OriginalAttributesSequence',\n  x04000562: 'AttributeModificationDateTime',\n  x04000563: 'ModifyingSystem',\n  x04000564: 'SourceOfPreviousValues',\n  x04000565: 'ReasonForTheAttributeModification',\n  x1000xxx0: 'EscapeTriplet',\n  x1000xxx1: 'RunLengthTriplet',\n  x1000xxx2: 'HuffmanTableSize',\n  x1000xxx3: 'HuffmanTableTriplet',\n  x1000xxx4: 'ShiftTableSize',\n  x1000xxx5: 'ShiftTableTriplet',\n  x1010xxxx: 'ZonalMap',\n  x20000010: 'NumberOfCopies',\n  x2000001e: 'PrinterConfigurationSequence',\n  x20000020: 'PrintPriority',\n  x20000030: 'MediumType',\n  x20000040: 'FilmDestination',\n  x20000050: 'FilmSessionLabel',\n  x20000060: 'MemoryAllocation',\n  x20000061: 'MaximumMemoryAllocation',\n  x20000062: 'ColorImagePrintingFlag',\n  x20000063: 'CollationFlag',\n  x20000065: 'AnnotationFlag',\n  x20000067: 'ImageOverlayFlag',\n  x20000069: 'PresentationLUTFlag',\n  x2000006a: 'ImageBoxPresentationLUTFlag',\n  x200000a0: 'MemoryBitDepth',\n  x200000a1: 'PrintingBitDepth',\n  x200000a2: 'MediaInstalledSequence',\n  x200000a4: 'OtherMediaAvailableSequence',\n  x200000a8: 'SupportedImageDisplayFormatSeq',\n  x20000500: 'ReferencedFilmBoxSequence',\n  x20000510: 'ReferencedStoredPrintSequence',\n  x20100010: 'ImageDisplayFormat',\n  x20100030: 'AnnotationDisplayFormatID',\n  x20100040: 'FilmOrientation',\n  x20100050: 'FilmSizeID',\n  x20100052: 'PrinterResolutionID',\n  x20100054: 'DefaultPrinterResolutionID',\n  x20100060: 'MagnificationType',\n  x20100080: 'SmoothingType',\n  x201000a6: 'DefaultMagnificationType',\n  x201000a7: 'OtherMagnificationTypesAvailable',\n  x201000a8: 'DefaultSmoothingType',\n  x201000a9: 'OtherSmoothingTypesAvailable',\n  x20100100: 'BorderDensity',\n  x20100110: 'EmptyImageDensity',\n  x20100120: 'MinDensity',\n  x20100130: 'MaxDensity',\n  x20100140: 'Trim',\n  x20100150: 'ConfigurationInformation',\n  x20100152: 'ConfigurationInformationDescr',\n  x20100154: 'MaximumCollatedFilms',\n  x2010015e: 'Illumination',\n  x20100160: 'ReflectedAmbientLight',\n  x20100376: 'PrinterPixelSpacing',\n  x20100500: 'ReferencedFilmSessionSequence',\n  x20100510: 'ReferencedImageBoxSequence',\n  x20100520: 'ReferencedBasicAnnotationBoxSeq',\n  x20200010: 'ImageBoxPosition',\n  x20200020: 'Polarity',\n  x20200030: 'RequestedImageSize',\n  x20200040: 'RequestedDecimate-CropBehavior',\n  x20200050: 'RequestedResolutionID',\n  x202000a0: 'RequestedImageSizeFlag',\n  x202000a2: 'DecimateCropResult',\n  x20200110: 'BasicGrayscaleImageSequence',\n  x20200111: 'BasicColorImageSequence',\n  x20200130: 'ReferencedImageOverlayBoxSequence',\n  x20200140: 'ReferencedVOILUTBoxSequence',\n  x20300010: 'AnnotationPosition',\n  x20300020: 'TextString',\n  x20400010: 'ReferencedOverlayPlaneSequence',\n  x20400011: 'ReferencedOverlayPlaneGroups',\n  x20400020: 'OverlayPixelDataSequence',\n  x20400060: 'OverlayMagnificationType',\n  x20400070: 'OverlaySmoothingType',\n  x20400072: 'OverlayOrImageMagnification',\n  x20400074: 'MagnifyToNumberOfColumns',\n  x20400080: 'OverlayForegroundDensity',\n  x20400082: 'OverlayBackgroundDensity',\n  x20400090: 'OverlayMode',\n  x20400100: 'ThresholdDensity',\n  x20400500: 'ReferencedImageBoxSequenceRetired',\n  x20500010: 'PresentationLUTSequence',\n  x20500020: 'PresentationLUTShape',\n  x20500500: 'ReferencedPresentationLUTSequence',\n  x21000010: 'PrintJobID',\n  x21000020: 'ExecutionStatus',\n  x21000030: 'ExecutionStatusInfo',\n  x21000040: 'CreationDate',\n  x21000050: 'CreationTime',\n  x21000070: 'Originator',\n  x21000140: 'DestinationAE',\n  x21000160: 'OwnerID',\n  x21000170: 'NumberOfFilms',\n  x21000500: 'ReferencedPrintJobSequencePullStoredPrint',\n  x21100010: 'PrinterStatus',\n  x21100020: 'PrinterStatusInfo',\n  x21100030: 'PrinterName',\n  x21100099: 'PrintQueueID',\n  x21200010: 'QueueStatus',\n  x21200050: 'PrintJobDescriptionSequence',\n  x21200070: 'ReferencedPrintJobSequence',\n  x21300010: 'PrintManagementCapabilitiesSeq',\n  x21300015: 'PrinterCharacteristicsSequence',\n  x21300030: 'FilmBoxContentSequence',\n  x21300040: 'ImageBoxContentSequence',\n  x21300050: 'AnnotationContentSequence',\n  x21300060: 'ImageOverlayBoxContentSequence',\n  x21300080: 'PresentationLUTContentSequence',\n  x213000a0: 'ProposedStudySequence',\n  x213000c0: 'OriginalImageSequence',\n  x22000001: 'LabelFromInfoExtractedFromInstance',\n  x22000002: 'LabelText',\n  x22000003: 'LabelStyleSelection',\n  x22000004: 'MediaDisposition',\n  x22000005: 'BarcodeValue',\n  x22000006: 'BarcodeSymbology',\n  x22000007: 'AllowMediaSplitting',\n  x22000008: 'IncludeNonDICOMObjects',\n  x22000009: 'IncludeDisplayApplication',\n  x2200000a: 'SaveCompInstancesAfterMediaCreate',\n  x2200000b: 'TotalNumberMediaPiecesCreated',\n  x2200000c: 'RequestedMediaApplicationProfile',\n  x2200000d: 'ReferencedStorageMediaSequence',\n  x2200000e: 'FailureAttributes',\n  x2200000f: 'AllowLossyCompression',\n  x22000020: 'RequestPriority',\n  x30020002: 'RTImageLabel',\n  x30020003: 'RTImageName',\n  x30020004: 'RTImageDescription',\n  x3002000a: 'ReportedValuesOrigin',\n  x3002000c: 'RTImagePlane',\n  x3002000d: 'XRayImageReceptorTranslation',\n  x3002000e: 'XRayImageReceptorAngle',\n  x30020010: 'RTImageOrientation',\n  x30020011: 'ImagePlanePixelSpacing',\n  x30020012: 'RTImagePosition',\n  x30020020: 'RadiationMachineName',\n  x30020022: 'RadiationMachineSAD',\n  x30020024: 'RadiationMachineSSD',\n  x30020026: 'RTImageSID',\n  x30020028: 'SourceToReferenceObjectDistance',\n  x30020029: 'FractionNumber',\n  x30020030: 'ExposureSequence',\n  x30020032: 'MetersetExposure',\n  x30020034: 'DiaphragmPosition',\n  x30020040: 'FluenceMapSequence',\n  x30020041: 'FluenceDataSource',\n  x30020042: 'FluenceDataScale',\n  x30020051: 'FluenceMode',\n  x30020052: 'FluenceModeID',\n  x30040001: 'DVHType',\n  x30040002: 'DoseUnits',\n  x30040004: 'DoseType',\n  x30040006: 'DoseComment',\n  x30040008: 'NormalizationPoint',\n  x3004000a: 'DoseSummationType',\n  x3004000c: 'GridFrameOffsetVector',\n  x3004000e: 'DoseGridScaling',\n  x30040010: 'RTDoseROISequence',\n  x30040012: 'DoseValue',\n  x30040014: 'TissueHeterogeneityCorrection',\n  x30040040: 'DVHNormalizationPoint',\n  x30040042: 'DVHNormalizationDoseValue',\n  x30040050: 'DVHSequence',\n  x30040052: 'DVHDoseScaling',\n  x30040054: 'DVHVolumeUnits',\n  x30040056: 'DVHNumberOfBins',\n  x30040058: 'DVHData',\n  x30040060: 'DVHReferencedROISequence',\n  x30040062: 'DVHROIContributionType',\n  x30040070: 'DVHMinimumDose',\n  x30040072: 'DVHMaximumDose',\n  x30040074: 'DVHMeanDose',\n  x30060002: 'StructureSetLabel',\n  x30060004: 'StructureSetName',\n  x30060006: 'StructureSetDescription',\n  x30060008: 'StructureSetDate',\n  x30060009: 'StructureSetTime',\n  x30060010: 'ReferencedFrameOfReferenceSequence',\n  x30060012: 'RTReferencedStudySequence',\n  x30060014: 'RTReferencedSeriesSequence',\n  x30060016: 'ContourImageSequence',\n  x30060020: 'StructureSetROISequence',\n  x30060022: 'ROINumber',\n  x30060024: 'ReferencedFrameOfReferenceUID',\n  x30060026: 'ROIName',\n  x30060028: 'ROIDescription',\n  x3006002a: 'ROIDisplayColor',\n  x3006002c: 'ROIVolume',\n  x30060030: 'RTRelatedROISequence',\n  x30060033: 'RTROIRelationship',\n  x30060036: 'ROIGenerationAlgorithm',\n  x30060038: 'ROIGenerationDescription',\n  x30060039: 'ROIContourSequence',\n  x30060040: 'ContourSequence',\n  x30060042: 'ContourGeometricType',\n  x30060044: 'ContourSlabThickness',\n  x30060045: 'ContourOffsetVector',\n  x30060046: 'NumberOfContourPoints',\n  x30060048: 'ContourNumber',\n  x30060049: 'AttachedContours',\n  x30060050: 'ContourData',\n  x30060080: 'RTROIObservationsSequence',\n  x30060082: 'ObservationNumber',\n  x30060084: 'ReferencedROINumber',\n  x30060085: 'ROIObservationLabel',\n  x30060086: 'RTROIIdentificationCodeSequence',\n  x30060088: 'ROIObservationDescription',\n  x300600a0: 'RelatedRTROIObservationsSequence',\n  x300600a4: 'RTROIInterpretedType',\n  x300600a6: 'ROIInterpreter',\n  x300600b0: 'ROIPhysicalPropertiesSequence',\n  x300600b2: 'ROIPhysicalProperty',\n  x300600b4: 'ROIPhysicalPropertyValue',\n  x300600b6: 'ROIElementalCompositionSequence',\n  x300600b7: 'ROIElementalCompAtomicNumber',\n  x300600b8: 'ROIElementalCompAtomicMassFraction',\n  x300600c0: 'FrameOfReferenceRelationshipSeq',\n  x300600c2: 'RelatedFrameOfReferenceUID',\n  x300600c4: 'FrameOfReferenceTransformType',\n  x300600c6: 'FrameOfReferenceTransformMatrix',\n  x300600c8: 'FrameOfReferenceTransformComment',\n  x30080010: 'MeasuredDoseReferenceSequence',\n  x30080012: 'MeasuredDoseDescription',\n  x30080014: 'MeasuredDoseType',\n  x30080016: 'MeasuredDoseValue',\n  x30080020: 'TreatmentSessionBeamSequence',\n  x30080021: 'TreatmentSessionIonBeamSequence',\n  x30080022: 'CurrentFractionNumber',\n  x30080024: 'TreatmentControlPointDate',\n  x30080025: 'TreatmentControlPointTime',\n  x3008002a: 'TreatmentTerminationStatus',\n  x3008002b: 'TreatmentTerminationCode',\n  x3008002c: 'TreatmentVerificationStatus',\n  x30080030: 'ReferencedTreatmentRecordSequence',\n  x30080032: 'SpecifiedPrimaryMeterset',\n  x30080033: 'SpecifiedSecondaryMeterset',\n  x30080036: 'DeliveredPrimaryMeterset',\n  x30080037: 'DeliveredSecondaryMeterset',\n  x3008003a: 'SpecifiedTreatmentTime',\n  x3008003b: 'DeliveredTreatmentTime',\n  x30080040: 'ControlPointDeliverySequence',\n  x30080041: 'IonControlPointDeliverySequence',\n  x30080042: 'SpecifiedMeterset',\n  x30080044: 'DeliveredMeterset',\n  x30080045: 'MetersetRateSet',\n  x30080046: 'MetersetRateDelivered',\n  x30080047: 'ScanSpotMetersetsDelivered',\n  x30080048: 'DoseRateDelivered',\n  x30080050: 'TreatmentSummaryCalcDoseRefSeq',\n  x30080052: 'CumulativeDoseToDoseReference',\n  x30080054: 'FirstTreatmentDate',\n  x30080056: 'MostRecentTreatmentDate',\n  x3008005a: 'NumberOfFractionsDelivered',\n  x30080060: 'OverrideSequence',\n  x30080061: 'ParameterSequencePointer',\n  x30080062: 'OverrideParameterPointer',\n  x30080063: 'ParameterItemIndex',\n  x30080064: 'MeasuredDoseReferenceNumber',\n  x30080065: 'ParameterPointer',\n  x30080066: 'OverrideReason',\n  x30080068: 'CorrectedParameterSequence',\n  x3008006a: 'CorrectionValue',\n  x30080070: 'CalculatedDoseReferenceSequence',\n  x30080072: 'CalculatedDoseReferenceNumber',\n  x30080074: 'CalculatedDoseReferenceDescription',\n  x30080076: 'CalculatedDoseReferenceDoseValue',\n  x30080078: 'StartMeterset',\n  x3008007a: 'EndMeterset',\n  x30080080: 'ReferencedMeasuredDoseReferenceSeq',\n  x30080082: 'ReferencedMeasuredDoseReferenceNum',\n  x30080090: 'ReferencedCalculatedDoseRefSeq',\n  x30080092: 'ReferencedCalculatedDoseRefNumber',\n  x300800a0: 'BeamLimitingDeviceLeafPairsSeq',\n  x300800b0: 'RecordedWedgeSequence',\n  x300800c0: 'RecordedCompensatorSequence',\n  x300800d0: 'RecordedBlockSequence',\n  x300800e0: 'TreatmentSummaryMeasuredDoseRefSeq',\n  x300800f0: 'RecordedSnoutSequence',\n  x300800f2: 'RecordedRangeShifterSequence',\n  x300800f4: 'RecordedLateralSpreadingDeviceSeq',\n  x300800f6: 'RecordedRangeModulatorSequence',\n  x30080100: 'RecordedSourceSequence',\n  x30080105: 'SourceSerialNumber',\n  x30080110: 'TreatmentSessionAppSetupSeq',\n  x30080116: 'ApplicationSetupCheck',\n  x30080120: 'RecordedBrachyAccessoryDeviceSeq',\n  x30080122: 'ReferencedBrachyAccessoryDeviceNum',\n  x30080130: 'RecordedChannelSequence',\n  x30080132: 'SpecifiedChannelTotalTime',\n  x30080134: 'DeliveredChannelTotalTime',\n  x30080136: 'SpecifiedNumberOfPulses',\n  x30080138: 'DeliveredNumberOfPulses',\n  x3008013a: 'SpecifiedPulseRepetitionInterval',\n  x3008013c: 'DeliveredPulseRepetitionInterval',\n  x30080140: 'RecordedSourceApplicatorSequence',\n  x30080142: 'ReferencedSourceApplicatorNumber',\n  x30080150: 'RecordedChannelShieldSequence',\n  x30080152: 'ReferencedChannelShieldNumber',\n  x30080160: 'BrachyControlPointDeliveredSeq',\n  x30080162: 'SafePositionExitDate',\n  x30080164: 'SafePositionExitTime',\n  x30080166: 'SafePositionReturnDate',\n  x30080168: 'SafePositionReturnTime',\n  x30080200: 'CurrentTreatmentStatus',\n  x30080202: 'TreatmentStatusComment',\n  x30080220: 'FractionGroupSummarySequence',\n  x30080223: 'ReferencedFractionNumber',\n  x30080224: 'FractionGroupType',\n  x30080230: 'BeamStopperPosition',\n  x30080240: 'FractionStatusSummarySequence',\n  x30080250: 'TreatmentDate',\n  x30080251: 'TreatmentTime',\n  x300a0002: 'RTPlanLabel',\n  x300a0003: 'RTPlanName',\n  x300a0004: 'RTPlanDescription',\n  x300a0006: 'RTPlanDate',\n  x300a0007: 'RTPlanTime',\n  x300a0009: 'TreatmentProtocols',\n  x300a000a: 'PlanIntent',\n  x300a000b: 'TreatmentSites',\n  x300a000c: 'RTPlanGeometry',\n  x300a000e: 'PrescriptionDescription',\n  x300a0010: 'DoseReferenceSequence',\n  x300a0012: 'DoseReferenceNumber',\n  x300a0013: 'DoseReferenceUID',\n  x300a0014: 'DoseReferenceStructureType',\n  x300a0015: 'NominalBeamEnergyUnit',\n  x300a0016: 'DoseReferenceDescription',\n  x300a0018: 'DoseReferencePointCoordinates',\n  x300a001a: 'NominalPriorDose',\n  x300a0020: 'DoseReferenceType',\n  x300a0021: 'ConstraintWeight',\n  x300a0022: 'DeliveryWarningDose',\n  x300a0023: 'DeliveryMaximumDose',\n  x300a0025: 'TargetMinimumDose',\n  x300a0026: 'TargetPrescriptionDose',\n  x300a0027: 'TargetMaximumDose',\n  x300a0028: 'TargetUnderdoseVolumeFraction',\n  x300a002a: 'OrganAtRiskFullVolumeDose',\n  x300a002b: 'OrganAtRiskLimitDose',\n  x300a002c: 'OrganAtRiskMaximumDose',\n  x300a002d: 'OrganAtRiskOverdoseVolumeFraction',\n  x300a0040: 'ToleranceTableSequence',\n  x300a0042: 'ToleranceTableNumber',\n  x300a0043: 'ToleranceTableLabel',\n  x300a0044: 'GantryAngleTolerance',\n  x300a0046: 'BeamLimitingDeviceAngleTolerance',\n  x300a0048: 'BeamLimitingDeviceToleranceSeq',\n  x300a004a: 'BeamLimitingDevicePositionTol',\n  x300a004b: 'SnoutPositionTolerance',\n  x300a004c: 'PatientSupportAngleTolerance',\n  x300a004e: 'TableTopEccentricAngleTolerance',\n  x300a004f: 'TableTopPitchAngleTolerance',\n  x300a0050: 'TableTopRollAngleTolerance',\n  x300a0051: 'TableTopVerticalPositionTolerance',\n  x300a0052: 'TableTopLongitudinalPositionTol',\n  x300a0053: 'TableTopLateralPositionTolerance',\n  x300a0055: 'RTPlanRelationship',\n  x300a0070: 'FractionGroupSequence',\n  x300a0071: 'FractionGroupNumber',\n  x300a0072: 'FractionGroupDescription',\n  x300a0078: 'NumberOfFractionsPlanned',\n  x300a0079: 'NumberFractionPatternDigitsPerDay',\n  x300a007a: 'RepeatFractionCycleLength',\n  x300a007b: 'FractionPattern',\n  x300a0080: 'NumberOfBeams',\n  x300a0082: 'BeamDoseSpecificationPoint',\n  x300a0084: 'BeamDose',\n  x300a0086: 'BeamMeterset',\n  x300a0088: 'BeamDosePointDepth',\n  x300a0089: 'BeamDosePointEquivalentDepth',\n  x300a008a: 'BeamDosePointSSD',\n  x300a00a0: 'NumberOfBrachyApplicationSetups',\n  x300a00a2: 'BrachyAppSetupDoseSpecPoint',\n  x300a00a4: 'BrachyApplicationSetupDose',\n  x300a00b0: 'BeamSequence',\n  x300a00b2: 'TreatmentMachineName',\n  x300a00b3: 'PrimaryDosimeterUnit',\n  x300a00b4: 'SourceAxisDistance',\n  x300a00b6: 'BeamLimitingDeviceSequence',\n  x300a00b8: 'RTBeamLimitingDeviceType',\n  x300a00ba: 'SourceToBeamLimitingDeviceDistance',\n  x300a00bb: 'IsocenterToBeamLimitingDeviceDist',\n  x300a00bc: 'NumberOfLeafJawPairs',\n  x300a00be: 'LeafPositionBoundaries',\n  x300a00c0: 'BeamNumber',\n  x300a00c2: 'BeamName',\n  x300a00c3: 'BeamDescription',\n  x300a00c4: 'BeamType',\n  x300a00c6: 'RadiationType',\n  x300a00c7: 'HighDoseTechniqueType',\n  x300a00c8: 'ReferenceImageNumber',\n  x300a00ca: 'PlannedVerificationImageSequence',\n  x300a00cc: 'ImagingDeviceSpecificAcqParams',\n  x300a00ce: 'TreatmentDeliveryType',\n  x300a00d0: 'NumberOfWedges',\n  x300a00d1: 'WedgeSequence',\n  x300a00d2: 'WedgeNumber',\n  x300a00d3: 'WedgeType',\n  x300a00d4: 'WedgeID',\n  x300a00d5: 'WedgeAngle',\n  x300a00d6: 'WedgeFactor',\n  x300a00d7: 'TotalWedgeTrayWaterEquivThickness',\n  x300a00d8: 'WedgeOrientation',\n  x300a00d9: 'IsocenterToWedgeTrayDistance',\n  x300a00da: 'SourceToWedgeTrayDistance',\n  x300a00db: 'WedgeThinEdgePosition',\n  x300a00dc: 'BolusID',\n  x300a00dd: 'BolusDescription',\n  x300a00e0: 'NumberOfCompensators',\n  x300a00e1: 'MaterialID',\n  x300a00e2: 'TotalCompensatorTrayFactor',\n  x300a00e3: 'CompensatorSequence',\n  x300a00e4: 'CompensatorNumber',\n  x300a00e5: 'CompensatorID',\n  x300a00e6: 'SourceToCompensatorTrayDistance',\n  x300a00e7: 'CompensatorRows',\n  x300a00e8: 'CompensatorColumns',\n  x300a00e9: 'CompensatorPixelSpacing',\n  x300a00ea: 'CompensatorPosition',\n  x300a00eb: 'CompensatorTransmissionData',\n  x300a00ec: 'CompensatorThicknessData',\n  x300a00ed: 'NumberOfBoli',\n  x300a00ee: 'CompensatorType',\n  x300a00f0: 'NumberOfBlocks',\n  x300a00f2: 'TotalBlockTrayFactor',\n  x300a00f3: 'TotalBlockTrayWaterEquivThickness',\n  x300a00f4: 'BlockSequence',\n  x300a00f5: 'BlockTrayID',\n  x300a00f6: 'SourceToBlockTrayDistance',\n  x300a00f7: 'IsocenterToBlockTrayDistance',\n  x300a00f8: 'BlockType',\n  x300a00f9: 'AccessoryCode',\n  x300a00fa: 'BlockDivergence',\n  x300a00fb: 'BlockMountingPosition',\n  x300a00fc: 'BlockNumber',\n  x300a00fe: 'BlockName',\n  x300a0100: 'BlockThickness',\n  x300a0102: 'BlockTransmission',\n  x300a0104: 'BlockNumberOfPoints',\n  x300a0106: 'BlockData',\n  x300a0107: 'ApplicatorSequence',\n  x300a0108: 'ApplicatorID',\n  x300a0109: 'ApplicatorType',\n  x300a010a: 'ApplicatorDescription',\n  x300a010c: 'CumulativeDoseReferenceCoefficient',\n  x300a010e: 'FinalCumulativeMetersetWeight',\n  x300a0110: 'NumberOfControlPoints',\n  x300a0111: 'ControlPointSequence',\n  x300a0112: 'ControlPointIndex',\n  x300a0114: 'NominalBeamEnergy',\n  x300a0115: 'DoseRateSet',\n  x300a0116: 'WedgePositionSequence',\n  x300a0118: 'WedgePosition',\n  x300a011a: 'BeamLimitingDevicePositionSequence',\n  x300a011c: 'LeafJawPositions',\n  x300a011e: 'GantryAngle',\n  x300a011f: 'GantryRotationDirection',\n  x300a0120: 'BeamLimitingDeviceAngle',\n  x300a0121: 'BeamLimitingDeviceRotateDirection',\n  x300a0122: 'PatientSupportAngle',\n  x300a0123: 'PatientSupportRotationDirection',\n  x300a0124: 'TableTopEccentricAxisDistance',\n  x300a0125: 'TableTopEccentricAngle',\n  x300a0126: 'TableTopEccentricRotateDirection',\n  x300a0128: 'TableTopVerticalPosition',\n  x300a0129: 'TableTopLongitudinalPosition',\n  x300a012a: 'TableTopLateralPosition',\n  x300a012c: 'IsocenterPosition',\n  x300a012e: 'SurfaceEntryPoint',\n  x300a0130: 'SourceToSurfaceDistance',\n  x300a0134: 'CumulativeMetersetWeight',\n  x300a0140: 'TableTopPitchAngle',\n  x300a0142: 'TableTopPitchRotationDirection',\n  x300a0144: 'TableTopRollAngle',\n  x300a0146: 'TableTopRollRotationDirection',\n  x300a0148: 'HeadFixationAngle',\n  x300a014a: 'GantryPitchAngle',\n  x300a014c: 'GantryPitchRotationDirection',\n  x300a014e: 'GantryPitchAngleTolerance',\n  x300a0180: 'PatientSetupSequence',\n  x300a0182: 'PatientSetupNumber',\n  x300a0183: 'PatientSetupLabel',\n  x300a0184: 'PatientAdditionalPosition',\n  x300a0190: 'FixationDeviceSequence',\n  x300a0192: 'FixationDeviceType',\n  x300a0194: 'FixationDeviceLabel',\n  x300a0196: 'FixationDeviceDescription',\n  x300a0198: 'FixationDevicePosition',\n  x300a0199: 'FixationDevicePitchAngle',\n  x300a019a: 'FixationDeviceRollAngle',\n  x300a01a0: 'ShieldingDeviceSequence',\n  x300a01a2: 'ShieldingDeviceType',\n  x300a01a4: 'ShieldingDeviceLabel',\n  x300a01a6: 'ShieldingDeviceDescription',\n  x300a01a8: 'ShieldingDevicePosition',\n  x300a01b0: 'SetupTechnique',\n  x300a01b2: 'SetupTechniqueDescription',\n  x300a01b4: 'SetupDeviceSequence',\n  x300a01b6: 'SetupDeviceType',\n  x300a01b8: 'SetupDeviceLabel',\n  x300a01ba: 'SetupDeviceDescription',\n  x300a01bc: 'SetupDeviceParameter',\n  x300a01d0: 'SetupReferenceDescription',\n  x300a01d2: 'TableTopVerticalSetupDisplacement',\n  x300a01d4: 'TableTopLongitudinalSetupDisplace',\n  x300a01d6: 'TableTopLateralSetupDisplacement',\n  x300a0200: 'BrachyTreatmentTechnique',\n  x300a0202: 'BrachyTreatmentType',\n  x300a0206: 'TreatmentMachineSequence',\n  x300a0210: 'SourceSequence',\n  x300a0212: 'SourceNumber',\n  x300a0214: 'SourceType',\n  x300a0216: 'SourceManufacturer',\n  x300a0218: 'ActiveSourceDiameter',\n  x300a021a: 'ActiveSourceLength',\n  x300a0222: 'SourceEncapsulationNomThickness',\n  x300a0224: 'SourceEncapsulationNomTransmission',\n  x300a0226: 'SourceIsotopeName',\n  x300a0228: 'SourceIsotopeHalfLife',\n  x300a0229: 'SourceStrengthUnits',\n  x300a022a: 'ReferenceAirKermaRate',\n  x300a022b: 'SourceStrength',\n  x300a022c: 'SourceStrengthReferenceDate',\n  x300a022e: 'SourceStrengthReferenceTime',\n  x300a0230: 'ApplicationSetupSequence',\n  x300a0232: 'ApplicationSetupType',\n  x300a0234: 'ApplicationSetupNumber',\n  x300a0236: 'ApplicationSetupName',\n  x300a0238: 'ApplicationSetupManufacturer',\n  x300a0240: 'TemplateNumber',\n  x300a0242: 'TemplateType',\n  x300a0244: 'TemplateName',\n  x300a0250: 'TotalReferenceAirKerma',\n  x300a0260: 'BrachyAccessoryDeviceSequence',\n  x300a0262: 'BrachyAccessoryDeviceNumber',\n  x300a0263: 'BrachyAccessoryDeviceID',\n  x300a0264: 'BrachyAccessoryDeviceType',\n  x300a0266: 'BrachyAccessoryDeviceName',\n  x300a026a: 'BrachyAccessoryDeviceNomThickness',\n  x300a026c: 'BrachyAccessoryDevNomTransmission',\n  x300a0280: 'ChannelSequence',\n  x300a0282: 'ChannelNumber',\n  x300a0284: 'ChannelLength',\n  x300a0286: 'ChannelTotalTime',\n  x300a0288: 'SourceMovementType',\n  x300a028a: 'NumberOfPulses',\n  x300a028c: 'PulseRepetitionInterval',\n  x300a0290: 'SourceApplicatorNumber',\n  x300a0291: 'SourceApplicatorID',\n  x300a0292: 'SourceApplicatorType',\n  x300a0294: 'SourceApplicatorName',\n  x300a0296: 'SourceApplicatorLength',\n  x300a0298: 'SourceApplicatorManufacturer',\n  x300a029c: 'SourceApplicatorWallNomThickness',\n  x300a029e: 'SourceApplicatorWallNomTrans',\n  x300a02a0: 'SourceApplicatorStepSize',\n  x300a02a2: 'TransferTubeNumber',\n  x300a02a4: 'TransferTubeLength',\n  x300a02b0: 'ChannelShieldSequence',\n  x300a02b2: 'ChannelShieldNumber',\n  x300a02b3: 'ChannelShieldID',\n  x300a02b4: 'ChannelShieldName',\n  x300a02b8: 'ChannelShieldNominalThickness',\n  x300a02ba: 'ChannelShieldNominalTransmission',\n  x300a02c8: 'FinalCumulativeTimeWeight',\n  x300a02d0: 'BrachyControlPointSequence',\n  x300a02d2: 'ControlPointRelativePosition',\n  x300a02d4: 'ControlPoint3DPosition',\n  x300a02d6: 'CumulativeTimeWeight',\n  x300a02e0: 'CompensatorDivergence',\n  x300a02e1: 'CompensatorMountingPosition',\n  x300a02e2: 'SourceToCompensatorDistance',\n  x300a02e3: 'TotalCompTrayWaterEquivThickness',\n  x300a02e4: 'IsocenterToCompensatorTrayDistance',\n  x300a02e5: 'CompensatorColumnOffset',\n  x300a02e6: 'IsocenterToCompensatorDistances',\n  x300a02e7: 'CompensatorRelStoppingPowerRatio',\n  x300a02e8: 'CompensatorMillingToolDiameter',\n  x300a02ea: 'IonRangeCompensatorSequence',\n  x300a02eb: 'CompensatorDescription',\n  x300a0302: 'RadiationMassNumber',\n  x300a0304: 'RadiationAtomicNumber',\n  x300a0306: 'RadiationChargeState',\n  x300a0308: 'ScanMode',\n  x300a030a: 'VirtualSourceAxisDistances',\n  x300a030c: 'SnoutSequence',\n  x300a030d: 'SnoutPosition',\n  x300a030f: 'SnoutID',\n  x300a0312: 'NumberOfRangeShifters',\n  x300a0314: 'RangeShifterSequence',\n  x300a0316: 'RangeShifterNumber',\n  x300a0318: 'RangeShifterID',\n  x300a0320: 'RangeShifterType',\n  x300a0322: 'RangeShifterDescription',\n  x300a0330: 'NumberOfLateralSpreadingDevices',\n  x300a0332: 'LateralSpreadingDeviceSequence',\n  x300a0334: 'LateralSpreadingDeviceNumber',\n  x300a0336: 'LateralSpreadingDeviceID',\n  x300a0338: 'LateralSpreadingDeviceType',\n  x300a033a: 'LateralSpreadingDeviceDescription',\n  x300a033c: 'LateralSpreadingDevWaterEquivThick',\n  x300a0340: 'NumberOfRangeModulators',\n  x300a0342: 'RangeModulatorSequence',\n  x300a0344: 'RangeModulatorNumber',\n  x300a0346: 'RangeModulatorID',\n  x300a0348: 'RangeModulatorType',\n  x300a034a: 'RangeModulatorDescription',\n  x300a034c: 'BeamCurrentModulationID',\n  x300a0350: 'PatientSupportType',\n  x300a0352: 'PatientSupportID',\n  x300a0354: 'PatientSupportAccessoryCode',\n  x300a0356: 'FixationLightAzimuthalAngle',\n  x300a0358: 'FixationLightPolarAngle',\n  x300a035a: 'MetersetRate',\n  x300a0360: 'RangeShifterSettingsSequence',\n  x300a0362: 'RangeShifterSetting',\n  x300a0364: 'IsocenterToRangeShifterDistance',\n  x300a0366: 'RangeShifterWaterEquivThickness',\n  x300a0370: 'LateralSpreadingDeviceSettingsSeq',\n  x300a0372: 'LateralSpreadingDeviceSetting',\n  x300a0374: 'IsocenterToLateralSpreadingDevDist',\n  x300a0380: 'RangeModulatorSettingsSequence',\n  x300a0382: 'RangeModulatorGatingStartValue',\n  x300a0384: 'RangeModulatorGatingStopValue',\n  x300a038a: 'IsocenterToRangeModulatorDistance',\n  x300a0390: 'ScanSpotTuneID',\n  x300a0392: 'NumberOfScanSpotPositions',\n  x300a0394: 'ScanSpotPositionMap',\n  x300a0396: 'ScanSpotMetersetWeights',\n  x300a0398: 'ScanningSpotSize',\n  x300a039a: 'NumberOfPaintings',\n  x300a03a0: 'IonToleranceTableSequence',\n  x300a03a2: 'IonBeamSequence',\n  x300a03a4: 'IonBeamLimitingDeviceSequence',\n  x300a03a6: 'IonBlockSequence',\n  x300a03a8: 'IonControlPointSequence',\n  x300a03aa: 'IonWedgeSequence',\n  x300a03ac: 'IonWedgePositionSequence',\n  x300a0401: 'ReferencedSetupImageSequence',\n  x300a0402: 'SetupImageComment',\n  x300a0410: 'MotionSynchronizationSequence',\n  x300a0412: 'ControlPointOrientation',\n  x300a0420: 'GeneralAccessorySequence',\n  x300a0421: 'GeneralAccessoryID',\n  x300a0422: 'GeneralAccessoryDescription',\n  x300a0423: 'GeneralAccessoryType',\n  x300a0424: 'GeneralAccessoryNumber',\n  x300c0002: 'ReferencedRTPlanSequence',\n  x300c0004: 'ReferencedBeamSequence',\n  x300c0006: 'ReferencedBeamNumber',\n  x300c0007: 'ReferencedReferenceImageNumber',\n  x300c0008: 'StartCumulativeMetersetWeight',\n  x300c0009: 'EndCumulativeMetersetWeight',\n  x300c000a: 'ReferencedBrachyAppSetupSeq',\n  x300c000c: 'ReferencedBrachyAppSetupNumber',\n  x300c000e: 'ReferencedSourceNumber',\n  x300c0020: 'ReferencedFractionGroupSequence',\n  x300c0022: 'ReferencedFractionGroupNumber',\n  x300c0040: 'ReferencedVerificationImageSeq',\n  x300c0042: 'ReferencedReferenceImageSequence',\n  x300c0050: 'ReferencedDoseReferenceSequence',\n  x300c0051: 'ReferencedDoseReferenceNumber',\n  x300c0055: 'BrachyReferencedDoseReferenceSeq',\n  x300c0060: 'ReferencedStructureSetSequence',\n  x300c006a: 'ReferencedPatientSetupNumber',\n  x300c0080: 'ReferencedDoseSequence',\n  x300c00a0: 'ReferencedToleranceTableNumber',\n  x300c00b0: 'ReferencedBolusSequence',\n  x300c00c0: 'ReferencedWedgeNumber',\n  x300c00d0: 'ReferencedCompensatorNumber',\n  x300c00e0: 'ReferencedBlockNumber',\n  x300c00f0: 'ReferencedControlPointIndex',\n  x300c00f2: 'ReferencedControlPointSequence',\n  x300c00f4: 'ReferencedStartControlPointIndex',\n  x300c00f6: 'ReferencedStopControlPointIndex',\n  x300c0100: 'ReferencedRangeShifterNumber',\n  x300c0102: 'ReferencedLateralSpreadingDevNum',\n  x300c0104: 'ReferencedRangeModulatorNumber',\n  x300e0002: 'ApprovalStatus',\n  x300e0004: 'ReviewDate',\n  x300e0005: 'ReviewTime',\n  x300e0008: 'ReviewerName',\n  x40000000: 'TextGroupLength',\n  x40000010: 'Arbitrary',\n  x40004000: 'TextComments',\n  x40080040: 'ResultsID',\n  x40080042: 'ResultsIDIssuer',\n  x40080050: 'ReferencedInterpretationSequence',\n  x40080100: 'InterpretationRecordedDate',\n  x40080101: 'InterpretationRecordedTime',\n  x40080102: 'InterpretationRecorder',\n  x40080103: 'ReferenceToRecordedSound',\n  x40080108: 'InterpretationTranscriptionDate',\n  x40080109: 'InterpretationTranscriptionTime',\n  x4008010a: 'InterpretationTranscriber',\n  x4008010b: 'InterpretationText',\n  x4008010c: 'InterpretationAuthor',\n  x40080111: 'InterpretationApproverSequence',\n  x40080112: 'InterpretationApprovalDate',\n  x40080113: 'InterpretationApprovalTime',\n  x40080114: 'PhysicianApprovingInterpretation',\n  x40080115: 'InterpretationDiagnosisDescription',\n  x40080117: 'InterpretationDiagnosisCodeSeq',\n  x40080118: 'ResultsDistributionListSequence',\n  x40080119: 'DistributionName',\n  x4008011a: 'DistributionAddress',\n  x40080200: 'InterpretationID',\n  x40080202: 'InterpretationIDIssuer',\n  x40080210: 'InterpretationTypeID',\n  x40080212: 'InterpretationStatusID',\n  x40080300: 'Impressions',\n  x40084000: 'ResultsComments',\n  x4ffe0001: 'MACParametersSequence',\n  x50xx0005: 'CurveDimensions',\n  x50xx0010: 'NumberOfPoints',\n  x50xx0020: 'TypeOfData',\n  x50xx0022: 'CurveDescription',\n  x50xx0030: 'AxisUnits',\n  x50xx0040: 'AxisLabels',\n  x50xx0103: 'DataValueRepresentation',\n  x50xx0104: 'MinimumCoordinateValue',\n  x50xx0105: 'MaximumCoordinateValue',\n  x50xx0106: 'CurveRange',\n  x50xx0110: 'CurveDataDescriptor',\n  x50xx0112: 'CoordinateStartValue',\n  x50xx0114: 'CoordinateStepValue',\n  x50xx1001: 'CurveActivationLayer',\n  x50xx2000: 'AudioType',\n  x50xx2002: 'AudioSampleFormat',\n  x50xx2004: 'NumberOfChannels',\n  x50xx2006: 'NumberOfSamples',\n  x50xx2008: 'SampleRate',\n  x50xx200a: 'TotalTime',\n  x50xx200c: 'AudioSampleData',\n  x50xx200e: 'AudioComments',\n  x50xx2500: 'CurveLabel',\n  x50xx2600: 'CurveReferencedOverlaySequence',\n  x50xx2610: 'ReferencedOverlayGroup',\n  x50xx3000: 'CurveData',\n  x52009229: 'SharedFunctionalGroupsSequence',\n  x52009230: 'PerFrameFunctionalGroupsSequence',\n  x54000100: 'WaveformSequence',\n  x54000110: 'ChannelMinimumValue',\n  x54000112: 'ChannelMaximumValue',\n  x54001004: 'WaveformBitsAllocated',\n  x54001006: 'WaveformSampleInterpretation',\n  x5400100a: 'WaveformPaddingValue',\n  x54001010: 'WaveformData',\n  x56000010: 'FirstOrderPhaseCorrectionAngle',\n  x56000020: 'SpectroscopyData',\n  x60000000: 'OverlayGroupLength',\n  x60xx0010: 'OverlayRows',\n  x60xx0011: 'OverlayColumns',\n  x60xx0012: 'OverlayPlanes',\n  x60xx0015: 'NumberOfFramesInOverlay',\n  x60xx0022: 'OverlayDescription',\n  x60xx0040: 'OverlayType',\n  x60xx0045: 'OverlaySubtype',\n  x60xx0050: 'OverlayOrigin',\n  x60xx0051: 'ImageFrameOrigin',\n  x60xx0052: 'OverlayPlaneOrigin',\n  x60xx0060: 'OverlayCompressionCode',\n  x60xx0061: 'OverlayCompressionOriginator',\n  x60xx0062: 'OverlayCompressionLabel',\n  x60xx0063: 'OverlayCompressionDescription',\n  x60xx0066: 'OverlayCompressionStepPointers',\n  x60xx0068: 'OverlayRepeatInterval',\n  x60xx0069: 'OverlayBitsGrouped',\n  x60xx0100: 'OverlayBitsAllocated',\n  x60xx0102: 'OverlayBitPosition',\n  x60xx0110: 'OverlayFormat',\n  x60xx0200: 'OverlayLocation',\n  x60xx0800: 'OverlayCodeLabel',\n  x60xx0802: 'OverlayNumberOfTables',\n  x60xx0803: 'OverlayCodeTableLocation',\n  x60xx0804: 'OverlayBitsForCodeWord',\n  x60xx1001: 'OverlayActivationLayer',\n  x60xx1100: 'OverlayDescriptorGray',\n  x60xx1101: 'OverlayDescriptorRed',\n  x60xx1102: 'OverlayDescriptorGreen',\n  x60xx1103: 'OverlayDescriptorBlue',\n  x60xx1200: 'OverlaysGray',\n  x60xx1201: 'OverlaysRed',\n  x60xx1202: 'OverlaysGreen',\n  x60xx1203: 'OverlaysBlue',\n  x60xx1301: 'ROIArea',\n  x60xx1302: 'ROIMean',\n  x60xx1303: 'ROIStandardDeviation',\n  x60xx1500: 'OverlayLabel',\n  x60xx3000: 'OverlayData',\n  x60xx4000: 'OverlayComments',\n  x7fxx0000: 'PixelDataGroupLength',\n  x7fxx0010: 'PixelData',\n  x7fxx0011: 'VariableNextDataGroup',\n  x7fxx0020: 'VariableCoefficientsSDVN',\n  x7fxx0030: 'VariableCoefficientsSDHN',\n  x7fxx0040: 'VariableCoefficientsSDDN',\n  xfffafffa: 'DigitalSignaturesSequence',\n  xfffcfffc: 'DataSetTrailingPadding',\n  xfffee000: 'StartOfItem',\n  xfffee00d: 'EndOfItems',\n  xfffee0dd: 'EndOfSequence'\n};\nDICOMTagDescriptions.init(initialTagDescriptionMap); // Discard original map...\n\ninitialTagDescriptionMap = null;\n\nfunction getWADORSImageUrl(instance, frame) {\n  var wadorsuri = instance.wadorsuri;\n\n  if (!wadorsuri) {\n    return;\n  } // We need to sum 1 because WADO-RS frame number is 1-based\n\n\n  frame = (frame || 0) + 1; // Replaces /frame/1 by /frame/{frame}\n\n  wadorsuri = wadorsuri.replace(/(%2Fframes%2F)(\\d+)/, \"$1\".concat(frame));\n  return wadorsuri;\n}\n/**\n * Obtain an imageId for Cornerstone based on the WADO-RS scheme\n *\n * @param {object} instanceMetada metadata object (InstanceMetadata)\n * @returns {string} The imageId to be used by Cornerstone\n */\n\n\nfunction getWADORSImageId(instance, frame) {\n  var uri = getWADORSImageUrl(instance, frame);\n\n  if (!uri) {\n    return;\n  }\n\n  return \"wadors:\".concat(uri);\n}\n\nfunction updateQueryStringParameter(uri, key, value) {\n  var regex = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');\n  var separator = uri.indexOf('?') !== -1 ? '&' : '?';\n\n  if (uri.match(regex)) {\n    return uri.replace(regex, '$1' + key + '=' + value + '$2');\n  } else {\n    return uri + separator + key + '=' + value;\n  }\n}\n/**\n * Obtain an imageId for Cornerstone from an image instance\n *\n * @param instance\n * @param frame\n * @param thumbnail\n * @returns {string} The imageId to be used by Cornerstone\n */\n\n\nfunction getImageId(instance, frame) {\n  var thumbnail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!instance) {\n    return;\n  }\n\n  if (typeof instance.getImageId === 'function') {\n    return instance.getImageId();\n  }\n\n  if (instance.url) {\n    if (frame !== undefined) {\n      instance.url = updateQueryStringParameter(instance.url, 'frame', frame);\n    }\n\n    return instance.url;\n  }\n\n  var renderingAttr = thumbnail ? 'thumbnailRendering' : 'imageRendering';\n\n  if (!instance[renderingAttr] || instance[renderingAttr] === 'wadouri' || !instance.wadorsuri) {\n    var imageId = 'dicomweb:' + instance.wadouri;\n\n    if (frame !== undefined) {\n      imageId += '&frame=' + frame;\n    }\n\n    return imageId;\n  } else {\n    return getWADORSImageId(instance, frame, thumbnail); // WADO-RS Retrieve Frame\n  }\n}\n\nvar OHIFInstanceMetadata =\n/*#__PURE__*/\nfunction (_InstanceMetadata) {\n  inherits(OHIFInstanceMetadata, _InstanceMetadata);\n  /**\n   * @param {Object} Instance object.\n   */\n\n  function OHIFInstanceMetadata(data, series, study, uid) {\n    var _this;\n\n    classCallCheck(this, OHIFInstanceMetadata);\n    _this = possibleConstructorReturn(this, getPrototypeOf(OHIFInstanceMetadata).call(this, data, uid));\n\n    _this.init(series, study);\n\n    return _this;\n  }\n\n  createClass(OHIFInstanceMetadata, [{\n    key: \"init\",\n    value: function init(series, study) {\n      var instance = this.getData(); // Initialize Private Properties\n\n      Object.defineProperties(this, {\n        _sopInstanceUID: {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: instance.sopInstanceUid\n        },\n        _study: {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: study\n        },\n        _series: {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: series\n        },\n        _instance: {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: instance\n        },\n        _cache: {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: Object.create(null)\n        }\n      });\n    } // Override\n\n  }, {\n    key: \"getTagValue\",\n    value: function getTagValue(tagOrProperty, defaultValue, bypassCache) {\n      // check if this property has been cached...\n      if (tagOrProperty in this._cache && bypassCache !== true) {\n        return this._cache[tagOrProperty];\n      }\n\n      var propertyName = OHIFInstanceMetadata.getPropertyName(tagOrProperty); // Search property value in the whole study metadata chain...\n\n      var rawValue;\n\n      if (propertyName in this._instance) {\n        rawValue = this._instance[propertyName];\n      } else if (propertyName in this._series) {\n        rawValue = this._series[propertyName];\n      } else if (propertyName in this._study) {\n        rawValue = this._study[propertyName];\n      }\n\n      if (rawValue !== void 0) {\n        // if rawValue value is not undefined, cache result...\n        this._cache[tagOrProperty] = rawValue;\n        return rawValue;\n      }\n\n      return defaultValue;\n    } // Override\n\n  }, {\n    key: \"tagExists\",\n    value: function tagExists(tagOrProperty) {\n      var propertyName = OHIFInstanceMetadata.getPropertyName(tagOrProperty);\n      return propertyName in this._instance || propertyName in this._series || propertyName in this._study;\n    } // Override\n\n  }, {\n    key: \"getImageId\",\n    value: function getImageId$$1(frame, thumbnail) {\n      // If _imageID is not cached, create it\n      if (this._imageId === null) {\n        this._imageId = getImageId(this.getData(), frame, thumbnail);\n      }\n\n      return this._imageId;\n    }\n    /**\n     * Static methods\n     */\n    // @TODO: The current mapping of standard DICOM property names to local property names is not optimal.\n    // The inconsistency in property naming makes this function increasingly complex.\n    // A possible solution to improve this would be adapt retriveMetadata names to use DICOM standard names as in dicomTagDescriptions.js\n\n  }], [{\n    key: \"getPropertyName\",\n    value: function getPropertyName(tagOrProperty) {\n      var propertyName;\n      var tagInfo = DICOMTagDescriptions.find(tagOrProperty);\n\n      if (tagInfo !== void 0) {\n        // This function tries to translate standard DICOM property names into local naming convention.\n        propertyName = tagInfo.keyword.replace(/^SOP/, 'sop').replace(/UID$/, 'Uid').replace(/ID$/, 'Id');\n        propertyName = propertyName.charAt(0).toLowerCase() + propertyName.substr(1);\n      }\n\n      return propertyName;\n    }\n  }]);\n  return OHIFInstanceMetadata;\n}(InstanceMetadata);\n\nvar SeriesMetadata =\n/*#__PURE__*/\nfunction (_Metadata) {\n  inherits(SeriesMetadata, _Metadata);\n\n  function SeriesMetadata(data, uid) {\n    var _this;\n\n    classCallCheck(this, SeriesMetadata);\n    _this = possibleConstructorReturn(this, getPrototypeOf(SeriesMetadata).call(this, data, uid)); // Initialize Private Properties\n\n    Object.defineProperties(assertThisInitialized(assertThisInitialized(_this)), {\n      _seriesInstanceUID: {\n        configurable: true,\n        // configurable so that it can be redefined in sub-classes...\n        enumerable: false,\n        writable: true,\n        value: null\n      },\n      _instances: {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: []\n      },\n      _firstInstance: {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: null\n      }\n    }); // Initialize Public Properties\n\n    _this._definePublicProperties();\n\n    return _this;\n  }\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Define Public Properties\n   * This method should only be called during initialization (inside the class constructor)\n   */\n\n\n  createClass(SeriesMetadata, [{\n    key: \"_definePublicProperties\",\n    value: function _definePublicProperties() {\n      /**\n       * Property: this.seriesInstanceUID\n       * Same as this.getSeriesInstanceUID()\n       * It's specially useful in contexts where a method call is not suitable like in search criteria. For example:\n       * seriesCollection.findBy({\n       *   seriesInstanceUID: '1.2.3.4.5.6.77777.8888888.99999999999.0'\n       * });\n       */\n      Object.defineProperty(this, 'seriesInstanceUID', {\n        configurable: false,\n        enumerable: false,\n        get: function get() {\n          return this.getSeriesInstanceUID();\n        }\n      });\n    }\n    /**\n     * Public Methods\n     */\n\n    /**\n     * Returns the SeriesInstanceUID of the current series.\n     */\n\n  }, {\n    key: \"getSeriesInstanceUID\",\n    value: function getSeriesInstanceUID() {\n      return this._seriesInstanceUID;\n    }\n    /**\n     * Append an instance to the current series.\n     * @param {InstanceMetadata} instance The instance to be added to the current series.\n     * @returns {boolean} Returns true on success, false otherwise.\n     */\n\n  }, {\n    key: \"addInstance\",\n    value: function addInstance(instance) {\n      var result = false;\n\n      if (instance instanceof InstanceMetadata && this.getInstanceByUID(instance.getSOPInstanceUID()) === void 0) {\n        this._instances.push(instance);\n\n        result = true;\n      }\n\n      return result;\n    }\n    /**\n     * Get the first instance of the current series retaining a consistent result across multiple calls.\n     * @return {InstanceMetadata} An instance of the InstanceMetadata class or null if it does not exist.\n     */\n\n  }, {\n    key: \"getFirstInstance\",\n    value: function getFirstInstance() {\n      var instance = this._firstInstance;\n\n      if (!(instance instanceof InstanceMetadata)) {\n        instance = null;\n        var found = this.getInstanceByIndex(0);\n\n        if (found instanceof InstanceMetadata) {\n          this._firstInstance = found;\n          instance = found;\n        }\n      }\n\n      return instance;\n    }\n    /**\n     * Find an instance by index.\n     * @param {number} index An integer representing a list index.\n     * @returns {InstanceMetadata} Returns a InstanceMetadata instance when found or undefined otherwise.\n     */\n\n  }, {\n    key: \"getInstanceByIndex\",\n    value: function getInstanceByIndex(index) {\n      var found; // undefined by default...\n\n      if (Metadata.isValidIndex(index)) {\n        found = this._instances[index];\n      }\n\n      return found;\n    }\n    /**\n     * Find an instance by SOPInstanceUID.\n     * @param {string} uid An UID string.\n     * @returns {InstanceMetadata} Returns a InstanceMetadata instance when found or undefined otherwise.\n     */\n\n  }, {\n    key: \"getInstanceByUID\",\n    value: function getInstanceByUID(uid) {\n      var found; // undefined by default...\n\n      if (Metadata.isValidUID(uid)) {\n        found = this._instances.find(function (instance) {\n          return instance.getSOPInstanceUID() === uid;\n        });\n      }\n\n      return found;\n    }\n    /**\n     * Retrieve the number of instances within the current series.\n     * @returns {number} The number of instances in the current series.\n     */\n\n  }, {\n    key: \"getInstanceCount\",\n    value: function getInstanceCount() {\n      return this._instances.length;\n    }\n    /**\n     * Invokes the supplied callback for each instance in the current series passing\n     * two arguments: instance (an InstanceMetadata instance) and index (the integer\n     * index of the instance within the current series)\n     * @param {function} callback The callback function which will be invoked for each instance in the series.\n     * @returns {undefined} Nothing is returned.\n     */\n\n  }, {\n    key: \"forEachInstance\",\n    value: function forEachInstance(callback) {\n      if (Metadata.isValidCallback(callback)) {\n        this._instances.forEach(function (instance, index) {\n          callback.call(null, instance, index);\n        });\n      }\n    }\n    /**\n     * Find the index of an instance inside the series.\n     * @param {InstanceMetadata} instance An instance of the SeriesMetadata class.\n     * @returns {number} The index of the instance inside the series or -1 if not found.\n     */\n\n  }, {\n    key: \"indexOfInstance\",\n    value: function indexOfInstance(instance) {\n      return this._instances.indexOf(instance);\n    }\n    /**\n     * Search the associated instances using the supplied callback as criteria. The callback is passed\n     * two arguments: instance (a InstanceMetadata instance) and index (the integer\n     * index of the instance within its series)\n     * @param {function} callback The callback function which will be invoked for each instance.\n     * @returns {InstanceMetadata|undefined} If an instance is found based on callback criteria it\n     *                                     returns a InstanceMetadata. \"undefined\" is returned otherwise\n     */\n\n  }, {\n    key: \"findInstance\",\n    value: function findInstance(callback) {\n      if (Metadata.isValidCallback(callback)) {\n        return this._instances.find(function (instance, index) {\n          return callback.call(null, instance, index);\n        });\n      }\n    }\n    /**\n     * Compares the current series with another one.\n     * @param {SeriesMetadata} series An instance of the SeriesMetadata class.\n     * @returns {boolean} Returns true if both instances refer to the same series.\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(series) {\n      var self = this;\n      return series === self || series instanceof SeriesMetadata && series.getSeriesInstanceUID() === self.getSeriesInstanceUID();\n    }\n  }]);\n  return SeriesMetadata;\n}(Metadata);\n\nvar OHIFSeriesMetadata =\n/*#__PURE__*/\nfunction (_SeriesMetadata) {\n  inherits(OHIFSeriesMetadata, _SeriesMetadata);\n  /**\n   * @param {Object} Series object.\n   */\n\n  function OHIFSeriesMetadata(data, study, uid) {\n    var _this;\n\n    classCallCheck(this, OHIFSeriesMetadata);\n    _this = possibleConstructorReturn(this, getPrototypeOf(OHIFSeriesMetadata).call(this, data, uid));\n\n    _this.init(study);\n\n    return _this;\n  }\n\n  createClass(OHIFSeriesMetadata, [{\n    key: \"init\",\n    value: function init(study) {\n      var _this2 = this;\n\n      var series = this.getData(); // define \"_seriesInstanceUID\" protected property...\n\n      Object.defineProperty(this, '_seriesInstanceUID', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: series.seriesInstanceUid\n      }); // populate internal list of instances...\n\n      series.instances.forEach(function (instance) {\n        _this2.addInstance(new OHIFInstanceMetadata(instance, series, study));\n      });\n    }\n  }]);\n  return OHIFSeriesMetadata;\n}(SeriesMetadata);\n/**\n * Returns the specified element as a dicom attribute group/element.\n *\n * @param element - The group/element of the element (e.g. '00280009')\n * @param [defaultValue] - The value to return if the element is not present\n * @returns {*}\n */\n\n\nfunction getAttribute(element, defaultValue) {\n  if (!element) {\n    return defaultValue;\n  } // Value is not present if the attribute has a zero length value\n\n\n  if (!element.Value) {\n    return defaultValue;\n  } // Sanity check to make sure we have at least one entry in the array.\n\n\n  if (!element.Value.length) {\n    return defaultValue;\n  }\n\n  return convertToInt(element.Value);\n}\n\nfunction convertToInt(input) {\n  function padFour(input) {\n    var l = input.length;\n    if (l == 0) return '0000';\n    if (l == 1) return '000' + input;\n    if (l == 2) return '00' + input;\n    if (l == 3) return '0' + input;\n    return input;\n  }\n\n  var output = '';\n\n  for (var i = 0; i < input.length; i++) {\n    for (var j = 0; j < input[i].length; j++) {\n      output += padFour(input[i].charCodeAt(j).toString(16));\n    }\n  }\n\n  return parseInt(output, 16);\n} // These should be overridden by the implementation\n\n\nvar user = {\n  userLoggedIn: function userLoggedIn() {\n    return false;\n  },\n  getUserId: function getUserId() {\n    return null;\n  },\n  getName: function getName() {\n    return null;\n  },\n  getAccessToken: function getAccessToken() {\n    return null;\n  },\n  login: function login() {\n    return new Promise(function (resolve, reject) {\n      return reject();\n    });\n  },\n  logout: function logout() {\n    return new Promise(function (resolve, reject) {\n      return reject();\n    });\n  },\n  getData: function getData(key) {\n    return null;\n  },\n  setData: function setData(key, value) {\n    return null;\n  }\n}; // Commenting this out for now since it looks like Rollup is pulling in the\n\n/**\n * Returns the Authorization header as part of an Object.\n *\n * @returns {Object}\n */\n\nfunction getAuthorizationHeader(server) {\n  var headers = {}; // Check for OHIF.user since this can also be run on the server\n\n  var accessToken = user && user.getAccessToken && user.getAccessToken();\n\n  if (server && server.requestOptions && server.requestOptions.auth) {\n    // HTTP Basic Auth (user:password)\n    headers.Authorization = \"Basic \".concat(btoa(server.requestOptions.auth));\n  } else if (accessToken) {\n    headers.Authorization = \"Bearer \".concat(accessToken);\n  }\n\n  return headers;\n}\n\nfunction getModalities(modality, modalitiesInStudy) {\n  var modalities = {};\n\n  if (modality) {\n    modalities = modality;\n  }\n\n  if (modalitiesInStudy) {\n    // Find vr in modalities\n    if (modalities.vr && modalities.vr === modalitiesInStudy.vr) {\n      for (var i = 0; i < modalitiesInStudy.Value.length; i++) {\n        var value = modalitiesInStudy.Value[i];\n\n        if (modalities.Value.indexOf(value) === -1) {\n          modalities.Value.push(value);\n        }\n      }\n    } else {\n      modalities = modalitiesInStudy;\n    }\n  }\n\n  return modalities;\n}\n/**\n * Returns the Alphabetic version of a PN\n *\n * @param element - The group/element of the element (e.g. '00200013')\n * @param [defaultValue] - The default value to return if the element is not found\n * @returns {*}\n */\n\n\nfunction getName(element, defaultValue) {\n  if (!element) {\n    return defaultValue;\n  } // Value is not present if the attribute has a zero length value\n\n\n  if (!element.Value) {\n    return defaultValue;\n  } // Sanity check to make sure we have at least one entry in the array.\n\n\n  if (!element.Value.length) {\n    return defaultValue;\n  } // Return the Alphabetic component group\n\n\n  if (element.Value[0].Alphabetic) {\n    return element.Value[0].Alphabetic;\n  } // Orthanc does not return PN properly so this is a temporary workaround\n\n\n  return element.Value[0];\n}\n/**\n * Returns the first string value as a Javascript Number\n * @param element - The group/element of the element (e.g. '00200013')\n * @param [defaultValue] - The default value to return if the element does not exist\n * @returns {*}\n */\n\n\nfunction getNumber(element, defaultValue) {\n  if (!element) {\n    return defaultValue;\n  } // Value is not present if the attribute has a zero length value\n\n\n  if (!element.Value) {\n    return defaultValue;\n  } // Sanity check to make sure we have at least one entry in the array.\n\n\n  if (!element.Value.length) {\n    return defaultValue;\n  }\n\n  return parseFloat(element.Value[0]);\n}\n/**\n * Returns the specified element as a string.  Multi-valued elements will be separated by a backslash\n *\n * @param element - The group/element of the element (e.g. '00200013')\n * @param [defaultValue] - The value to return if the element is not present\n * @returns {*}\n */\n\n\nfunction getString(element, defaultValue) {\n  if (!element) {\n    return defaultValue;\n  } // Value is not present if the attribute has a zero length value\n\n\n  if (!element.Value) {\n    return defaultValue;\n  } // Sanity check to make sure we have at least one entry in the array.\n\n\n  if (!element.Value.length) {\n    return defaultValue;\n  } // Join the array together separated by backslash\n  // NOTE: Orthanc does not correctly split values into an array so the join is a no-op\n\n\n  return element.Value.join('\\\\');\n}\n\nvar DICOMWeb = {\n  getAttribute: getAttribute,\n  getAuthorizationHeader: getAuthorizationHeader,\n  getModalities: getModalities,\n  getName: getName,\n  getNumber: getNumber,\n  getString: getString\n};\n/**\n * Create a random GUID\n *\n * @return {string}\n */\n\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nvar OBJECT$1 = 'object';\n/**\n * This class defines an ImageSet object which will be used across the viewer. This object represents\n * a list of images that are associated by any arbitrary criteria being thus content agnostic. Besides the\n * main attributes (images and uid) it allows additional attributes to be appended to it (currently\n * indiscriminately, but this should be changed).\n */\n\nvar ImageSet =\n/*#__PURE__*/\nfunction () {\n  function ImageSet(images) {\n    classCallCheck(this, ImageSet);\n\n    if (Array.isArray(images) !== true) {\n      throw new OHIFError('ImageSet expects an array of images');\n    } // @property \"images\"\n\n\n    Object.defineProperty(this, 'images', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: images\n    }); // @property \"uid\"\n\n    Object.defineProperty(this, 'uid', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: guid() // Unique ID of the instance\n\n    });\n  }\n\n  createClass(ImageSet, [{\n    key: \"getUID\",\n    value: function getUID() {\n      return this.uid;\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(attribute, value) {\n      this[attribute] = value;\n    }\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attribute) {\n      return this[attribute];\n    }\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(attributes) {\n      if (_typeof_1(attributes) === OBJECT$1 && attributes !== null) {\n        var imageSet = this,\n            hasOwn = Object.prototype.hasOwnProperty;\n\n        for (var attribute in attributes) {\n          if (hasOwn.call(attributes, attribute)) {\n            imageSet[attribute] = attributes[attribute];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(index) {\n      return this.images[index];\n    }\n  }, {\n    key: \"sortBy\",\n    value: function sortBy(sortingCallback) {\n      return this.images.sort(sortingCallback);\n    }\n  }]);\n  return ImageSet;\n}();\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck$1(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties$1(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass$1(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties$1(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)\n * @returns {String}\n */\n\n\nfunction uint8ArrayToString(arr, offset, limit) {\n  offset = offset || 0;\n  limit = limit || arr.length - offset;\n  var str = '';\n\n  for (var i = offset; i < offset + limit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n\n  return str;\n}\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\n\n\nfunction stringToUint8Array(str) {\n  var arr = new Uint8Array(str.length);\n\n  for (var i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n\n  return arr;\n}\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\n\n\nfunction identifyBoundary(header) {\n  var parts = header.split('\\r\\n');\n\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n}\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {Number} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\n\n\nfunction containsToken(message, token) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (offset + token.length > message.length) {\n    return false;\n  }\n\n  var index = offset;\n\n  for (var i = 0; i < token.length; i++) {\n    if (token[i] !== message[index++]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\n\n\nfunction findToken(message, token) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var maxSearchLength = arguments.length > 3 ? arguments[3] : undefined;\n  var searchLength = message.length;\n\n  if (maxSearchLength) {\n    searchLength = Math.min(offset + maxSearchLength, message.length);\n  }\n\n  for (var i = offset; i < searchLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part of the multipart body. If this is not specified, a random GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This contains both the data itself, and the boundary string used to divide it.\n */\n\n\nfunction multipartEncode(datasets) {\n  var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : guid$1();\n  var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'application/dicom';\n  var contentTypeString = \"Content-Type: \".concat(contentType);\n  var header = \"\\r\\n--\".concat(boundary, \"\\r\\n\").concat(contentTypeString, \"\\r\\n\\r\\n\");\n  var footer = \"\\r\\n--\".concat(boundary, \"--\");\n  var headerArray = stringToUint8Array(header);\n  var footerArray = stringToUint8Array(footer);\n  var headerLength = headerArray.length;\n  var footerLength = footerArray.length;\n  var length = 0; // Calculate the total length for the final array\n\n  var contentArrays = datasets.map(function (datasetBuffer) {\n    var contentArray = new Uint8Array(datasetBuffer);\n    var contentLength = contentArray.length;\n    length += headerLength + contentLength + footerLength;\n    return contentArray;\n  }); // Allocate the array\n\n  var multipartArray = new Uint8Array(length); // Set the initial header\n\n  multipartArray.set(headerArray, 0); // Write each dataset into the multipart array\n\n  var position = 0;\n  contentArrays.forEach(function (contentArray) {\n    var contentLength = contentArray.length;\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n    position += headerLength + contentArray.length;\n  });\n  multipartArray.set(footerArray, position);\n  return {\n    data: multipartArray.buffer,\n    boundary: boundary\n  };\n}\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\n\n\nfunction multipartDecode(response) {\n  var message = new Uint8Array(response);\n  /* Set a maximum length to search for the header boundaries, otherwise\n     findToken can run for a long time\n  */\n\n  var maxSearchLength = 1000; // First look for the multipart mime header\n\n  var separator = stringToUint8Array('\\r\\n\\r\\n');\n  var headerIndex = findToken(message, separator, 0, maxSearchLength);\n\n  if (headerIndex === -1) {\n    throw new Error('Response message has no multipart mime header');\n  }\n\n  var header = uint8ArrayToString(message, 0, headerIndex);\n  var boundaryString = identifyBoundary(header);\n\n  if (!boundaryString) {\n    throw new Error('Header of response message does not specify boundary');\n  }\n\n  var boundary = stringToUint8Array(boundaryString);\n  var boundaryLength = boundary.length;\n  var components = [];\n  var offset = headerIndex + separator.length; // Loop until we cannot find any more boundaries\n\n  var boundaryIndex;\n\n  while (boundaryIndex !== -1) {\n    // Search for the next boundary in the message, starting\n    // from the current offset position\n    boundaryIndex = findToken(message, boundary, offset); // If no further boundaries are found, stop here.\n\n    if (boundaryIndex === -1) {\n      break;\n    } // Extract data from response message, excluding \"\\r\\n\"\n\n\n    var spacingLength = 2;\n    var length = boundaryIndex - offset - spacingLength;\n    var data = response.slice(offset, offset + length); // Add the data to the array of results\n\n    components.push(data); // Move the offset to the end of the current section,\n    // plus the identified boundary\n\n    offset += length + spacingLength + boundaryLength;\n  }\n\n  return components;\n}\n/**\n * Create a random GUID\n *\n * @return {string}\n */\n\n\nfunction guid$1() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nvar getFirstResult = function getFirstResult(result) {\n  return result[0];\n};\n\nvar MIMETYPES = {\n  DICOM: 'application/dicom',\n  DICOM_JSON: 'application/dicom+json',\n  OCTET_STREAM: 'application/octet-stream',\n  JPEG: 'image/jpeg',\n  PNG: 'image/png'\n};\n/**\n* Class for interacting with DICOMweb RESTful services.\n*/\n\nvar DICOMwebClient =\n/*#__PURE__*/\nfunction () {\n  /**\n  * @constructor\n  * @param {Object} options (choices: \"url\", \"username\", \"password\", \"headers\")\n  */\n  function DICOMwebClient(options) {\n    _classCallCheck$1(this, DICOMwebClient);\n\n    this.baseURL = options.url;\n\n    if (!this.baseURL) {\n      console.error('no DICOMweb base url provided - calls will fail');\n    }\n\n    if ('username' in options) {\n      this.username = options.username;\n\n      if (!('password' in options)) {\n        console.error('no password provided to authenticate with DICOMweb service');\n      }\n\n      this.password = options.password;\n    }\n\n    if ('qidoURLPrefix' in options) {\n      console.log(\"use URL prefix for QIDO-RS: \".concat(options.qidoURLPrefix));\n      this.qidoURL = this.baseURL + '/' + options.qidoURLPrefix;\n    } else {\n      this.qidoURL = this.baseURL;\n    }\n\n    if ('wadoURLPrefix' in options) {\n      console.log(\"use URL prefix for WADO-RS: \".concat(options.wadoURLPrefix));\n      this.wadoURL = this.baseURL + '/' + options.wadoURLPrefix;\n    } else {\n      this.wadoURL = this.baseURL;\n    }\n\n    if ('stowURLPrefix' in options) {\n      console.log(\"use URL prefix for STOW-RS: \".concat(options.stowURLPrefix));\n      this.stowURL = this.baseURL + '/' + options.stowURLPrefix;\n    } else {\n      this.stowURL = this.baseURL;\n    }\n\n    this.headers = options.headers || {};\n  }\n\n  _createClass$1(DICOMwebClient, [{\n    key: \"_httpRequest\",\n    value: function _httpRequest(url, method, headers) {\n      var _this = this;\n\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return new Promise(function (resolve, reject) {\n        var request = new XMLHttpRequest();\n        request.open(method, url, true);\n\n        if ('responseType' in options) {\n          request.responseType = options.responseType;\n        }\n\n        if (_typeof(headers) === 'object') {\n          Object.keys(headers).forEach(function (key) {\n            request.setRequestHeader(key, headers[key]);\n          });\n        } // now add custom headers from the user\n        // (e.g. access tokens)\n\n\n        var userHeaders = _this.headers;\n        Object.keys(userHeaders).forEach(function (key) {\n          request.setRequestHeader(key, userHeaders[key]);\n        }); // Event triggered when upload starts\n\n        request.onloadstart = function (event) {//console.log('upload started: ', url)\n        }; // Event triggered when upload ends\n\n\n        request.onloadend = function (event) {//console.log('upload finished')\n        }; // Handle response message\n\n\n        request.onreadystatechange = function (event) {\n          if (request.readyState === 4) {\n            if (request.status === 200) {\n              resolve(request.response);\n            } else if (request.status === 202) {\n              console.warn('some resources already existed: ', request);\n              resolve(request.response);\n            } else if (request.status === 204) {\n              console.warn('empty response for request: ', request);\n              resolve([]);\n            } else {\n              console.error('request failed: ', request);\n              var error = new Error('request failed');\n              error.request = request;\n              error.response = request.response;\n              error.status = request.status;\n              console.error(error);\n              console.error(error.response);\n              reject(error);\n            }\n          }\n        }; // Event triggered while download progresses\n\n\n        if ('progressCallback' in options) {\n          if (typeof options.progressCallback === 'function') {\n            request.onprogress = options.progressCallback;\n          }\n        } // request.onprogress = function (event) {\n        //   const loaded = progress.loaded;\n        //   let total;\n        //   let percentComplete;\n        //   if (progress.lengthComputable) {\n        //     total = progress.total;\n        //     percentComplete = Math.round((loaded / total) * 100);\n        //   j\n        //   // console.log('download progress: ', percentComplete, ' %');\n        //   return(percentComplete);\n        // };\n\n\n        if ('data' in options) {\n          request.send(options.data);\n        } else {\n          request.send();\n        }\n      });\n    }\n  }, {\n    key: \"_httpGet\",\n    value: function _httpGet(url, headers, responseType, progressCallback) {\n      return this._httpRequest(url, 'get', headers, {\n        responseType: responseType,\n        progressCallback: progressCallback\n      });\n    }\n  }, {\n    key: \"_httpGetApplicationJson\",\n    value: function _httpGetApplicationJson(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var progressCallback = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n\n      var headers = {\n        'Accept': MIMETYPES.DICOM_JSON\n      };\n      var responseType = 'json';\n      return this._httpGet(url, headers, responseType, progressCallback);\n    }\n  }, {\n    key: \"_httpGetByMimeType\",\n    value: function _httpGetByMimeType(url, mimeType, params) {\n      var responseType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'arraybuffer';\n      var progressCallback = arguments.length > 4 ? arguments[4] : undefined;\n\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n\n      var headers = {\n        'Accept': \"multipart/related; type=\\\"\".concat(mimeType, \"\\\"\")\n      };\n      return this._httpGet(url, headers, responseType, progressCallback);\n    }\n  }, {\n    key: \"_httpPost\",\n    value: function _httpPost(url, headers, data, progressCallback) {\n      return this._httpRequest(url, 'post', headers, {\n        data: data,\n        progressCallback: progressCallback\n      });\n    }\n  }, {\n    key: \"_httpPostApplicationJson\",\n    value: function _httpPostApplicationJson(url, data, progressCallback) {\n      var headers = {\n        'Content-Type': MIMETYPES.DICOM_JSON\n      };\n      return this._httpPost(url, headers, data, progressCallback);\n    }\n    /**\n     * Searches for DICOM studies.\n     * @param {Object} options options object\n     * @return {Array} study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n     */\n\n  }, {\n    key: \"searchForStudies\",\n    value: function searchForStudies() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      console.log('search for studies');\n      var url = this.qidoURL + '/studies';\n\n      if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n      }\n\n      return this._httpGetApplicationJson(url);\n    }\n    /**\n     * Retrieves metadata for a DICOM study.\n     * @param {Object} options options object\n     * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the study\n     */\n\n  }, {\n    key: \"retrieveStudyMetadata\",\n    value: function retrieveStudyMetadata(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of study metadata');\n      }\n\n      console.log(\"retrieve metadata of study \".concat(options.studyInstanceUID));\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/metadata';\n      return this._httpGetApplicationJson(url);\n    }\n    /**\n     * Searches for DICOM series.\n     * @param {Object} options options object\n     * @returns {Array} series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n     */\n\n  }, {\n    key: \"searchForSeries\",\n    value: function searchForSeries() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var url = this.qidoURL;\n\n      if ('studyInstanceUID' in options) {\n        console.log(\"search series of study \".concat(options.studyInstanceUID));\n        url += '/studies/' + options.studyInstanceUID;\n      }\n\n      url += '/series';\n\n      if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n      }\n\n      return this._httpGetApplicationJson(url);\n    }\n    /**\n     * Retrieves metadata for a DICOM series.\n     * @param {Object} options options object\n     * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the series\n     */\n\n  }, {\n    key: \"retrieveSeriesMetadata\",\n    value: function retrieveSeriesMetadata(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of series metadata');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of series metadata');\n      }\n\n      console.log(\"retrieve metadata of series \".concat(options.seriesInstanceUID));\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/metadata';\n      return this._httpGetApplicationJson(url);\n    }\n    /**\n     * Searches for DICOM instances.\n     * @param {Object} options options object\n     * @returns {Array} instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n     */\n\n  }, {\n    key: \"searchForInstances\",\n    value: function searchForInstances() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var url = this.qidoURL;\n\n      if ('studyInstanceUID' in options) {\n        url += '/studies/' + options.studyInstanceUID;\n\n        if ('seriesInstanceUID' in options) {\n          console.log(\"search for instances of series \".concat(options.seriesInstanceUID));\n          url += '/series/' + options.seriesInstanceUID;\n        } else {\n          console.log(\"search for instances of study \".concat(options.studyInstanceUID));\n        }\n      } else {\n        console.log('search for instances');\n      }\n\n      url += '/instances';\n\n      if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n      }\n\n      return this._httpGetApplicationJson(url);\n    }\n    /** Returns a WADO-URI URL for an instance\n     * @param {Object} options options object\n     * @returns {String} WADO-URI URL\n     */\n\n  }, {\n    key: \"buildInstanceWadoURIUrl\",\n    value: function buildInstanceWadoURIUrl(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required.');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required.');\n      }\n\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required.');\n      }\n\n      var contentType = options.contentType || MIMETYPES.DICOM;\n      var transferSyntax = options.transferSyntax || '*';\n      var params = [];\n      params.push('requestType=WADO');\n      params.push(\"studyUID=\".concat(options.studyInstanceUID));\n      params.push(\"seriesUID=\".concat(options.seriesInstanceUID));\n      params.push(\"objectUID=\".concat(options.sopInstanceUID));\n      params.push(\"contentType=\".concat(contentType));\n      params.push(\"transferSyntax=\".concat(transferSyntax));\n      var paramString = params.join('&');\n      return \"\".concat(this.wadoURL, \"?\").concat(paramString);\n    }\n    /**\n     * Retrieves metadata for a DICOM instance.\n     *\n     * @param {Object} options object\n     * @returns {Object} metadata elements in DICOM JSON format\n     */\n\n  }, {\n    key: \"retrieveInstanceMetadata\",\n    value: function retrieveInstanceMetadata(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of instance metadata');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of instance metadata');\n      }\n\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of instance metadata');\n      }\n\n      console.log(\"retrieve metadata of instance \".concat(options.sopInstanceUID));\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID + '/metadata';\n      return this._httpGetApplicationJson(url);\n    }\n    /**\n     * Retrieves frames for a DICOM instance.\n     * @param {Object} options options object\n     * @returns {Array} frame items as byte arrays of the pixel data element\n     */\n\n  }, {\n    key: \"retrieveInstanceFrames\",\n    value: function retrieveInstanceFrames(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of instance frames');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of instance frames');\n      }\n\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of instance frames');\n      }\n\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of instance frames');\n      }\n\n      console.log(\"retrieve frames \".concat(options.frameNumbers.toString(), \" of instance \").concat(options.sopInstanceUID));\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID + '/frames/' + options.frameNumbers.toString();\n      var mimeType = options.mimeType ? \"\".concat(options.mimeType) : MIMETYPES.OCTET_STREAM;\n      return this._httpGetByMimeType(url, mimeType).then(multipartDecode);\n    }\n    /**\n     * Retrieves rendered frames for a DICOM instance.\n     * @param {Object} options options object\n     * @returns {Array} frame items as byte arrays of the pixel data element\n     */\n\n  }, {\n    key: \"retrieveInstanceFramesRendered\",\n    value: function retrieveInstanceFramesRendered(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of rendered instance frames');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of rendered instance frames');\n      }\n\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of rendered instance frames');\n      }\n\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of rendered instance frames');\n      }\n\n      console.log(\"retrieve rendered frames \".concat(options.frameNumbers.toString(), \" of instance \").concat(options.sopInstanceUID));\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID + '/frames/' + options.frameNumbers.toString() + '/rendered';\n      var headers = {}; // The choice of an acceptable media type depends on a variety of things:\n      // http://dicom.nema.org/medical/dicom/current/output/chtml/part18/chapter_6.html#table_6.1.1-3\n\n      if ('mimeType' in options) {\n        headers['Accept'] = options.mimeType;\n      }\n\n      var responseType = 'arraybuffer';\n      return this._httpGet(url, headers, responseType);\n    }\n    /**\n     * Retrieves a DICOM instance.\n     * @param {Object} options options object\n     * @returns {Arraybuffer} DICOM Part 10 file as Arraybuffer\n     */\n\n  }, {\n    key: \"retrieveInstance\",\n    value: function retrieveInstance(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required');\n      }\n\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required');\n      }\n\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID + '/instances/' + options.sopInstanceUID;\n      return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode).then(getFirstResult);\n    }\n    /**\n     * Retrieves a set of DICOM instance for a series.\n     * @param {Object} options options object\n     * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n     */\n\n  }, {\n    key: \"retrieveSeries\",\n    value: function retrieveSeries(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required');\n      }\n\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required');\n      }\n\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID + '/series/' + options.seriesInstanceUID;\n      return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n    }\n    /**\n     * Retrieves a set of DICOM instance for a study.\n     * @param {Object} options options object\n     * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n     */\n\n  }, {\n    key: \"retrieveStudy\",\n    value: function retrieveStudy(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required');\n      }\n\n      var url = this.wadoURL + '/studies/' + options.studyInstanceUID;\n      return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n    }\n    /**\n     * Retrieves and parses BulkData from a BulkDataURI location.\n     * Decodes the multipart encoded data and returns the resulting data\n     * as an ArrayBuffer.\n     *\n     * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n     *\n     * @param {Object} options options object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"retrieveBulkData\",\n    value: function retrieveBulkData(options) {\n      if (!('BulkDataURI' in options)) {\n        throw new Error('BulkDataURI is required.');\n      }\n\n      return this._httpGetByMimeType(options.BulkDataURI, MIMETYPES.OCTET_STREAM).then(multipartDecode).then(getFirstResult);\n    }\n    /**\n     * Stores DICOM instances.\n     *\n     * @param {Object} options options object\n     */\n\n  }, {\n    key: \"storeInstances\",\n    value: function storeInstances(options) {\n      if (!('datasets' in options)) {\n        throw new Error('datasets are required for storing');\n      }\n\n      var url = \"\".concat(this.stowURL, \"/studies\");\n\n      if ('studyInstanceUID' in options) {\n        url += \"/\".concat(options.studyInstanceUID);\n      }\n\n      var _multipartEncode = multipartEncode(options.datasets),\n          data = _multipartEncode.data,\n          boundary = _multipartEncode.boundary;\n\n      var headers = {\n        'Content-Type': \"multipart/related; type=application/dicom; boundary=\".concat(boundary)\n      };\n      return this._httpPost(url, headers, data, options.progressCallback);\n    }\n  }], [{\n    key: \"_parseQueryParameters\",\n    value: function _parseQueryParameters() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var queryString = '?';\n      Object.keys(params).forEach(function (key, index) {\n        if (index !== 0) {\n          queryString += '&';\n        }\n\n        queryString += key + '=' + encodeURIComponent(params[key]);\n      });\n      return queryString;\n    }\n  }]);\n\n  return DICOMwebClient;\n}();\n\nvar api = {\n  DICOMwebClient: DICOMwebClient\n}; // TODO: Deprecate since we have the same thing in dcmjs?\n\nvar sopClassDictionary = {\n  ComputedRadiographyImageStorage: '1.2.840.10008.5.1.4.1.1.1',\n  DigitalXRayImageStorageForPresentation: '1.2.840.10008.5.1.4.1.1.1.1',\n  DigitalXRayImageStorageForProcessing: '1.2.840.10008.5.1.4.1.1.1.1.1',\n  DigitalMammographyXRayImageStorageForPresentation: '1.2.840.10008.5.1.4.1.1.1.2',\n  DigitalMammographyXRayImageStorageForProcessing: '1.2.840.10008.5.1.4.1.1.1.2.1',\n  DigitalIntraOralXRayImageStorageForPresentation: '1.2.840.10008.5.1.4.1.1.1.3',\n  DigitalIntraOralXRayImageStorageForProcessing: '1.2.840.10008.5.1.4.1.1.1.3.1',\n  CTImageStorage: '1.2.840.10008.5.1.4.1.1.2',\n  EnhancedCTImageStorage: '1.2.840.10008.5.1.4.1.1.2.1',\n  LegacyConvertedEnhancedCTImageStorage: '1.2.840.10008.5.1.4.1.1.2.2',\n  UltrasoundMultiframeImageStorage: '1.2.840.10008.5.1.4.1.1.3.1',\n  MRImageStorage: '1.2.840.10008.5.1.4.1.1.4',\n  EnhancedMRImageStorage: '1.2.840.10008.5.1.4.1.1.4.1',\n  MRSpectroscopyStorage: '1.2.840.10008.5.1.4.1.1.4.2',\n  EnhancedMRColorImageStorage: '1.2.840.10008.5.1.4.1.1.4.3',\n  LegacyConvertedEnhancedMRImageStorage: '1.2.840.10008.5.1.4.1.1.4.4',\n  UltrasoundImageStorage: '1.2.840.10008.5.1.4.1.1.6.1',\n  EnhancedUSVolumeStorage: '1.2.840.10008.5.1.4.1.1.6.2',\n  SecondaryCaptureImageStorage: '1.2.840.10008.5.1.4.1.1.7',\n  MultiframeSingleBitSecondaryCaptureImageStorage: '1.2.840.10008.5.1.4.1.1.7.1',\n  MultiframeGrayscaleByteSecondaryCaptureImageStorage: '1.2.840.10008.5.1.4.1.1.7.2',\n  MultiframeGrayscaleWordSecondaryCaptureImageStorage: '1.2.840.10008.5.1.4.1.1.7.3',\n  MultiframeTrueColorSecondaryCaptureImageStorage: '1.2.840.10008.5.1.4.1.1.7.4',\n  Sop12LeadECGWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.1.1',\n  GeneralECGWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.1.2',\n  AmbulatoryECGWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.1.3',\n  HemodynamicWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.2.1',\n  CardiacElectrophysiologyWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.3.1',\n  BasicVoiceAudioWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.4.1',\n  GeneralAudioWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.4.2',\n  ArterialPulseWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.5.1',\n  RespiratoryWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.6.1',\n  GrayscaleSoftcopyPresentationStateStorage: '1.2.840.10008.5.1.4.1.1.11.1',\n  ColorSoftcopyPresentationStateStorage: '1.2.840.10008.5.1.4.1.1.11.2',\n  PseudoColorSoftcopyPresentationStateStorage: '1.2.840.10008.5.1.4.1.1.11.3',\n  BlendingSoftcopyPresentationStateStorage: '1.2.840.10008.5.1.4.1.1.11.4',\n  XAXRFGrayscaleSoftcopyPresentationStateStorage: '1.2.840.10008.5.1.4.1.1.11.5',\n  XRayAngiographicImageStorage: '1.2.840.10008.5.1.4.1.1.12.1',\n  EnhancedXAImageStorage: '1.2.840.10008.5.1.4.1.1.12.1.1',\n  XRayRadiofluoroscopicImageStorage: '1.2.840.10008.5.1.4.1.1.12.2',\n  EnhancedXRFImageStorage: '1.2.840.10008.5.1.4.1.1.12.2.1',\n  XRay3DAngiographicImageStorage: '1.2.840.10008.5.1.4.1.1.13.1.1',\n  XRay3DCraniofacialImageStorage: '1.2.840.10008.5.1.4.1.1.13.1.2',\n  BreastTomosynthesisImageStorage: '1.2.840.10008.5.1.4.1.1.13.1.3',\n  BreastProjectionXRayImageStorageForPresentation: '1.2.840.10008.5.1.4.1.1.13.1.4',\n  BreastProjectionXRayImageStorageForProcessing: '1.2.840.10008.5.1.4.1.1.13.1.5',\n  IntravascularOpticalCoherenceTomographyImageStorageForPresentation: '1.2.840.10008.5.1.4.1.1.14.1',\n  IntravascularOpticalCoherenceTomographyImageStorageForProcessing: '1.2.840.10008.5.1.4.1.1.14.2',\n  NuclearMedicineImageStorage: '1.2.840.10008.5.1.4.1.1.20',\n  RawDataStorage: '1.2.840.10008.5.1.4.1.1.66',\n  SpatialRegistrationStorage: '1.2.840.10008.5.1.4.1.1.66.1',\n  SpatialFiducialsStorage: '1.2.840.10008.5.1.4.1.1.66.2',\n  DeformableSpatialRegistrationStorage: '1.2.840.10008.5.1.4.1.1.66.3',\n  SegmentationStorage: '1.2.840.10008.5.1.4.1.1.66.4',\n  SurfaceSegmentationStorage: '1.2.840.10008.5.1.4.1.1.66.5',\n  RealWorldValueMappingStorage: '1.2.840.10008.5.1.4.1.1.67',\n  SurfaceScanMeshStorage: '1.2.840.10008.5.1.4.1.1.68.1',\n  SurfaceScanPointCloudStorage: '1.2.840.10008.5.1.4.1.1.68.2',\n  VLEndoscopicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.1',\n  VideoEndoscopicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.1.1',\n  VLMicroscopicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.2',\n  VideoMicroscopicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.2.1',\n  VLSlideCoordinatesMicroscopicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.3',\n  VLPhotographicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.4',\n  VideoPhotographicImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.4.1',\n  OphthalmicPhotography8BitImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.5.1',\n  OphthalmicPhotography16BitImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.5.2',\n  StereometricRelationshipStorage: '1.2.840.10008.5.1.4.1.1.77.1.5.3',\n  OphthalmicTomographyImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.5.4',\n  VLWholeSlideMicroscopyImageStorage: '1.2.840.10008.5.1.4.1.1.77.1.6',\n  LensometryMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.78.1',\n  AutorefractionMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.78.2',\n  KeratometryMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.78.3',\n  SubjectiveRefractionMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.78.4',\n  VisualAcuityMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.78.5',\n  SpectaclePrescriptionReportStorage: '1.2.840.10008.5.1.4.1.1.78.6',\n  OphthalmicAxialMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.78.7',\n  IntraocularLensCalculationsStorage: '1.2.840.10008.5.1.4.1.1.78.8',\n  MacularGridThicknessandVolumeReport: '1.2.840.10008.5.1.4.1.1.79.1',\n  OphthalmicVisualFieldStaticPerimetryMeasurementsStorage: '1.2.840.10008.5.1.4.1.1.80.1',\n  OphthalmicThicknessMapStorage: '1.2.840.10008.5.1.4.1.1.81.1',\n  CornealTopographyMapStorage: '1.2.840.10008.5.1.4.1.1.82.1',\n  BasicTextSR: '1.2.840.10008.5.1.4.1.1.88.11',\n  EnhancedSR: '1.2.840.10008.5.1.4.1.1.88.22',\n  ComprehensiveSR: '1.2.840.10008.5.1.4.1.1.88.33',\n  Comprehensive3DSR: '1.2.840.10008.5.1.4.1.1.88.34',\n  ProcedureLog: '1.2.840.10008.5.1.4.1.1.88.40',\n  MammographyCADSR: '1.2.840.10008.5.1.4.1.1.88.50',\n  KeyObjectSelection: '1.2.840.10008.5.1.4.1.1.88.59',\n  ChestCADSR: '1.2.840.10008.5.1.4.1.1.88.65',\n  XRayRadiationDoseSR: '1.2.840.10008.5.1.4.1.1.88.67',\n  RadiopharmaceuticalRadiationDoseSR: '1.2.840.10008.5.1.4.1.1.88.68',\n  ColonCADSR: '1.2.840.10008.5.1.4.1.1.88.69',\n  ImplantationPlanSRDocumentStorage: '1.2.840.10008.5.1.4.1.1.88.70',\n  EncapsulatedPDFStorage: '1.2.840.10008.5.1.4.1.1.104.1',\n  EncapsulatedCDAStorage: '1.2.840.10008.5.1.4.1.1.104.2',\n  PositronEmissionTomographyImageStorage: '1.2.840.10008.5.1.4.1.1.128',\n  EnhancedPETImageStorage: '1.2.840.10008.5.1.4.1.1.130',\n  LegacyConvertedEnhancedPETImageStorage: '1.2.840.10008.5.1.4.1.1.128.1',\n  BasicStructuredDisplayStorage: '1.2.840.10008.5.1.4.1.1.131',\n  RTImageStorage: '1.2.840.10008.5.1.4.1.1.481.1',\n  RTDoseStorage: '1.2.840.10008.5.1.4.1.1.481.2',\n  RTStructureSetStorage: '1.2.840.10008.5.1.4.1.1.481.3',\n  RTBeamsTreatmentRecordStorage: '1.2.840.10008.5.1.4.1.1.481.4',\n  RTPlanStorage: '1.2.840.10008.5.1.4.1.1.481.5',\n  RTBrachyTreatmentRecordStorage: '1.2.840.10008.5.1.4.1.1.481.6',\n  RTTreatmentSummaryRecordStorage: '1.2.840.10008.5.1.4.1.1.481.7',\n  RTIonPlanStorage: '1.2.840.10008.5.1.4.1.1.481.8',\n  RTIonBeamsTreatmentRecordStorage: '1.2.840.10008.5.1.4.1.1.481.9',\n  RTBeamsDeliveryInstructionStorage: '1.2.840.10008.5.1.4.34.7',\n  GenericImplantTemplateStorage: '1.2.840.10008.5.1.4.43.1',\n  ImplantAssemblyTemplateStorage: '1.2.840.10008.5.1.4.44.1',\n  ImplantTemplateGroupStorage: '1.2.840.10008.5.1.4.45.1'\n};\n/**\n * Checks whether dicom files with specified SOP Class UID have image data\n * @param {string} sopClassUid - SOP Class UID to be checked\n * @returns {boolean} - true if it has image data\n */\n\nfunction isImage(sopClassUid) {\n  if (sopClassUid === sopClassDictionary.ComputedRadiographyImageStorage || sopClassUid === sopClassDictionary.DigitalXRayImageStorageForPresentation || sopClassUid === sopClassDictionary.DigitalXRayImageStorageForProcessing || sopClassUid === sopClassDictionary.DigitalMammographyXRayImageStorageForPresentation || sopClassUid === sopClassDictionary.DigitalMammographyXRayImageStorageForProcessing || sopClassUid === sopClassDictionary.DigitalIntraOralXRayImageStorageForPresentation || sopClassUid === sopClassDictionary.DigitalIntraOralXRayImageStorageForProcessing || sopClassUid === sopClassDictionary.CTImageStorage || sopClassUid === sopClassDictionary.EnhancedCTImageStorage || sopClassUid === sopClassDictionary.LegacyConvertedEnhancedCTImageStorage || sopClassUid === sopClassDictionary.UltrasoundMultiframeImageStorage || sopClassUid === sopClassDictionary.MRImageStorage || sopClassUid === sopClassDictionary.EnhancedMRImageStorage || sopClassUid === sopClassDictionary.EnhancedMRColorImageStorage || sopClassUid === sopClassDictionary.LegacyConvertedEnhancedMRImageStorage || sopClassUid === sopClassDictionary.UltrasoundImageStorage || sopClassUid === sopClassDictionary.SecondaryCaptureImageStorage || sopClassUid === sopClassDictionary.MultiframeSingleBitSecondaryCaptureImageStorage || sopClassUid === sopClassDictionary.MultiframeGrayscaleByteSecondaryCaptureImageStorage || sopClassUid === sopClassDictionary.MultiframeGrayscaleWordSecondaryCaptureImageStorage || sopClassUid === sopClassDictionary.MultiframeTrueColorSecondaryCaptureImageStorage || sopClassUid === sopClassDictionary.XRayAngiographicImageStorage || sopClassUid === sopClassDictionary.EnhancedXAImageStorage || sopClassUid === sopClassDictionary.XRayRadiofluoroscopicImageStorage || sopClassUid === sopClassDictionary.EnhancedXRFImageStorage || sopClassUid === sopClassDictionary.XRay3DAngiographicImageStorage || sopClassUid === sopClassDictionary.XRay3DCraniofacialImageStorage || sopClassUid === sopClassDictionary.BreastTomosynthesisImageStorage || sopClassUid === sopClassDictionary.BreastProjectionXRayImageStorageForPresentation || sopClassUid === sopClassDictionary.BreastProjectionXRayImageStorageForProcessing || sopClassUid === sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForPresentation || sopClassUid === sopClassDictionary.IntravascularOpticalCoherenceTomographyImageStorageForProcessing || sopClassUid === sopClassDictionary.NuclearMedicineImageStorage || sopClassUid === sopClassDictionary.VLEndoscopicImageStorage || sopClassUid === sopClassDictionary.VideoEndoscopicImageStorage || sopClassUid === sopClassDictionary.VLMicroscopicImageStorage || sopClassUid === sopClassDictionary.VideoMicroscopicImageStorage || sopClassUid === sopClassDictionary.VLSlideCoordinatesMicroscopicImageStorage || sopClassUid === sopClassDictionary.VLPhotographicImageStorage || sopClassUid === sopClassDictionary.VideoPhotographicImageStorage || sopClassUid === sopClassDictionary.OphthalmicPhotography8BitImageStorage || sopClassUid === sopClassDictionary.OphthalmicPhotography16BitImageStorage || sopClassUid === sopClassDictionary.OphthalmicTomographyImageStorage || sopClassUid === sopClassDictionary.VLWholeSlideMicroscopyImageStorage || sopClassUid === sopClassDictionary.PositronEmissionTomographyImageStorage || sopClassUid === sopClassDictionary.EnhancedPETImageStorage || sopClassUid === sopClassDictionary.LegacyConvertedEnhancedPETImageStorage || sopClassUid === sopClassDictionary.RTImageStorage) {\n    return true;\n  }\n\n  return false;\n}\n\nvar StudyMetadata =\n/*#__PURE__*/\nfunction (_Metadata) {\n  inherits(StudyMetadata, _Metadata);\n\n  function StudyMetadata(data, uid) {\n    var _this;\n\n    classCallCheck(this, StudyMetadata);\n    _this = possibleConstructorReturn(this, getPrototypeOf(StudyMetadata).call(this, data, uid)); // Initialize Private Properties\n\n    Object.defineProperties(assertThisInitialized(assertThisInitialized(_this)), {\n      _studyInstanceUID: {\n        configurable: true,\n        // configurable so that it can be redefined in sub-classes...\n        enumerable: false,\n        writable: true,\n        value: null\n      },\n      _series: {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: []\n      },\n      _displaySets: {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: []\n      },\n      _firstSeries: {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: null\n      },\n      _firstInstance: {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: null\n      }\n    }); // Initialize Public Properties\n\n    _this._definePublicProperties();\n\n    return _this;\n  }\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Define Public Properties\n   * This method should only be called during initialization (inside the class constructor)\n   */\n\n\n  createClass(StudyMetadata, [{\n    key: \"_definePublicProperties\",\n    value: function _definePublicProperties() {\n      /**\n       * Property: this.studyInstanceUID\n       * Same as this.getStudyInstanceUID()\n       * It's specially useful in contexts where a method call is not suitable like in search criteria. For example:\n       * studyCollection.findBy({\n       *   studyInstanceUID: '1.2.3.4.5.6.77777.8888888.99999999999.0'\n       * });\n       */\n      Object.defineProperty(this, 'studyInstanceUID', {\n        configurable: false,\n        enumerable: false,\n        get: function get() {\n          return this.getStudyInstanceUID();\n        }\n      });\n    }\n    /**\n     * Public Methods\n     */\n\n    /**\n     * Getter for displaySets\n     * @return {Array} Array of display set object\n     */\n\n  }, {\n    key: \"getDisplaySets\",\n    value: function getDisplaySets() {\n      return this._displaySets.slice();\n    }\n    /**\n     * Creates a set of series to be placed in the Study Metadata\n     * The series that appear in the Study Metadata must represent\n     * imaging modalities.\n     *\n     * Furthermore, for drag/drop functionality,\n     * it is easiest if the stack objects also contain information about\n     * which study they are linked to.\n     *\n     * @param {StudyMetadata} study The study instance metadata to be used\n     * @returns {Array} An array of series to be placed in the Study Metadata\n     */\n\n  }, {\n    key: \"createDisplaySets\",\n    value: function createDisplaySets(sopClassHandlerModules) {\n      var study = this;\n      var displaySets = [];\n      var anyDisplaySets = study.getSeriesCount();\n      var anySopClassHandlerModules = sopClassHandlerModules && sopClassHandlerModules.length > 0;\n\n      if (!anyDisplaySets) {\n        return displaySets;\n      } // Loop through the series (SeriesMetadata)\n\n\n      this.forEachSeries(function (series) {\n        var anyInstances = series.getInstanceCount() > 0;\n\n        if (!anyInstances) {\n          return;\n        }\n\n        var sopClassUids = getSopClassUids(series);\n\n        if (anySopClassHandlerModules) {\n          var displaySet = _getDisplaySetFromSopClassModule(sopClassHandlerModules, series, study, sopClassUids);\n\n          if (displaySet) {\n            displaySets.push(displaySet);\n            return;\n          }\n        } // WE NEED A BETTER WAY TO NOTE THAT THIS IS THE DEFAULT BEHAVIOR FOR LOADING\n        // A DISPLAY SET IF THERE IS NO MATCHING SOP CLASS PLUGIN\n        // Search through the instances (InstanceMetadata object) of this series\n        // Split Multi-frame instances and Single-image modalities\n        // into their own specific display sets. Place the rest of each\n        // series into another display set.\n\n\n        var stackableInstances = [];\n        series.forEachInstance(function (instance) {\n          // All imaging modalities must have a valid value for sopClassUid (x00080016) or rows (x00280010)\n          if (!isImage(instance.getRawValue('x00080016')) && !instance.getRawValue('x00280010')) {\n            return;\n          }\n\n          var displaySet;\n\n          if (isMultiFrame(instance)) {\n            displaySet = makeDisplaySet(series, [instance]);\n            displaySet.setAttributes({\n              sopClassUids: sopClassUids,\n              isClip: true,\n              seriesInstanceUid: series.getSeriesInstanceUID(),\n              studyInstanceUid: study.getStudyInstanceUID(),\n              // Include the study instance Uid for drag/drop purposes\n              numImageFrames: instance.getRawValue('x00280008'),\n              // Override the default value of instances.length\n              instanceNumber: instance.getRawValue('x00200013'),\n              // Include the instance number\n              acquisitionDatetime: instance.getRawValue('x0008002a') // Include the acquisition datetime\n\n            });\n            displaySets.push(displaySet);\n          } else if (isSingleImageModality(instance.modality)) {\n            displaySet = makeDisplaySet(series, [instance]);\n            displaySet.setAttributes({\n              sopClassUids: sopClassUids,\n              studyInstanceUid: study.getStudyInstanceUID(),\n              // Include the study instance Uid\n              seriesInstanceUid: series.getSeriesInstanceUID(),\n              instanceNumber: instance.getRawValue('x00200013'),\n              // Include the instance number\n              acquisitionDatetime: instance.getRawValue('x0008002a') // Include the acquisition datetime\n\n            });\n            displaySets.push(displaySet);\n          } else {\n            stackableInstances.push(instance);\n          }\n        });\n\n        if (stackableInstances.length) {\n          var _displaySet = makeDisplaySet(series, stackableInstances);\n\n          _displaySet.setAttribute('studyInstanceUid', study.getStudyInstanceUID());\n\n          _displaySet.setAttributes({\n            sopClassUids: sopClassUids\n          });\n\n          displaySets.push(_displaySet);\n        }\n      }); // TODO\n\n      displaySets.sort(_sortBySeriesNumber);\n      return displaySets;\n    }\n    /**\n     * Set display sets\n     * @param {Array} displaySets Array of display sets (ImageSet[])\n     */\n\n  }, {\n    key: \"setDisplaySets\",\n    value: function setDisplaySets(displaySets) {\n      var _this2 = this;\n\n      displaySets.forEach(function (displaySet) {\n        return _this2.addDisplaySet(displaySet);\n      });\n    }\n    /**\n     * Add a single display set to the list\n     * @param {Object} displaySet Display set object\n     * @returns {boolean} True on success, false on failure.\n     */\n\n  }, {\n    key: \"addDisplaySet\",\n    value: function addDisplaySet(displaySet) {\n      if (displaySet instanceof ImageSet) {\n        this._displaySets.push(displaySet);\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Invokes the supplied callback for each display set in the current study passing\n     * two arguments: display set (a ImageSet instance) and index (the integer\n     * index of the display set within the current study)\n     * @param {function} callback The callback function which will be invoked for each display set instance.\n     * @returns {undefined} Nothing is returned.\n     */\n\n  }, {\n    key: \"forEachDisplaySet\",\n    value: function forEachDisplaySet(callback) {\n      if (Metadata.isValidCallback(callback)) {\n        this._displaySets.forEach(function (displaySet, index) {\n          callback.call(null, displaySet, index);\n        });\n      }\n    }\n    /**\n     * Search the associated display sets using the supplied callback as criteria. The callback is passed\n     * two arguments: display set (an ImageSet instance) and index (the integer\n     * index of the display set within the current study)\n     * @param {function} callback The callback function which will be invoked for each display set instance.\n     * @returns {undefined} Nothing is returned.\n     */\n\n  }, {\n    key: \"findDisplaySet\",\n    value: function findDisplaySet(callback) {\n      if (Metadata.isValidCallback(callback)) {\n        return this._displaySets.find(function (displaySet, index) {\n          return callback.call(null, displaySet, index);\n        });\n      }\n    }\n    /**\n     * Retrieve the number of display sets within the current study.\n     * @returns {number} The number of display sets in the current study.\n     */\n\n  }, {\n    key: \"getDisplaySetCount\",\n    value: function getDisplaySetCount() {\n      return this._displaySets.length;\n    }\n    /**\n     * Returns the StudyInstanceUID of the current study.\n     */\n\n  }, {\n    key: \"getStudyInstanceUID\",\n    value: function getStudyInstanceUID() {\n      return this._studyInstanceUID;\n    }\n    /**\n     * Getter for series\n     * @return {Array} Array of SeriesMetadata object\n     */\n\n  }, {\n    key: \"getSeries\",\n    value: function getSeries() {\n      return this._series.slice();\n    }\n    /**\n     * Append a series to the current study.\n     * @param {SeriesMetadata} series The series to be added to the current study.\n     * @returns {boolean} Returns true on success, false otherwise.\n     */\n\n  }, {\n    key: \"addSeries\",\n    value: function addSeries(series) {\n      var result = false;\n\n      if (series instanceof SeriesMetadata && this.getSeriesByUID(series.getSeriesInstanceUID()) === void 0) {\n        this._series.push(series);\n\n        result = true;\n      }\n\n      return result;\n    }\n    /**\n     * Find a series by index.\n     * @param {number} index An integer representing a list index.\n     * @returns {SeriesMetadata} Returns a SeriesMetadata instance when found or undefined otherwise.\n     */\n\n  }, {\n    key: \"getSeriesByIndex\",\n    value: function getSeriesByIndex(index) {\n      var found; // undefined by default...\n\n      if (Metadata.isValidIndex(index)) {\n        found = this._series[index];\n      }\n\n      return found;\n    }\n    /**\n     * Find a series by SeriesInstanceUID.\n     * @param {string} uid An UID string.\n     * @returns {SeriesMetadata} Returns a SeriesMetadata instance when found or undefined otherwise.\n     */\n\n  }, {\n    key: \"getSeriesByUID\",\n    value: function getSeriesByUID(uid) {\n      var found; // undefined by default...\n\n      if (Metadata.isValidUID(uid)) {\n        found = this._series.find(function (series) {\n          return series.getSeriesInstanceUID() === uid;\n        });\n      }\n\n      return found;\n    }\n    /**\n     * Retrieve the number of series within the current study.\n     * @returns {number} The number of series in the current study.\n     */\n\n  }, {\n    key: \"getSeriesCount\",\n    value: function getSeriesCount() {\n      return this._series.length;\n    }\n    /**\n     * Retrieve the number of instances within the current study.\n     * @returns {number} The number of instances in the current study.\n     */\n\n  }, {\n    key: \"getInstanceCount\",\n    value: function getInstanceCount() {\n      return this._series.reduce(function (sum, series) {\n        return sum + series.getInstanceCount();\n      }, 0);\n    }\n    /**\n     * Invokes the supplied callback for each series in the current study passing\n     * two arguments: series (a SeriesMetadata instance) and index (the integer\n     * index of the series within the current study)\n     * @param {function} callback The callback function which will be invoked for each series instance.\n     * @returns {undefined} Nothing is returned.\n     */\n\n  }, {\n    key: \"forEachSeries\",\n    value: function forEachSeries(callback) {\n      if (Metadata.isValidCallback(callback)) {\n        this._series.forEach(function (series, index) {\n          callback.call(null, series, index);\n        });\n      }\n    }\n    /**\n     * Find the index of a series inside the study.\n     * @param {SeriesMetadata} series An instance of the SeriesMetadata class.\n     * @returns {number} The index of the series inside the study or -1 if not found.\n     */\n\n  }, {\n    key: \"indexOfSeries\",\n    value: function indexOfSeries(series) {\n      return this._series.indexOf(series);\n    }\n    /**\n     * It sorts the series based on display sets order. Each series must be an instance\n     * of SeriesMetadata and each display sets must be an instance of ImageSet.\n     * Useful example of usage:\n     *     Study data provided by backend does not sort series at all and client-side\n     *     needs series sorted by the same criteria used for sorting display sets.\n     */\n\n  }, {\n    key: \"sortSeriesByDisplaySets\",\n    value: function sortSeriesByDisplaySets() {\n      var _this3 = this; // Object for mapping display sets' index by seriesInstanceUid\n\n\n      var displaySetsMapping = {}; // Loop through each display set to create the mapping\n\n      this.forEachDisplaySet(function (displaySet, index) {\n        if (!(displaySet instanceof ImageSet)) {\n          throw new OHIFError(\"StudyMetadata::sortSeriesByDisplaySets display set at index \".concat(index, \" is not an instance of ImageSet\"));\n        } // In case of multiframe studies, just get the first index occurence\n\n\n        if (displaySetsMapping[displaySet.seriesInstanceUid] === void 0) {\n          displaySetsMapping[displaySet.seriesInstanceUid] = index;\n        }\n      }); // Clone of actual series\n\n      var actualSeries = this.getSeries();\n      actualSeries.forEach(function (series, index) {\n        if (!(series instanceof SeriesMetadata)) {\n          throw new OHIFError(\"StudyMetadata::sortSeriesByDisplaySets series at index \".concat(index, \" is not an instance of SeriesMetadata\"));\n        } // Get the new series index\n\n\n        var seriesIndex = displaySetsMapping[series.getSeriesInstanceUID()]; // Update the series object with the new series position\n\n        _this3._series[seriesIndex] = series;\n      });\n    }\n    /**\n     * Compares the current study instance with another one.\n     * @param {StudyMetadata} study An instance of the StudyMetadata class.\n     * @returns {boolean} Returns true if both instances refer to the same study.\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(study) {\n      var self = this;\n      return study === self || study instanceof StudyMetadata && study.getStudyInstanceUID() === self.getStudyInstanceUID();\n    }\n    /**\n     * Get the first series of the current study retaining a consistent result across multiple calls.\n     * @return {SeriesMetadata} An instance of the SeriesMetadata class or null if it does not exist.\n     */\n\n  }, {\n    key: \"getFirstSeries\",\n    value: function getFirstSeries() {\n      var series = this._firstSeries;\n\n      if (!(series instanceof SeriesMetadata)) {\n        series = null;\n        var found = this.getSeriesByIndex(0);\n\n        if (found instanceof SeriesMetadata) {\n          this._firstSeries = found;\n          series = found;\n        }\n      }\n\n      return series;\n    }\n    /**\n     * Get the first instance of the current study retaining a consistent result across multiple calls.\n     * @return {InstanceMetadata} An instance of the InstanceMetadata class or null if it does not exist.\n     */\n\n  }, {\n    key: \"getFirstInstance\",\n    value: function getFirstInstance() {\n      var instance = this._firstInstance;\n\n      if (!(instance instanceof InstanceMetadata)) {\n        instance = null;\n        var firstSeries = this.getFirstSeries();\n\n        if (firstSeries instanceof SeriesMetadata) {\n          var found = firstSeries.getFirstInstance();\n\n          if (found instanceof InstanceMetadata) {\n            this._firstInstance = found;\n            instance = found;\n          }\n        }\n      }\n\n      return instance;\n    }\n    /**\n     * Search the associated series to find an specific instance using the supplied callback as criteria.\n     * The callback is passed two arguments: instance (a InstanceMetadata instance) and index (the integer\n     * index of the instance within the current series)\n     * @param {function} callback The callback function which will be invoked for each instance instance.\n     * @returns {Object} Result object containing series (SeriesMetadata) and instance (InstanceMetadata)\n     *                   objects or an empty object if not found.\n     */\n\n  }, {\n    key: \"findSeriesAndInstanceByInstance\",\n    value: function findSeriesAndInstanceByInstance(callback) {\n      var result;\n\n      if (Metadata.isValidCallback(callback)) {\n        var instance;\n\n        var series = this._series.find(function (series) {\n          instance = series.findInstance(callback);\n          return instance instanceof InstanceMetadata;\n        }); // No series found\n\n\n        if (series instanceof SeriesMetadata) {\n          result = {\n            series: series,\n            instance: instance\n          };\n        }\n      }\n\n      return result || {};\n    }\n    /**\n     * Find series by instance using the supplied callback as criteria. The callback is passed\n     * two arguments: instance (a InstanceMetadata instance) and index (the integer index of\n     * the instance within its series)\n     * @param {function} callback The callback function which will be invoked for each instance.\n     * @returns {SeriesMetadata|undefined} If a series is found based on callback criteria it\n     *                                     returns a SeriesMetadata. \"undefined\" is returned otherwise\n     */\n\n  }, {\n    key: \"findSeriesByInstance\",\n    value: function findSeriesByInstance(callback) {\n      var result = this.findSeriesAndInstanceByInstance(callback);\n      return result.series;\n    }\n    /**\n     * Find an instance using the supplied callback as criteria. The callback is passed\n     * two arguments: instance (a InstanceMetadata instance) and index (the integer index of\n     * the instance within its series)\n     * @param {function} callback The callback function which will be invoked for each instance.\n     * @returns {InstanceMetadata|undefined} If an instance is found based on callback criteria it\n     *                                     returns a InstanceMetadata. \"undefined\" is returned otherwise\n     */\n\n  }, {\n    key: \"findInstance\",\n    value: function findInstance(callback) {\n      var result = this.findSeriesAndInstanceByInstance(callback);\n      return result.instance;\n    }\n  }]);\n  return StudyMetadata;\n}(Metadata);\n/**\n *\n * @typedef StudyMetadata\n * @property {function} getSeriesCount - returns the number of series in the study\n * @property {function} forEachSeries - function that invokes callback with each series and index\n * @property {function} getStudyInstanceUID - returns the study's instance UID\n *\n */\n\n/**\n * @typedef SeriesMetadata\n * @property {function} getSeriesInstanceUID - returns the series's instance UID\n * @property {function} getData - ???\n * @property {function} forEachInstance - ???\n */\n\n\nvar dwc = api.DICOMwebClient;\n\nvar isMultiFrame = function isMultiFrame(instance) {\n  // NumberOfFrames (0028,0008)\n  return instance.getRawValue('x00280008') > 1;\n};\n\nvar makeDisplaySet = function makeDisplaySet(series, instances) {\n  var instance = instances[0];\n  var imageSet = new ImageSet(instances);\n  var seriesData = series.getData(); // set appropriate attributes to image set...\n\n  imageSet.setAttributes({\n    displaySetInstanceUid: imageSet.uid,\n    // create a local alias for the imageSet UID\n    seriesDate: seriesData.seriesDate,\n    seriesTime: seriesData.seriesTime,\n    seriesInstanceUid: series.getSeriesInstanceUID(),\n    seriesNumber: instance.getRawValue('x00200011'),\n    seriesDescription: instance.getRawValue('x0008103e'),\n    numImageFrames: instances.length,\n    frameRate: instance.getRawValue('x00181063'),\n    modality: instance.getRawValue('x00080060'),\n    isMultiFrame: isMultiFrame(instance)\n  }); // Sort the images in this series if needed\n\n  {\n    imageSet.sortBy(function (a, b) {\n      // Sort by InstanceNumber (0020,0013)\n      return (parseInt(a.getRawValue('x00200013', 0)) || 0) - (parseInt(b.getRawValue('x00200013', 0)) || 0);\n    });\n  } // Include the first image instance number (after sorted)\n\n  imageSet.setAttribute('instanceNumber', imageSet.getImage(0).getRawValue('x00200013'));\n  return imageSet;\n};\n\nvar isSingleImageModality = function isSingleImageModality(modality) {\n  return modality === 'CR' || modality === 'MG' || modality === 'DX';\n};\n\nfunction getSopClassUids(series) {\n  var uniqueSopClassUidsInSeries = new Set();\n  series.forEachInstance(function (instance) {\n    var instanceSopClassUid = instance.getRawValue('x00080016');\n    uniqueSopClassUidsInSeries.add(instanceSopClassUid);\n  });\n  var sopClassUids = Array.from(uniqueSopClassUidsInSeries);\n  return sopClassUids;\n}\n/**\n * @private\n * @param {SeriesMetadata} series\n * @param {StudyMetadata} study\n * @param {string[]} sopClassUids\n */\n\n\nfunction _getDisplaySetFromSopClassModule(sopClassHandlerExtensions, // TODO: Update Usage\nseries, study, sopClassUids) {\n  // TODO: For now only use the plugins if all instances have the same sopClassUid\n  if (sopClassUids.length !== 1) {\n    console.warn('getDisplaySetFromSopClassPlugin: More than one SOPClassUid in the same series is not yet supported.');\n    return;\n  }\n\n  var sopClassUid = sopClassUids[0];\n  var sopClassHandlerModules = sopClassHandlerExtensions.map(function (extension) {\n    return extension.module;\n  });\n  var handlersForSopClassUid = sopClassHandlerModules.filter(function (module) {\n    return module.sopClassUids.includes(sopClassUid);\n  }); // TODO: Sort by something, so we can determine which plugin to use\n\n  if (!handlersForSopClassUid || !handlersForSopClassUid.length) {\n    return;\n  }\n\n  var plugin = handlersForSopClassUid[0];\n  var headers = DICOMWeb.getAuthorizationHeader();\n  var dicomWebClient = new dwc({\n    url: study.getData().wadoRoot,\n    headers: headers\n  });\n  return plugin.getDisplaySetFromSeries(series, study, dicomWebClient, headers);\n}\n/**\n *\n * @param {*} a - DisplaySet\n * @param {*} b - DisplaySet\n */\n\n\nfunction _sortBySeriesNumber(a, b) {\n  var seriesNumberAIsGreaterOrUndefined = a.seriesNumber > b.seriesNumber || !a.seriesNumber && b.seriesNumber;\n  return seriesNumberAIsGreaterOrUndefined ? 1 : -1;\n}\n\nvar OHIFStudyMetadata =\n/*#__PURE__*/\nfunction (_StudyMetadata) {\n  inherits(OHIFStudyMetadata, _StudyMetadata);\n  /**\n   * @param {Object} Study object.\n   */\n\n  function OHIFStudyMetadata(data, uid) {\n    var _this;\n\n    classCallCheck(this, OHIFStudyMetadata);\n    _this = possibleConstructorReturn(this, getPrototypeOf(OHIFStudyMetadata).call(this, data, uid));\n\n    _this.init();\n\n    return _this;\n  }\n\n  createClass(OHIFStudyMetadata, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      var study = this.getData(); // define \"_studyInstanceUID\" protected property\n\n      Object.defineProperty(this, '_studyInstanceUID', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: study.studyInstanceUid\n      }); // populate internal list of series\n\n      study.seriesList.forEach(function (series) {\n        _this2.addSeries(new OHIFSeriesMetadata(series, study));\n      });\n    }\n  }]);\n  return OHIFStudyMetadata;\n}(StudyMetadata);\n/**\n * Constants\n */\n\n\nvar STUDY_INSTANCE_UID$1 = 'x0020000d';\n/**\n * Class Definition\n */\n\nvar StudySummary =\n/*#__PURE__*/\nfunction (_Metadata) {\n  inherits(StudySummary, _Metadata);\n\n  function StudySummary(tagMap, attributeMap, uid) {\n    var _this;\n\n    classCallCheck(this, StudySummary); // Call the superclass constructor passing an plain object with no prototype to be used as the main \"_data\" attribute.\n\n    var _data = Object.create(null);\n\n    _this = possibleConstructorReturn(this, getPrototypeOf(StudySummary).call(this, _data, uid)); // Initialize internal tag map if first argument is given.\n\n    if (tagMap !== void 0) {\n      _this.addTags(tagMap);\n    } // Initialize internal property map if second argument is given.\n\n\n    if (attributeMap !== void 0) {\n      _this.setCustomAttributes(attributeMap);\n    }\n\n    return _this;\n  }\n\n  createClass(StudySummary, [{\n    key: \"getStudyInstanceUID\",\n    value: function getStudyInstanceUID() {\n      // This method should return null if StudyInstanceUID is not available to keep compatibility StudyMetadata API\n      return this.getTagValue(STUDY_INSTANCE_UID$1) || null;\n    }\n    /**\n     * Append tags to internal tag map.\n     * @param {Object} tagMap An object whose own properties will be used as tag values and appended to internal tag map.\n     */\n\n  }, {\n    key: \"addTags\",\n    value: function addTags(tagMap) {\n      var _hasOwn = Object.prototype.hasOwnProperty;\n      var _data = this._data;\n\n      for (var tag in tagMap) {\n        if (_hasOwn.call(tagMap, tag)) {\n          var description = DICOMTagDescriptions.find(tag); // When a description is available, use its tag as internal key...\n\n          if (description) {\n            _data[description.tag] = tagMap[tag];\n          } else {\n            _data[tag] = tagMap[tag];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"tagExists\",\n    value: function tagExists(tagName) {\n      var _data = this._data;\n      var description = DICOMTagDescriptions.find(tagName);\n\n      if (description) {\n        return description.tag in _data;\n      }\n\n      return tagName in _data;\n    }\n  }, {\n    key: \"getTagValue\",\n    value: function getTagValue(tagName) {\n      var _data = this._data;\n      var description = DICOMTagDescriptions.find(tagName);\n\n      if (description) {\n        return _data[description.tag];\n      }\n\n      return _data[tagName];\n    }\n  }]);\n  return StudySummary;\n}(Metadata);\n\nvar WadoRsMetaDataBuilder =\n/*#__PURE__*/\nfunction () {\n  function WadoRsMetaDataBuilder() {\n    classCallCheck(this, WadoRsMetaDataBuilder);\n    this.tags = {};\n  }\n\n  createClass(WadoRsMetaDataBuilder, [{\n    key: \"addTag\",\n    value: function addTag(tag, value, multi) {\n      this.tags[tag] = {\n        tag: tag,\n        value: value,\n        multi: multi\n      };\n      return this;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this = this;\n\n      var json = {};\n      var keys = Object.keys(this.tags);\n      keys.forEach(function (key) {\n        if (!_this.tags.hasOwnProperty(key)) {\n          return;\n        }\n\n        var tag = _this.tags[key];\n        var multi = !!tag.multi;\n        var value = tag.value;\n\n        if (value == null || value.length === 1 && value[0] == null) {\n          return;\n        }\n\n        if (typeof value === 'string' && multi) {\n          value = value.split('\\\\');\n        }\n\n        if (!Array.isArray(value)) {\n          value = [value];\n        }\n\n        json[key] = {\n          Value: value\n        };\n      });\n      return json;\n    }\n  }]);\n  return WadoRsMetaDataBuilder;\n}();\n\nvar metadata = {\n  Metadata: Metadata,\n  StudySummary: StudySummary,\n  WadoRsMetaDataBuilder: WadoRsMetaDataBuilder,\n  StudyMetadata: StudyMetadata,\n  SeriesMetadata: SeriesMetadata,\n  InstanceMetadata: InstanceMetadata,\n  OHIFStudyMetadata: OHIFStudyMetadata,\n  OHIFSeriesMetadata: OHIFSeriesMetadata,\n  OHIFInstanceMetadata: OHIFInstanceMetadata\n};\n/**\n * The definition of a command\n *\n * @typedef {Object} CommandDefinition\n * @property {Function} commandFn - Command to call\n * @property {Array} storeContexts - Array of string of modules required from store\n * @property {Object} options - Object of params to pass action\n */\n\n/**\n * The Commands Manager tracks named commands (or functions) that are scoped to\n * a context. When we attempt to run a command with a given name, we look for it\n * in our active contexts. If found, we run the command, passing in any application\n * or call specific data specified in the command's definition.\n *\n * NOTE: A more robust version of the CommandsManager lives in v1. If you're looking\n * to extend this class, please check it's source before adding new methods.\n */\n\nvar CommandsManager =\n/*#__PURE__*/\nfunction () {\n  function CommandsManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        getAppState = _ref.getAppState,\n        getActiveContexts = _ref.getActiveContexts;\n\n    classCallCheck(this, CommandsManager);\n    this.contexts = {};\n\n    if (!getAppState || !getActiveContexts) {\n      log$1.warn('CommandsManager was instantiated without getAppState() or getActiveContexts()');\n    }\n\n    this._getAppState = getAppState;\n    this._getActiveContexts = getActiveContexts;\n  }\n  /**\n   * Allows us to create commands \"per context\". An example would be the \"Cornerstone\"\n   * context having a `SaveImage` command, and the \"VTK\" context having a `SaveImage`\n   * command. The distinction of a context allows us to call the command in either\n   * context, and have faith that the correct command will be run.\n   *\n   * @method\n   * @param {string} contextName - Namespace for commands\n   * @returns {undefined}\n   */\n\n\n  createClass(CommandsManager, [{\n    key: \"createContext\",\n    value: function createContext(contextName) {\n      if (!contextName) {\n        return;\n      }\n\n      if (this.contexts[contextName]) {\n        return this.clearContext(contextName);\n      }\n\n      this.contexts[contextName] = {};\n    }\n    /**\n     * Returns all command definitions for a given context\n     *\n     * @method\n     * @param {string} contextName - Namespace for commands\n     * @returs {Object} - the matched context\n     */\n\n  }, {\n    key: \"getContext\",\n    value: function getContext(contextName) {\n      var context = this.contexts[contextName];\n\n      if (!context) {\n        return;\n      }\n\n      return context;\n    }\n    /**\n     * Clears all registered commands for a given context.\n     *\n     * @param {string} contextName - Namespace for commands\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"clearContext\",\n    value: function clearContext(contextName) {\n      if (!contextName) {\n        return;\n      }\n\n      this.contexts[contextName] = {};\n    }\n    /**\n     * Register a new command with the command manager. Scoped to a context, and\n     * with a definition to assist command callers w/ providing the necessary params\n     *\n     * @method\n     * @param {string} contextName - Namespace for command; often scoped to the extension that added it\n     * @param {string} commandName - Unique name identifying the command\n     * @param {CommandDefinition} definition - {@link CommandDefinition}\n     */\n\n  }, {\n    key: \"registerCommand\",\n    value: function registerCommand(contextName, commandName, definition) {\n      if (_typeof_1(definition) !== 'object') {\n        return;\n      }\n\n      var context = this.getContext(contextName);\n\n      if (!context) {\n        return;\n      }\n\n      context[commandName] = definition;\n    }\n    /**\n     * Finds a command with the provided name if it exists in the specified context,\n     * or a currently active context.\n     *\n     * @method\n     * @param {String} commandName - Command to find\n     * @param {String} [contextName] - Specific command to look in. Defaults to current activeContexts\n     */\n\n  }, {\n    key: \"getCommand\",\n    value: function getCommand(commandName, contextName) {\n      var _this = this;\n\n      var contexts = [];\n\n      if (contextName) {\n        var context = this.getContext(contextName);\n\n        if (context) {\n          contexts.push(context);\n        }\n      } else {\n        var activeContexts = this._getActiveContexts();\n\n        activeContexts.forEach(function (activeContext) {\n          var context = _this.getContext(activeContext);\n\n          if (context) {\n            contexts.push(context);\n          }\n        });\n      }\n\n      if (contexts.length === 0) {\n        return;\n      }\n\n      var foundCommand;\n      contexts.forEach(function (context) {\n        if (context[commandName]) {\n          foundCommand = context[commandName];\n        }\n      });\n      return foundCommand;\n    }\n    /**\n     *\n     * @method\n     * @param {String} commandName\n     * @param {Object} [options={}] - Extra options to pass the command. Like a mousedown event\n     * @param {String} [contextName]\n     */\n\n  }, {\n    key: \"runCommand\",\n    value: function runCommand(commandName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var contextName = arguments.length > 2 ? arguments[2] : undefined;\n      var definition = this.getCommand(commandName, contextName);\n\n      if (!definition) {\n        log$1.warn(\"Command \\\"\".concat(commandName, \"\\\" not found in current context\"));\n        return;\n      }\n\n      var commandFn = definition.commandFn,\n          storeContexts = definition.storeContexts;\n      var definitionOptions = definition.options;\n      var commandParams = {};\n\n      var appState = this._getAppState();\n\n      storeContexts.forEach(function (context) {\n        commandParams[context] = appState[context];\n      });\n      commandParams = Object.assign({}, commandParams, // Required store contexts\n      definitionOptions, // \"Command configuration\"\n      options // \"Time of call\" info\n      );\n\n      if (typeof commandFn !== 'function') {\n        log$1.warn(\"No commandFn was defined for command \\\"\".concat(commandName, \"\\\"\"));\n        return;\n      } else {\n        return commandFn(commandParams);\n      }\n    }\n  }]);\n  return CommandsManager;\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defineProperty = _defineProperty;\n/**\n * VIEWPORT\n */\n\nvar SET_VIEWPORT = 'VIEWPORT::SET';\nvar SET_VIEWPORT_ACTIVE = 'VIEWPORT::SET_ACTIVE';\nvar SET_VIEWPORT_LAYOUT = 'VIEWPORT::SET_LAYOUT';\nvar SET_VIEWPORT_LAYOUT_AND_DATA = 'VIEWPORT::SET_VIEWPORT_LAYOUT_AND_DATA';\nvar CLEAR_VIEWPORT = 'VIEWPORT::CLEAR';\nvar SET_SPECIFIC_DATA = 'VIEWPORT::SET_SPECIFIC_DATA';\nvar SET_ACTIVE_SPECIFIC_DATA = 'VIEWPORT::SET_ACTIVE_SPECIFIC_DATA';\nvar SET_SERVERS = 'SET_SERVERS';\n/** Action Creators:\n *  https://redux.js.org/basics/actions#action-creators\n */\n\n/**\n * VIEWPORT\n */\n\nvar setViewportSpecificData = function setViewportSpecificData(viewportIndex, data) {\n  return {\n    type: SET_VIEWPORT,\n    viewportIndex: viewportIndex,\n    data: data\n  };\n};\n\nvar setViewportActive = function setViewportActive(viewportIndex) {\n  return {\n    type: SET_VIEWPORT_ACTIVE,\n    viewportIndex: viewportIndex\n  };\n};\n\nvar setLayout = function setLayout(layout) {\n  return {\n    type: SET_VIEWPORT_LAYOUT,\n    layout: layout\n  };\n};\n\nvar clearViewportSpecificData = function clearViewportSpecificData(viewportIndex) {\n  return {\n    type: CLEAR_VIEWPORT,\n    viewportIndex: viewportIndex\n  };\n};\n\nvar setActiveViewportSpecificData = function setActiveViewportSpecificData(data) {\n  return {\n    type: SET_ACTIVE_SPECIFIC_DATA,\n    data: data\n  };\n};\n/**\n * NOT-VIEWPORT\n */\n\n\nvar setStudyLoadingProgress = function setStudyLoadingProgress(progressId, progressData) {\n  return {\n    type: 'SET_STUDY_LOADING_PROGRESS',\n    progressId: progressId,\n    progressData: progressData\n  };\n};\n\nvar clearStudyLoadingProgress = function clearStudyLoadingProgress(progressId) {\n  return {\n    type: 'CLEAR_STUDY_LOADING_PROGRESS',\n    progressId: progressId\n  };\n};\n\nvar setUserPreferences = function setUserPreferences(state) {\n  return {\n    type: 'SET_USER_PREFERENCES',\n    state: state\n  };\n};\n\nvar setExtensionData = function setExtensionData(extension, data) {\n  return {\n    type: 'SET_EXTENSION_DATA',\n    extension: extension,\n    data: data\n  };\n};\n\nvar setTimepoints = function setTimepoints(state) {\n  return {\n    type: 'SET_TIMEPOINTS',\n    state: state\n  };\n};\n\nvar setMeasurements = function setMeasurements(state) {\n  return {\n    type: 'SET_MEASUREMENTS',\n    state: state\n  };\n};\n\nvar setStudyData = function setStudyData(studyInstanceUid, data) {\n  return {\n    type: 'SET_STUDY_DATA',\n    studyInstanceUid: studyInstanceUid,\n    data: data\n  };\n};\n\nvar setServers = function setServers(servers) {\n  return {\n    type: SET_SERVERS,\n    servers: servers\n  };\n};\n\nvar setViewportLayoutAndData = function setViewportLayoutAndData(layout, viewportSpecificData) {\n  return {\n    type: SET_VIEWPORT_LAYOUT_AND_DATA,\n    layout: layout,\n    viewportSpecificData: viewportSpecificData\n  };\n};\n\nvar actions = {\n  // VIEWPORT\n  setViewportActive: setViewportActive,\n  setViewportSpecificData: setViewportSpecificData,\n  setViewportLayoutAndData: setViewportLayoutAndData,\n  setLayout: setLayout,\n  clearViewportSpecificData: clearViewportSpecificData,\n  setActiveViewportSpecificData: setActiveViewportSpecificData,\n  setStudyLoadingProgress: setStudyLoadingProgress,\n  clearStudyLoadingProgress: clearStudyLoadingProgress,\n  setUserPreferences: setUserPreferences,\n  setExtensionData: setExtensionData,\n  setTimepoints: setTimepoints,\n  setMeasurements: setMeasurements,\n  setStudyData: setStudyData,\n  setServers: setServers\n};\nvar stackMap = {};\nvar configuration = {};\nvar stackManagerMetaDataProvider;\nvar stackUpdatedCallbacks = [];\n/**\n * Loop through the current series and add metadata to the\n * Cornerstone meta data provider. This will be used to fill information\n * into the viewport overlays, and to calculate reference lines and orientation markers\n * @param  {Object} stackMap              stackMap object\n * @param  {Object} study                 Study object\n * @param  {Object} displaySet            The set of images to make the stack from\n * @return {Array}                        Array with image IDs\n */\n\nfunction createAndAddStack(stackMap, study, displaySet, stackUpdatedCallbacks, metadataProvider) {\n  var images = displaySet.images;\n\n  if (!images) {\n    return;\n  }\n\n  var numImages = images.length;\n  var imageIds = [];\n  var imageId;\n  displaySet.images.forEach(function (instance, imageIndex) {\n    var image = instance.getData();\n    var metaData = {\n      instance: image,\n      // in this context, instance will be the data of the InstanceMetadata object...\n      series: displaySet,\n      // TODO: Check this\n      study: study,\n      numImages: numImages,\n      imageIndex: imageIndex + 1\n    };\n    var numberOfFrames = image.numberOfFrames;\n\n    if (numberOfFrames > 1) {\n      for (var i = 0; i < numberOfFrames; i++) {\n        metaData.frameNumber = i;\n        imageId = getImageId(image, i);\n        imageIds.push(imageId);\n        metadataProvider.addMetadata(imageId, metaData);\n      }\n    } else {\n      metaData.frameNumber = 1;\n      imageId = getImageId(image);\n      imageIds.push(imageId);\n      metadataProvider.addMetadata(imageId, metaData);\n    }\n  });\n  var stack = {\n    studyInstanceUid: study.studyInstanceUid,\n    displaySetInstanceUid: displaySet.displaySetInstanceUid,\n    imageIds: imageIds,\n    frameRate: displaySet.frameRate,\n    isClip: displaySet.isClip\n  };\n  stackMap[displaySet.displaySetInstanceUid] = stack;\n  return stack;\n}\n\nconfiguration = {\n  createAndAddStack: createAndAddStack\n};\n/**\n * This object contains all the functions needed for interacting with the stack manager.\n * Generally, findStack is the only function used. If you want to know when new stacks\n * come in, you can register a callback with addStackUpdatedCallback.\n */\n\nvar StackManager = {\n  setMetadataProvider: function setMetadataProvider(provider) {\n    stackManagerMetaDataProvider = provider;\n  },\n\n  /**\n   * Removes all current stacks\n   */\n  clearStacks: function clearStacks() {\n    stackMap = {};\n  },\n\n  /**\n   * Create a stack from an image set, as well as add in the metadata on a per image bases.\n   * @param study The study who's metadata will be added\n   * @param displaySet The set of images to make the stack from\n   * @return {Array} Array with image IDs\n   */\n  makeAndAddStack: function makeAndAddStack(study, displaySet) {\n    if (!stackManagerMetaDataProvider) {\n      throw new Error('Please call StackManager.setMetadataProvider(provider) first.');\n    }\n\n    return configuration.createAndAddStack(stackMap, study, displaySet, stackUpdatedCallbacks, stackManagerMetaDataProvider);\n  },\n\n  /**\n   * Find a stack from the currently created stacks.\n   * @param displaySetInstanceUid The UID of the stack to find.\n   * @returns {*} undefined if not found, otherwise the stack object is returned.\n   */\n  findStack: function findStack(displaySetInstanceUid) {\n    return stackMap[displaySetInstanceUid];\n  },\n\n  /**\n   * Find a stack or reate one if it has not been created yet\n   * @param study The study who's metadata will be added\n   * @param displaySet The set of images to make the stack from\n   * @return {Array} Array with image IDs\n   */\n  findOrCreateStack: function findOrCreateStack(study, displaySet) {\n    var stack = this.findStack(displaySet.displaySetInstanceUid);\n\n    if (!stack || !stack.imageIds) {\n      stack = this.makeAndAddStack(study, displaySet);\n    }\n\n    return stack;\n  },\n\n  /**\n   * Gets the underlying map of displaySetInstanceUid to stack object.\n   * WARNING: Do not change this object. It directly affects the manager.\n   * @returns {{}} map of displaySetInstanceUid -> stack.\n   */\n  getAllStacks: function getAllStacks() {\n    return stackMap;\n  },\n\n  /**\n   * Adds in a callback to be called on a stack being added / updated.\n   * @param callback must accept at minimum one argument,\n   * which is the stack that was added / updated.\n   */\n  addStackUpdatedCallback: function addStackUpdatedCallback(callback) {\n    if (typeof callback !== 'function') {\n      throw new OHIFError('callback must be provided as a function');\n    }\n\n    stackUpdatedCallbacks.push(callback);\n  },\n\n  /**\n   * Return configuration\n   */\n  getConfiguration: function getConfiguration() {\n    return configuration;\n  },\n\n  /**\n   * Set configuration, in order to provide compatibility\n   * with other systems by overriding this functions\n   * @param {Object} config object with functions to be overrided\n   *\n   * For now, only makeAndAddStack can be overrided\n   */\n  setConfiguration: function setConfiguration(config) {\n    configuration = config;\n  }\n};\n\nvar BaseLoadingListener =\n/*#__PURE__*/\nfunction () {\n  function BaseLoadingListener(stack) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, BaseLoadingListener);\n    this.id = BaseLoadingListener.getNewId();\n    this.stack = stack;\n    this.startListening();\n    this.statsItemsLimit = options.statsItemsLimit || 2;\n    this.stats = {\n      items: [],\n      total: 0,\n      elapsedTime: 0,\n      speed: 0\n    };\n    this._setProgressData = options._setProgressData;\n    this._clearProgressById = options._clearProgressById; // Register the start point to make it possible to calculate\n    // bytes/s or frames/s when the first byte or frame is received\n\n    this._addStatsData(0); // Update the progress before starting the download\n    // to make it possible to update the UI\n\n\n    this._updateProgress();\n  }\n\n  createClass(BaseLoadingListener, [{\n    key: \"_addStatsData\",\n    value: function _addStatsData(value) {\n      var date = new Date();\n      var stats = this.stats;\n      var items = stats.items;\n      var newItem = {\n        value: value,\n        date: date\n      };\n      items.push(newItem);\n      stats.total += newItem.value; // Remove items until it gets below the limit\n\n      while (items.length > this.statsItemsLimit) {\n        var item = items.shift();\n        stats.total -= item.value;\n      } // Update the elapsedTime (seconds) based on first and last\n      // elements and recalculate the speed (bytes/s or frames/s)\n\n\n      if (items.length > 1) {\n        var oldestItem = items[0];\n        stats.elapsedTime = (newItem.date.getTime() - oldestItem.date.getTime()) / 1000;\n        stats.speed = (stats.total - oldestItem.value) / stats.elapsedTime;\n      }\n    }\n  }, {\n    key: \"_getProgressId\",\n    value: function _getProgressId() {\n      var displaySetInstanceUid = this.stack.displaySetInstanceUid;\n      return 'StackProgress:' + displaySetInstanceUid;\n    }\n  }, {\n    key: \"_clearProgress\",\n    value: function _clearProgress() {\n      var progressId = this._getProgressId();\n\n      this._clearProgressById(progressId);\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      throw new Error('`startListening` must be implemented by child classes');\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      throw new Error('`stopListening` must be implemented by child classes');\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.stopListening();\n\n      this._clearProgress();\n    }\n  }], [{\n    key: \"getNewId\",\n    value: function getNewId() {\n      var timeSlice = new Date().getTime().toString().slice(-8);\n      var randomNumber = parseInt(Math.random() * 1000000000);\n      return timeSlice.toString() + randomNumber.toString();\n    }\n  }]);\n  return BaseLoadingListener;\n}();\n\nvar DICOMFileLoadingListener =\n/*#__PURE__*/\nfunction (_BaseLoadingListener) {\n  inherits(DICOMFileLoadingListener, _BaseLoadingListener);\n\n  function DICOMFileLoadingListener(stack, options) {\n    var _this;\n\n    classCallCheck(this, DICOMFileLoadingListener);\n    _this = possibleConstructorReturn(this, getPrototypeOf(DICOMFileLoadingListener).call(this, stack, options));\n    defineProperty(assertThisInitialized(assertThisInitialized(_this)), \"_imageLoadProgressEventHandler\", function (e) {\n      var eventData = e.detail;\n\n      var dataSetUrl = _this._convertImageIdToDataSetUrl(eventData.imageId);\n\n      var bytesDiff = eventData.loaded - _this._lastLoaded;\n\n      if (!_this._dataSetUrl === dataSetUrl) {\n        return;\n      } // Add the bytes downloaded to the stats\n\n\n      _this._addStatsData(bytesDiff); // Update the download progress\n\n\n      _this._updateProgress(eventData); // Cache the last eventData.loaded value\n\n\n      _this._lastLoaded = eventData.loaded;\n    });\n    _this._dataSetUrl = _this._getDataSetUrl(stack);\n    _this._lastLoaded = 0; // Check how many instances has already been download (cached)\n\n    _this._checkCachedData();\n\n    return _this;\n  }\n\n  createClass(DICOMFileLoadingListener, [{\n    key: \"_checkCachedData\",\n    value: function _checkCachedData() {\n      var dataSet = cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.get(this._dataSetUrl);\n\n      if (dataSet) {\n        var dataSetLength = dataSet.byteArray.length;\n\n        this._updateProgress({\n          percentComplete: 100,\n          loaded: dataSetLength,\n          total: dataSetLength\n        });\n      }\n    }\n  }, {\n    key: \"_getImageLoadProgressEventName\",\n    value: function _getImageLoadProgressEventName() {\n      // TODO: Add this event as a constant in Cornerstone\n      return 'cornerstoneimageloadprogress.' + this.id;\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var imageLoadProgressEventName = this._getImageLoadProgressEventName();\n\n      this.imageLoadProgressEventHandler = this._imageLoadProgressEventHandle.bind(this);\n      this.stopListening();\n      cornerstone.events.addEventListener(imageLoadProgressEventName, this.imageLoadProgressEventHandle);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var imageLoadProgressEventName = this._getImageLoadProgressEventName();\n\n      cornerstone.events.removeEventListener(imageLoadProgressEventName, this.imageLoadProgressEventHandle);\n    }\n  }, {\n    key: \"_updateProgress\",\n    value: function _updateProgress(eventData) {\n      var progressId = this._getProgressId();\n\n      eventData = eventData || {};\n      var progressData = {\n        multiFrame: false,\n        percentComplete: eventData.percentComplete,\n        bytesLoaded: eventData.loaded,\n        bytesTotal: eventData.total,\n        bytesPerSecond: this.stats.speed\n      };\n\n      this._setProgressData(progressId, progressData);\n    }\n  }, {\n    key: \"_convertImageIdToDataSetUrl\",\n    value: function _convertImageIdToDataSetUrl(imageId) {\n      // Remove the prefix (\"dicomweb:\" or \"wadouri:\"\")\n      imageId = imageId.replace(/^(dicomweb:|wadouri:)/i, ''); // Remove \"frame=999&\" from the imageId\n\n      imageId = imageId.replace(/frame=\\d+&?/i, ''); // Remove the last \"&\" like in \"http://...?foo=1&bar=2&\"\n\n      imageId = imageId.replace(/&$/, '');\n      return imageId;\n    }\n  }, {\n    key: \"_getDataSetUrl\",\n    value: function _getDataSetUrl(stack) {\n      var imageId = stack.imageIds[0];\n      return this._convertImageIdToDataSetUrl(imageId);\n    }\n  }]);\n  return DICOMFileLoadingListener;\n}(BaseLoadingListener);\n\nvar StackLoadingListener =\n/*#__PURE__*/\nfunction (_BaseLoadingListener2) {\n  inherits(StackLoadingListener, _BaseLoadingListener2);\n\n  function StackLoadingListener(stack) {\n    var _this2;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, StackLoadingListener);\n    options.statsItemsLimit = 20;\n    _this2 = possibleConstructorReturn(this, getPrototypeOf(StackLoadingListener).call(this, stack, options));\n    _this2.imageDataMap = _this2._convertImageIdsArrayToMap(stack.imageIds);\n    _this2.framesStatus = _this2._createArray(stack.imageIds.length, false);\n    _this2.loadedCount = 0; // Check how many instances has already been download (cached)\n\n    _this2._checkCachedData();\n\n    return _this2;\n  }\n\n  createClass(StackLoadingListener, [{\n    key: \"_convertImageIdsArrayToMap\",\n    value: function _convertImageIdsArrayToMap(imageIds) {\n      var imageIdsMap = new Map();\n\n      for (var i = 0; i < imageIds.length; i++) {\n        imageIdsMap.set(imageIds[i], {\n          index: i,\n          loaded: false\n        });\n      }\n\n      return imageIdsMap;\n    }\n  }, {\n    key: \"_createArray\",\n    value: function _createArray(length, defaultValue) {\n      // `new Array(length)` is an anti-pattern in javascript because its\n      // funny API. Otherwise I would go for `new Array(length).fill(false)`\n      var array = [];\n\n      for (var i = 0; i < length; i++) {\n        array[i] = defaultValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"_checkCachedData\",\n    value: function _checkCachedData() {// const imageIds = this.stack.imageIds;\n      // TODO: No way to check status of Promise.\n\n      /*for(let i = 0; i < imageIds.length; i++) {\n              const imageId = imageIds[i];\n               const imagePromise = cornerstone.imageCache.getImageLoadObject(imageId).promise;\n               if (imagePromise && (imagePromise.state() === 'resolved')) {\n                  this._updateFrameStatus(imageId, true);\n              }\n          }*/\n    }\n  }, {\n    key: \"_getImageLoadedEventName\",\n    value: function _getImageLoadedEventName() {\n      return \"\".concat(cornerstone.EVENTS.IMAGE_LOADED, \".\").concat(this.id);\n    }\n  }, {\n    key: \"_getImageCachePromiseRemoveEventName\",\n    value: function _getImageCachePromiseRemoveEventName() {\n      return \"\".concat(cornerstone.EVENTS.IMAGE_CACHE_PROMISE_REMOVED, \".\").concat(this.id);\n    }\n  }, {\n    key: \"_imageLoadedEventHandler\",\n    value: function _imageLoadedEventHandler(e) {\n      this._updateFrameStatus(e.detail.image.imageId, true);\n    }\n  }, {\n    key: \"_imageCachePromiseRemovedEventHandler\",\n    value: function _imageCachePromiseRemovedEventHandler(e) {\n      this._updateFrameStatus(e.detail.imageId, false);\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var imageLoadedEventName = this._getImageLoadedEventName();\n\n      var imageCachePromiseRemovedEventName = this._getImageCachePromiseRemoveEventName();\n\n      this.imageLoadedEventHandler = this._imageLoadedEventHandler.bind(this);\n      this.imageCachePromiseRemovedEventHandler = this._imageCachePromiseRemovedEventHandler.bind(this);\n      this.stopListening();\n      cornerstone.events.addEventListener(imageLoadedEventName, this.imageLoadedEventHandler);\n      cornerstone.events.addEventListener(imageCachePromiseRemovedEventName, this.imageCachePromiseRemovedEventHandler);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var imageLoadedEventName = this._getImageLoadedEventName();\n\n      var imageCachePromiseRemovedEventName = this._getImageCachePromiseRemoveEventName();\n\n      cornerstone.events.removeEventListener(imageLoadedEventName, this.imageLoadedEventHandler);\n      cornerstone.events.removeEventListener(imageCachePromiseRemovedEventName, this.imageCachePromiseRemovedEventHandler);\n    }\n  }, {\n    key: \"_updateFrameStatus\",\n    value: function _updateFrameStatus(imageId, loaded) {\n      var imageData = this.imageDataMap.get(imageId);\n\n      if (!imageData || imageData.loaded === loaded) {\n        return;\n      } // Add one more frame to the stats\n\n\n      if (loaded) {\n        this._addStatsData(1);\n      }\n\n      imageData.loaded = loaded;\n      this.framesStatus[imageData.index] = loaded;\n      this.loadedCount += loaded ? 1 : -1;\n\n      this._updateProgress();\n    }\n  }, {\n    key: \"_setProgressData\",\n    value: function _setProgressData(progressId, progressData) {\n      // TODO: This method (and _clearProgressById) need to access\n      // the Redux store and should therefore be provided from the\n      // application. I've added a workaround to pass this in through\n      // the 'options' variable on instantiation, but this is really ugly.\n      // We could consider making the StudyLoadingListener a higher-order\n      // component which would set this stuff itself.\n      throw new Error(\"The _setProgressData function must be provided in StudyLoadingListener's options\");\n    }\n  }, {\n    key: \"_clearProgressById\",\n    value: function _clearProgressById(progressId) {\n      throw new Error(\"The _clearProgressById function must be provided in StudyLoadingListener's options\");\n    }\n  }, {\n    key: \"_updateProgress\",\n    value: function _updateProgress() {\n      var totalFramesCount = this.stack.imageIds.length;\n      var loadedFramesCount = this.loadedCount;\n      var loadingFramesCount = totalFramesCount - loadedFramesCount;\n      var percentComplete = Math.round(loadedFramesCount / totalFramesCount * 100);\n\n      var progressId = this._getProgressId();\n\n      var progressData = {\n        multiFrame: true,\n        totalFramesCount: totalFramesCount,\n        loadedFramesCount: loadedFramesCount,\n        loadingFramesCount: loadingFramesCount,\n        percentComplete: percentComplete,\n        framesPerSecond: this.stats.speed,\n        framesStatus: this.framesStatus\n      };\n\n      this._setProgressData(progressId, progressData);\n    }\n  }, {\n    key: \"_logProgress\",\n    value: function _logProgress() {\n      var totalFramesCount = this.stack.imageIds.length;\n      var displaySetInstanceUid = this.stack.displaySetInstanceUid;\n      var progressBar = '[';\n\n      for (var i = 0; i < totalFramesCount; i++) {\n        var ch = this.framesStatus[i] ? '|' : '.';\n        progressBar += \"\".concat(ch);\n      }\n\n      progressBar += ']';\n      log.info(\"\".concat(displaySetInstanceUid, \": \").concat(progressBar));\n    }\n  }]);\n  return StackLoadingListener;\n}(BaseLoadingListener);\n\nvar StudyLoadingListener =\n/*#__PURE__*/\nfunction () {\n  function StudyLoadingListener(options) {\n    classCallCheck(this, StudyLoadingListener);\n    this.listeners = {};\n    this.options = options;\n  }\n\n  createClass(StudyLoadingListener, [{\n    key: \"addStack\",\n    value: function addStack(stack, stackMetaData) {\n      // TODO: Make this work for plugins\n      if (!stack) {\n        //console.log('Skipping adding stack to StudyLoadingListener');\n        return;\n      }\n\n      var displaySetInstanceUid = stack.displaySetInstanceUid;\n\n      if (!this.listeners[displaySetInstanceUid]) {\n        var listener = this._createListener(stack, stackMetaData);\n\n        if (listener) {\n          this.listeners[displaySetInstanceUid] = listener;\n        }\n      }\n    }\n  }, {\n    key: \"addStudy\",\n    value: function addStudy(study) {\n      var _this3 = this;\n\n      study.displaySets.forEach(function (displaySet) {\n        var stack = StackManager.findOrCreateStack(study, displaySet); // TODO: Make this work for plugins\n\n        if (!stack) {\n          console.warn('Skipping adding displaySet to StudyLoadingListener');\n          console.warn(displaySet);\n          return;\n        }\n\n        _this3.addStack(stack, {\n          isMultiFrame: displaySet.isMultiFrame\n        });\n      });\n    }\n  }, {\n    key: \"addStudies\",\n    value: function addStudies(studies) {\n      var _this4 = this;\n\n      if (!studies || !studies.length) {\n        return;\n      }\n\n      studies.forEach(function (study) {\n        return _this4.addStudy(study);\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var displaySetInstanceUids = Object.keys(this.listeners);\n      var length = displaySetInstanceUids.length;\n\n      for (var i = 0; i < length; i++) {\n        var displaySetInstanceUid = displaySetInstanceUids[i];\n        var displaySet = this.listeners[displaySetInstanceUid];\n        displaySet.destroy();\n      }\n\n      this.listeners = {};\n    }\n  }, {\n    key: \"_createListener\",\n    value: function _createListener(stack, stackMetaData) {\n      var schema = this._getSchema(stack); // A StackLoadingListener can be created if it's wadors or not a multiframe\n      // wadouri instance (single file) that means \"N\" files will have to be\n      // downloaded where \"N\" is the number of frames. DICOMFileLoadingListener\n      // is created only if it's a single DICOM file and there's no way to know\n      // how many frames has already been loaded (bytes/s instead of frames/s).\n\n\n      if (schema === 'wadors' || !stackMetaData.isMultiFrame) {\n        return new StackLoadingListener(stack, this.options);\n      } else {\n        return new DICOMFileLoadingListener(stack, this.options);\n      }\n    }\n  }, {\n    key: \"_getSchema\",\n    value: function _getSchema(stack) {\n      var imageId = stack.imageIds[0];\n      var colonIndex = imageId.indexOf(':');\n      return imageId.substring(0, colonIndex);\n    } // Singleton\n\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance(options) {\n      if (!StudyLoadingListener._instance) {\n        StudyLoadingListener._instance = new StudyLoadingListener(options);\n      }\n\n      return StudyLoadingListener._instance;\n    }\n  }]);\n  return StudyLoadingListener;\n}();\n\nvar mousetrap = createCommonjsModule(function (module) {\n  /*global define:false */\n\n  /**\n   * Copyright 2012-2017 Craig Campbell\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * Mousetrap is a simple keyboard shortcut library for Javascript with\n   * no external dependencies\n   *\n   * @version 1.6.3\n   * @url craig.is/killing/mice\n   */\n  (function (window, document, undefined) {\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n      return;\n    }\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n\n\n    var _MAP = {\n      8: 'backspace',\n      9: 'tab',\n      13: 'enter',\n      16: 'shift',\n      17: 'ctrl',\n      18: 'alt',\n      20: 'capslock',\n      27: 'esc',\n      32: 'space',\n      33: 'pageup',\n      34: 'pagedown',\n      35: 'end',\n      36: 'home',\n      37: 'left',\n      38: 'up',\n      39: 'right',\n      40: 'down',\n      45: 'ins',\n      46: 'del',\n      91: 'meta',\n      93: 'meta',\n      224: 'meta'\n    };\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n\n    var _KEYCODE_MAP = {\n      106: '*',\n      107: '+',\n      109: '-',\n      110: '.',\n      111: '/',\n      186: ';',\n      187: '=',\n      188: ',',\n      189: '-',\n      190: '.',\n      191: '/',\n      192: '`',\n      219: '[',\n      220: '\\\\',\n      221: ']',\n      222: '\\''\n    };\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n\n    var _SHIFT_MAP = {\n      '~': '`',\n      '!': '1',\n      '@': '2',\n      '#': '3',\n      '$': '4',\n      '%': '5',\n      '^': '6',\n      '&': '7',\n      '*': '8',\n      '(': '9',\n      ')': '0',\n      '_': '-',\n      '+': '=',\n      ':': ';',\n      '\\\"': '\\'',\n      '<': ',',\n      '>': '.',\n      '?': '/',\n      '|': '\\\\'\n    };\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n\n    var _SPECIAL_ALIASES = {\n      'option': 'alt',\n      'command': 'meta',\n      'return': 'enter',\n      'escape': 'esc',\n      'plus': '+',\n      'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n\n    var _REVERSE_MAP;\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n\n\n    for (var i = 1; i < 20; ++i) {\n      _MAP[111 + i] = 'f' + i;\n    }\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n\n\n    for (i = 0; i <= 9; ++i) {\n      // This needs to use a string cause otherwise since 0 is falsey\n      // mousetrap will never fire for numpad 0 pressed as part of a keydown\n      // event.\n      //\n      // @see https://github.com/ccampbell/mousetrap/pull/258\n      _MAP[i + 96] = i.toString();\n    }\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n\n\n    function _addEvent(object, type, callback) {\n      if (object.addEventListener) {\n        object.addEventListener(type, callback, false);\n        return;\n      }\n\n      object.attachEvent('on' + type, callback);\n    }\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n\n\n    function _characterFromEvent(e) {\n      // for keypress events we should return the character as is\n      if (e.type == 'keypress') {\n        var character = String.fromCharCode(e.which); // if the shift key is not pressed then it is safe to assume\n        // that we want the character to be lowercase.  this means if\n        // you accidentally have caps lock on then your key bindings\n        // will continue to work\n        //\n        // the only side effect that might not be desired is if you\n        // bind something like 'A' cause you want to trigger an\n        // event when capital A is pressed caps lock will no longer\n        // trigger the event.  shift+a will though.\n\n        if (!e.shiftKey) {\n          character = character.toLowerCase();\n        }\n\n        return character;\n      } // for non keypress events the special maps are needed\n\n\n      if (_MAP[e.which]) {\n        return _MAP[e.which];\n      }\n\n      if (_KEYCODE_MAP[e.which]) {\n        return _KEYCODE_MAP[e.which];\n      } // if it is not in the special map\n      // with keydown and keyup events the character seems to always\n      // come in as an uppercase character whether you are pressing shift\n      // or not.  we should make sure it is always lowercase for comparisons\n\n\n      return String.fromCharCode(e.which).toLowerCase();\n    }\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n\n\n    function _modifiersMatch(modifiers1, modifiers2) {\n      return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n\n\n    function _eventModifiers(e) {\n      var modifiers = [];\n\n      if (e.shiftKey) {\n        modifiers.push('shift');\n      }\n\n      if (e.altKey) {\n        modifiers.push('alt');\n      }\n\n      if (e.ctrlKey) {\n        modifiers.push('ctrl');\n      }\n\n      if (e.metaKey) {\n        modifiers.push('meta');\n      }\n\n      return modifiers;\n    }\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    function _preventDefault(e) {\n      if (e.preventDefault) {\n        e.preventDefault();\n        return;\n      }\n\n      e.returnValue = false;\n    }\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    function _stopPropagation(e) {\n      if (e.stopPropagation) {\n        e.stopPropagation();\n        return;\n      }\n\n      e.cancelBubble = true;\n    }\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n\n\n    function _isModifier(key) {\n      return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n\n\n    function _getReverseMap() {\n      if (!_REVERSE_MAP) {\n        _REVERSE_MAP = {};\n\n        for (var key in _MAP) {\n          // pull out the numeric keypad from here cause keypress should\n          // be able to detect the keys from the character\n          if (key > 95 && key < 112) {\n            continue;\n          }\n\n          if (_MAP.hasOwnProperty(key)) {\n            _REVERSE_MAP[_MAP[key]] = key;\n          }\n        }\n      }\n\n      return _REVERSE_MAP;\n    }\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n\n\n    function _pickBestAction(key, modifiers, action) {\n      // if no action was picked in we should try to pick the one\n      // that we think would work best for this key\n      if (!action) {\n        action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n      } // modifier keys don't work as expected with keypress,\n      // switch to keydown\n\n\n      if (action == 'keypress' && modifiers.length) {\n        action = 'keydown';\n      }\n\n      return action;\n    }\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n\n\n    function _keysFromString(combination) {\n      if (combination === '+') {\n        return ['+'];\n      }\n\n      combination = combination.replace(/\\+{2}/g, '+plus');\n      return combination.split('+');\n    }\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n\n\n    function _getKeyInfo(combination, action) {\n      var keys;\n      var key;\n      var i;\n      var modifiers = []; // take the keys from this pattern and figure out what the actual\n      // pattern is all about\n\n      keys = _keysFromString(combination);\n\n      for (i = 0; i < keys.length; ++i) {\n        key = keys[i]; // normalize key names\n\n        if (_SPECIAL_ALIASES[key]) {\n          key = _SPECIAL_ALIASES[key];\n        } // if this is not a keypress event then we should\n        // be smart about using shift keys\n        // this will only work for US keyboards however\n\n\n        if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n          key = _SHIFT_MAP[key];\n          modifiers.push('shift');\n        } // if this key is a modifier then add it to the list of modifiers\n\n\n        if (_isModifier(key)) {\n          modifiers.push(key);\n        }\n      } // depending on what the key combination is\n      // we will try to pick the best event for it\n\n\n      action = _pickBestAction(key, modifiers, action);\n      return {\n        key: key,\n        modifiers: modifiers,\n        action: action\n      };\n    }\n\n    function _belongsTo(element, ancestor) {\n      if (element === null || element === document) {\n        return false;\n      }\n\n      if (element === ancestor) {\n        return true;\n      }\n\n      return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n      var self = this;\n      targetElement = targetElement || document;\n\n      if (!(self instanceof Mousetrap)) {\n        return new Mousetrap(targetElement);\n      }\n      /**\n       * element to attach key events to\n       *\n       * @type {Element}\n       */\n\n\n      self.target = targetElement;\n      /**\n       * a list of all the callbacks setup via Mousetrap.bind()\n       *\n       * @type {Object}\n       */\n\n      self._callbacks = {};\n      /**\n       * direct map of string combinations to callbacks used for trigger()\n       *\n       * @type {Object}\n       */\n\n      self._directMap = {};\n      /**\n       * keeps track of what level each sequence is at since multiple\n       * sequences can start out with the same sequence\n       *\n       * @type {Object}\n       */\n\n      var _sequenceLevels = {};\n      /**\n       * variable to store the setTimeout call\n       *\n       * @type {null|number}\n       */\n\n      var _resetTimer;\n      /**\n       * temporary state where we will ignore the next keyup\n       *\n       * @type {boolean|string}\n       */\n\n\n      var _ignoreNextKeyup = false;\n      /**\n       * temporary state where we will ignore the next keypress\n       *\n       * @type {boolean}\n       */\n\n      var _ignoreNextKeypress = false;\n      /**\n       * are we currently inside of a sequence?\n       * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n       *\n       * @type {boolean|string}\n       */\n\n      var _nextExpectedAction = false;\n      /**\n       * resets all sequence counters except for the ones passed in\n       *\n       * @param {Object} doNotReset\n       * @returns void\n       */\n\n      function _resetSequences(doNotReset) {\n        doNotReset = doNotReset || {};\n        var activeSequences = false,\n            key;\n\n        for (key in _sequenceLevels) {\n          if (doNotReset[key]) {\n            activeSequences = true;\n            continue;\n          }\n\n          _sequenceLevels[key] = 0;\n        }\n\n        if (!activeSequences) {\n          _nextExpectedAction = false;\n        }\n      }\n      /**\n       * finds all callbacks that match based on the keycode, modifiers,\n       * and action\n       *\n       * @param {string} character\n       * @param {Array} modifiers\n       * @param {Event|Object} e\n       * @param {string=} sequenceName - name of the sequence we are looking for\n       * @param {string=} combination\n       * @param {number=} level\n       * @returns {Array}\n       */\n\n\n      function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n        var i;\n        var callback;\n        var matches = [];\n        var action = e.type; // if there are no events related to this keycode\n\n        if (!self._callbacks[character]) {\n          return [];\n        } // if a modifier key is coming up on its own we should allow it\n\n\n        if (action == 'keyup' && _isModifier(character)) {\n          modifiers = [character];\n        } // loop through all callbacks for the key that was pressed\n        // and see if any of them match\n\n\n        for (i = 0; i < self._callbacks[character].length; ++i) {\n          callback = self._callbacks[character][i]; // if a sequence name is not specified, but this is a sequence at\n          // the wrong level then move onto the next match\n\n          if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n            continue;\n          } // if the action we are looking for doesn't match the action we got\n          // then we should keep going\n\n\n          if (action != callback.action) {\n            continue;\n          } // if this is a keypress event and the meta key and control key\n          // are not pressed that means that we need to only look at the\n          // character, otherwise check the modifiers as well\n          //\n          // chrome will not fire a keypress if meta or control is down\n          // safari will fire a keypress if meta or meta+shift is down\n          // firefox will fire a keypress if meta or control is down\n\n\n          if (action == 'keypress' && !e.metaKey && !e.ctrlKey || _modifiersMatch(modifiers, callback.modifiers)) {\n            // when you bind a combination or sequence a second time it\n            // should overwrite the first one.  if a sequenceName or\n            // combination is specified in this call it does just that\n            //\n            // @todo make deleting its own method?\n            var deleteCombo = !sequenceName && callback.combo == combination;\n            var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n\n            if (deleteCombo || deleteSequence) {\n              self._callbacks[character].splice(i, 1);\n            }\n\n            matches.push(callback);\n          }\n        }\n\n        return matches;\n      }\n      /**\n       * actually calls the callback function\n       *\n       * if your callback function returns false this will use the jquery\n       * convention - prevent default and stop propogation on the event\n       *\n       * @param {Function} callback\n       * @param {Event} e\n       * @returns void\n       */\n\n\n      function _fireCallback(callback, e, combo, sequence) {\n        // if this event should not happen stop here\n        if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n          return;\n        }\n\n        if (callback(e, combo) === false) {\n          _preventDefault(e);\n\n          _stopPropagation(e);\n        }\n      }\n      /**\n       * handles a character key event\n       *\n       * @param {string} character\n       * @param {Array} modifiers\n       * @param {Event} e\n       * @returns void\n       */\n\n\n      self._handleKey = function (character, modifiers, e) {\n        var callbacks = _getMatches(character, modifiers, e);\n\n        var i;\n        var doNotReset = {};\n        var maxLevel = 0;\n        var processedSequenceCallback = false; // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n\n        for (i = 0; i < callbacks.length; ++i) {\n          if (callbacks[i].seq) {\n            maxLevel = Math.max(maxLevel, callbacks[i].level);\n          }\n        } // loop through matching callbacks for this key event\n\n\n        for (i = 0; i < callbacks.length; ++i) {\n          // fire for all sequence callbacks\n          // this is because if for example you have multiple sequences\n          // bound such as \"g i\" and \"g t\" they both need to fire the\n          // callback for matching g cause otherwise you can only ever\n          // match the first one\n          if (callbacks[i].seq) {\n            // only fire callbacks for the maxLevel to prevent\n            // subsequences from also firing\n            //\n            // for example 'a option b' should not cause 'option b' to fire\n            // even though 'option b' is part of the other sequence\n            //\n            // any sequences that do not match here will be discarded\n            // below by the _resetSequences call\n            if (callbacks[i].level != maxLevel) {\n              continue;\n            }\n\n            processedSequenceCallback = true; // keep a list of which sequences were matches for later\n\n            doNotReset[callbacks[i].seq] = 1;\n\n            _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n\n            continue;\n          } // if there were no sequence matches but we are still here\n          // that means this is a regular match so we should fire that\n\n\n          if (!processedSequenceCallback) {\n            _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n          }\n        } // if the key you pressed matches the type of sequence without\n        // being a modifier (ie \"keyup\" or \"keypress\") then we should\n        // reset all sequences that were not matched by this event\n        //\n        // this is so, for example, if you have the sequence \"h a t\" and you\n        // type \"h e a r t\" it does not match.  in this case the \"e\" will\n        // cause the sequence to reset\n        //\n        // modifier keys are ignored because you can have a sequence\n        // that contains modifiers such as \"enter ctrl+space\" and in most\n        // cases the modifier key will be pressed before the next key\n        //\n        // also if you have a sequence such as \"ctrl+b a\" then pressing the\n        // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n        //\n        // the \"keydown\" is expected when there is a modifier, but the\n        // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n        // after and that causes the sequence to reset\n        //\n        // we ignore keypresses in a sequence that directly follow a keydown\n        // for the same character\n\n\n        var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n\n        if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n          _resetSequences(doNotReset);\n        }\n\n        _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n      };\n      /**\n       * handles a keydown event\n       *\n       * @param {Event} e\n       * @returns void\n       */\n\n\n      function _handleKeyEvent(e) {\n        // normalize e.which for key events\n        // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n        if (typeof e.which !== 'number') {\n          e.which = e.keyCode;\n        }\n\n        var character = _characterFromEvent(e); // no character found then stop\n\n\n        if (!character) {\n          return;\n        } // need to use === for the character check because the character can be 0\n\n\n        if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n          _ignoreNextKeyup = false;\n          return;\n        }\n\n        self.handleKey(character, _eventModifiers(e), e);\n      }\n      /**\n       * called to set a 1 second timeout on the specified sequence\n       *\n       * this is so after each key press in the sequence you have 1 second\n       * to press the next key before you have to start over\n       *\n       * @returns void\n       */\n\n\n      function _resetSequenceTimer() {\n        clearTimeout(_resetTimer);\n        _resetTimer = setTimeout(_resetSequences, 1000);\n      }\n      /**\n       * binds a key sequence to an event\n       *\n       * @param {string} combo - combo specified in bind call\n       * @param {Array} keys\n       * @param {Function} callback\n       * @param {string=} action\n       * @returns void\n       */\n\n\n      function _bindSequence(combo, keys, callback, action) {\n        // start off by adding a sequence level record for this combination\n        // and setting the level to 0\n        _sequenceLevels[combo] = 0;\n        /**\n         * callback to increase the sequence level for this sequence and reset\n         * all other sequences that were active\n         *\n         * @param {string} nextAction\n         * @returns {Function}\n         */\n\n        function _increaseSequence(nextAction) {\n          return function () {\n            _nextExpectedAction = nextAction;\n            ++_sequenceLevels[combo];\n\n            _resetSequenceTimer();\n          };\n        }\n        /**\n         * wraps the specified callback inside of another function in order\n         * to reset all sequence counters as soon as this sequence is done\n         *\n         * @param {Event} e\n         * @returns void\n         */\n\n\n        function _callbackAndReset(e) {\n          _fireCallback(callback, e, combo); // we should ignore the next key up if the action is key down\n          // or keypress.  this is so if you finish a sequence and\n          // release the key the final key will not trigger a keyup\n\n\n          if (action !== 'keyup') {\n            _ignoreNextKeyup = _characterFromEvent(e);\n          } // weird race condition if a sequence ends with the key\n          // another sequence begins with\n\n\n          setTimeout(_resetSequences, 10);\n        } // loop through keys one at a time and bind the appropriate callback\n        // function.  for any key leading up to the final one it should\n        // increase the sequence. after the final, it should reset all sequences\n        //\n        // if an action is specified in the original bind call then that will\n        // be used throughout.  otherwise we will pass the action that the\n        // next key in the sequence should match.  this allows a sequence\n        // to mix and match keypress and keydown events depending on which\n        // ones are better suited to the key provided\n\n\n        for (var i = 0; i < keys.length; ++i) {\n          var isFinal = i + 1 === keys.length;\n          var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n\n          _bindSingle(keys[i], wrappedCallback, action, combo, i);\n        }\n      }\n      /**\n       * binds a single keyboard combination\n       *\n       * @param {string} combination\n       * @param {Function} callback\n       * @param {string=} action\n       * @param {string=} sequenceName - name of sequence if part of sequence\n       * @param {number=} level - what part of the sequence the command is\n       * @returns void\n       */\n\n\n      function _bindSingle(combination, callback, action, sequenceName, level) {\n        // store a direct mapped reference for use with Mousetrap.trigger\n        self._directMap[combination + ':' + action] = callback; // make sure multiple spaces in a row become a single space\n\n        combination = combination.replace(/\\s+/g, ' ');\n        var sequence = combination.split(' ');\n        var info; // if this pattern is a sequence of keys then run through this method\n        // to reprocess each pattern one key at a time\n\n        if (sequence.length > 1) {\n          _bindSequence(combination, sequence, callback, action);\n\n          return;\n        }\n\n        info = _getKeyInfo(combination, action); // make sure to initialize array if this is the first time\n        // a callback is added for this key\n\n        self._callbacks[info.key] = self._callbacks[info.key] || []; // remove an existing match if there is one\n\n        _getMatches(info.key, info.modifiers, {\n          type: info.action\n        }, sequenceName, combination, level); // add this call back to the array\n        // if it is a sequence put it at the beginning\n        // if not put it at the end\n        //\n        // this is important because the way these are processed expects\n        // the sequence ones to come first\n\n\n        self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n          callback: callback,\n          modifiers: info.modifiers,\n          action: info.action,\n          seq: sequenceName,\n          level: level,\n          combo: combination\n        });\n      }\n      /**\n       * binds multiple combinations to the same callback\n       *\n       * @param {Array} combinations\n       * @param {Function} callback\n       * @param {string|undefined} action\n       * @returns void\n       */\n\n\n      self._bindMultiple = function (combinations, callback, action) {\n        for (var i = 0; i < combinations.length; ++i) {\n          _bindSingle(combinations[i], callback, action);\n        }\n      }; // start!\n\n\n      _addEvent(targetElement, 'keypress', _handleKeyEvent);\n\n      _addEvent(targetElement, 'keydown', _handleKeyEvent);\n\n      _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n\n\n    Mousetrap.prototype.bind = function (keys, callback, action) {\n      var self = this;\n      keys = keys instanceof Array ? keys : [keys];\n\n      self._bindMultiple.call(self, keys, callback, action);\n\n      return self;\n    };\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n\n\n    Mousetrap.prototype.unbind = function (keys, action) {\n      var self = this;\n      return self.bind.call(self, keys, function () {}, action);\n    };\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n\n\n    Mousetrap.prototype.trigger = function (keys, action) {\n      var self = this;\n\n      if (self._directMap[keys + ':' + action]) {\n        self._directMap[keys + ':' + action]({}, keys);\n      }\n\n      return self;\n    };\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n\n\n    Mousetrap.prototype.reset = function () {\n      var self = this;\n      self._callbacks = {};\n      self._directMap = {};\n      return self;\n    };\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n\n\n    Mousetrap.prototype.stopCallback = function (e, element) {\n      var self = this; // if the element has the class \"mousetrap\" then no need to stop\n\n      if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n        return false;\n      }\n\n      if (_belongsTo(element, self.target)) {\n        return false;\n      } // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n      // not the initial event target in the shadow tree. Note that not all events cross the\n      // shadow boundary.\n      // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n      // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n      // target cannot be obtained.\n\n\n      if ('composedPath' in e && typeof e.composedPath === 'function') {\n        // For open shadow trees, update `element` so that the following check works.\n        var initialEventTarget = e.composedPath()[0];\n\n        if (initialEventTarget !== e.target) {\n          element = initialEventTarget;\n        }\n      } // stop for input, select, and textarea\n\n\n      return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n\n\n    Mousetrap.prototype.handleKey = function () {\n      var self = this;\n      return self._handleKey.apply(self, arguments);\n    };\n    /**\n     * allow custom key mappings\n     */\n\n\n    Mousetrap.addKeycodes = function (object) {\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          _MAP[key] = object[key];\n        }\n      }\n\n      _REVERSE_MAP = null;\n    };\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n\n\n    Mousetrap.init = function () {\n      var documentMousetrap = Mousetrap(document);\n\n      for (var method in documentMousetrap) {\n        if (method.charAt(0) !== '_') {\n          Mousetrap[method] = function (method) {\n            return function () {\n              return documentMousetrap[method].apply(documentMousetrap, arguments);\n            };\n          }(method);\n        }\n      }\n    };\n\n    Mousetrap.init(); // expose mousetrap to the global object\n\n    window.Mousetrap = Mousetrap; // expose as a common js module\n\n    if (module.exports) {\n      module.exports = Mousetrap;\n    } // expose mousetrap as an AMD module\n\n\n    if (typeof undefined === 'function' && undefined.amd) {\n      undefined(function () {\n        return Mousetrap;\n      });\n    }\n  })(typeof window !== 'undefined' ? window : null, typeof window !== 'undefined' ? document : null);\n});\n/**\n * adds a pause and unpause method to Mousetrap\n * this allows you to enable or disable keyboard shortcuts\n * without having to reset Mousetrap and rebind everything\n */\n\n/* global Mousetrap:true */\n\n(function (Mousetrap) {\n  var _originalStopCallback = Mousetrap.prototype.stopCallback;\n\n  Mousetrap.prototype.stopCallback = function (e, element, combo) {\n    var self = this;\n\n    if (self.paused) {\n      return true;\n    }\n\n    return _originalStopCallback.call(self, e, element, combo);\n  };\n\n  Mousetrap.prototype.pause = function () {\n    var self = this;\n    self.paused = true;\n  };\n\n  Mousetrap.prototype.unpause = function () {\n    var self = this;\n    self.paused = false;\n  };\n\n  Mousetrap.init();\n})(Mousetrap);\n/**\n * This extension allows you to record a sequence using Mousetrap.\n *\n * @author Dan Tao <daniel.tao@gmail.com>\n */\n\n\n(function (Mousetrap) {\n  /**\n   * the sequence currently being recorded\n   *\n   * @type {Array}\n   */\n  var _recordedSequence = [],\n\n  /**\n   * a callback to invoke after recording a sequence\n   *\n   * @type {Function|null}\n   */\n  _recordedSequenceCallback = null,\n\n  /**\n   * a list of all of the keys currently held down\n   *\n   * @type {Array}\n   */\n  _currentRecordedKeys = [],\n\n  /**\n   * temporary state where we remember if we've already captured a\n   * character key in the current combo\n   *\n   * @type {boolean}\n   */\n  _recordedCharacterKey = false,\n\n  /**\n   * a handle for the timer of the current recording\n   *\n   * @type {null|number}\n   */\n  _recordTimer = null,\n\n  /**\n   * the original handleKey method to override when Mousetrap.record() is\n   * called\n   *\n   * @type {Function}\n   */\n  _origHandleKey = Mousetrap.prototype.handleKey;\n  /**\n   * handles a character key event\n   *\n   * @param {string} character\n   * @param {Array} modifiers\n   * @param {Event} e\n   * @returns void\n   */\n\n  function _handleKey(character, modifiers, e) {\n    var self = this;\n\n    if (!self.recording) {\n      _origHandleKey.apply(self, arguments);\n\n      return;\n    } // remember this character if we're currently recording a sequence\n\n\n    if (e.type == 'keydown') {\n      if (character.length === 1 && _recordedCharacterKey) {\n        _recordCurrentCombo();\n      }\n\n      for (i = 0; i < modifiers.length; ++i) {\n        _recordKey(modifiers[i]);\n      }\n\n      _recordKey(character); // once a key is released, all keys that were held down at the time\n      // count as a keypress\n\n    } else if (e.type == 'keyup' && _currentRecordedKeys.length > 0) {\n      _recordCurrentCombo();\n    }\n  }\n  /**\n   * marks a character key as held down while recording a sequence\n   *\n   * @param {string} key\n   * @returns void\n   */\n\n\n  function _recordKey(key) {\n    var i; // one-off implementation of Array.indexOf, since IE6-9 don't support it\n\n    for (i = 0; i < _currentRecordedKeys.length; ++i) {\n      if (_currentRecordedKeys[i] === key) {\n        return;\n      }\n    }\n\n    _currentRecordedKeys.push(key);\n\n    if (key.length === 1) {\n      _recordedCharacterKey = true;\n    }\n  }\n  /**\n   * marks whatever key combination that's been recorded so far as finished\n   * and gets ready for the next combo\n   *\n   * @returns void\n   */\n\n\n  function _recordCurrentCombo() {\n    _recordedSequence.push(_currentRecordedKeys);\n\n    _currentRecordedKeys = [];\n    _recordedCharacterKey = false;\n\n    _restartRecordTimer();\n  }\n  /**\n   * ensures each combo in a sequence is in a predictable order and formats\n   * key combos to be '+'-delimited\n   *\n   * modifies the sequence in-place\n   *\n   * @param {Array} sequence\n   * @returns void\n   */\n\n\n  function _normalizeSequence(sequence) {\n    var i;\n\n    for (i = 0; i < sequence.length; ++i) {\n      sequence[i].sort(function (x, y) {\n        // modifier keys always come first, in alphabetical order\n        if (x.length > 1 && y.length === 1) {\n          return -1;\n        } else if (x.length === 1 && y.length > 1) {\n          return 1;\n        } // character keys come next (list should contain no duplicates,\n        // so no need for equality check)\n\n\n        return x > y ? 1 : -1;\n      });\n      sequence[i] = sequence[i].join('+');\n    }\n  }\n  /**\n   * finishes the current recording, passes the recorded sequence to the stored\n   * callback, and sets Mousetrap.handleKey back to its original function\n   *\n   * @returns void\n   */\n\n\n  function _finishRecording() {\n    if (_recordedSequenceCallback) {\n      _normalizeSequence(_recordedSequence);\n\n      _recordedSequenceCallback(_recordedSequence);\n    } // reset all recorded state\n\n\n    _recordedSequence = [];\n    _recordedSequenceCallback = null;\n    _currentRecordedKeys = [];\n  }\n  /**\n   * called to set a 1 second timeout on the current recording\n   *\n   * this is so after each key press in the sequence the recording will wait for\n   * 1 more second before executing the callback\n   *\n   * @returns void\n   */\n\n\n  function _restartRecordTimer() {\n    clearTimeout(_recordTimer);\n    _recordTimer = setTimeout(_finishRecording, 1000);\n  }\n  /**\n   * records the next sequence and passes it to a callback once it's\n   * completed\n   *\n   * @param {Function} callback\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.record = function (callback) {\n    var self = this;\n    self.recording = true;\n\n    _recordedSequenceCallback = function _recordedSequenceCallback() {\n      self.recording = false;\n      callback.apply(self, arguments);\n    };\n  };\n\n  Mousetrap.prototype.handleKey = function () {\n    var self = this;\n\n    _handleKey.apply(self, arguments);\n  };\n\n  Mousetrap.init();\n})(Mousetrap); // Only imported in environment w/ `window`\n\n/**\n *\n *\n * @typedef {Object} HotkeyDefinition\n * @property {String} commandName - Command to call\n * @property {String} label - Display name for hotkey\n * @property {String[]} keys - Keys to bind; Follows Mousetrap.js binding syntax\n */\n\n\nvar HotkeysManager =\n/*#__PURE__*/\nfunction () {\n  function HotkeysManager(commandsManager) {\n    classCallCheck(this, HotkeysManager);\n    this.hotkeyDefinitions = {};\n    this.hotkeyDefaults = [];\n    this.isEnabled = true;\n\n    if (!commandsManager) {\n      log$1.warn('HotkeysManager instantiated without a commandsManager. Hotkeys will be unable to find and run commands.');\n    }\n\n    this._commandsManager = commandsManager;\n  }\n  /**\n   * Disables all hotkeys. Hotkeys added while disabled will not listen for\n   * input.\n   */\n\n\n  createClass(HotkeysManager, [{\n    key: \"disable\",\n    value: function disable() {\n      this.isEnabled = false;\n      mousetrap.pause();\n    }\n    /**\n     * Enables all hotkeys.\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.isEnabled = true;\n      mousetrap.unpause();\n    }\n    /**\n     * Registers a list of hotkeydefinitions. Optionally, sets the\n     * default hotkey bindings for all provided definitions. These\n     * values are used in `this.restoreDefaultBindings`.\n     *\n     * @param {HotkeyDefinition[]} hotkeyDefinitions\n     * @param {Boolean} [isDefaultDefinitions]\n     */\n\n  }, {\n    key: \"setHotkeys\",\n    value: function setHotkeys(hotkeyDefinitions) {\n      var _this = this;\n\n      var isDefaultDefinitions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      hotkeyDefinitions.forEach(function (definition) {\n        return _this.registerHotkeys(definition);\n      });\n\n      if (isDefaultDefinitions) {\n        this.hotkeyDefaults = hotkeyDefinitions;\n      }\n    }\n    /**\n     * (unbinds and) binds the specified command to one or more key combinations.\n     * When a hotkey combination is triggered, the command name and active contexts\n     * are used to locate the correct command to call.\n     *\n     * @param {HotkeyDefinition} commandName\n     * @param {String} extension\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"registerHotkeys\",\n    value: function registerHotkeys() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          commandName = _ref.commandName,\n          keys = _ref.keys,\n          label = _ref.label;\n\n      if (!commandName) {\n        log$1.warn(\"No command was defined for hotkey \\\"\".concat(keys, \"\\\"\"));\n        return;\n      }\n\n      var previouslyRegisteredDefinition = this.hotkeyDefinitions[commandName];\n\n      if (previouslyRegisteredDefinition) {\n        var previouslyRegisteredKeys = previouslyRegisteredDefinition.keys;\n\n        this._unbindHotkeys(commandName, previouslyRegisteredKeys);\n      } // Set definition & bind\n\n\n      this.hotkeyDefinitions[commandName] = {\n        keys: keys,\n        label: label\n      };\n\n      this._bindHotkeys(commandName, keys);\n    }\n    /**\n     * Uses most recent\n     *\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"restoreDefaultBindings\",\n    value: function restoreDefaultBindings() {\n      this.setHotkeys(this.hotkeyDefaults);\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hotkeyDefaults = [];\n      this.hotkeyDefinitions = {};\n      mousetrap.reset();\n    }\n    /**\n     * Binds one or more set of hotkey combinations for a given command\n     *\n     * @private\n     * @param {string} commandName - The name of the command to trigger when hotkeys are used\n     * @param {string[]} keys - One or more key combinations that should trigger command\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_bindHotkeys\",\n    value: function _bindHotkeys(commandName, keys) {\n      var _this2 = this;\n\n      var isKeyDefined = keys === '' || keys === undefined;\n\n      if (isKeyDefined) {\n        return;\n      }\n\n      var isKeyArray = keys instanceof Array;\n\n      if (isKeyArray) {\n        keys.forEach(function (key) {\n          return _this2._bindHotkeys(commandName, key);\n        });\n        return;\n      }\n\n      mousetrap.bind(keys, function (evt) {\n        _this2._commandsManager.runCommand(commandName, {\n          evt: evt\n        });\n      });\n    }\n    /**\n     * unbinds one or more set of hotkey combinations for a given command\n     *\n     * @private\n     * @param {string} commandName - The name of the previously bound command\n     * @param {string[]} keys - One or more sets of previously bound keys\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_unbindHotkeys\",\n    value: function _unbindHotkeys(commandName, keys) {\n      var _this3 = this;\n\n      var isKeyDefined = keys !== '' && keys !== undefined;\n\n      if (!isKeyDefined) {\n        return;\n      }\n\n      var isKeyArray = keys instanceof Array;\n\n      if (isKeyArray) {\n        keys.forEach(function (key) {\n          return _this3._unbindHotkeys(commandName, key);\n        });\n        return;\n      }\n\n      mousetrap.unbind(keys);\n    }\n  }]);\n  return HotkeysManager;\n}(); // --> Name and Priority\n// GLOBAL: 0\n// VIEWER::CORNERSTONE: 1\n// VIEWER::VTK: 1\n\n\nvar FUNCTION$1 = 'function';\n\nvar MetadataProvider =\n/*#__PURE__*/\nfunction () {\n  function MetadataProvider() {\n    classCallCheck(this, MetadataProvider); // Define the main \"metadataLookup\" private property as an immutable property.\n\n    Object.defineProperty(this, 'metadataLookup', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: new Map()\n    }); // Local reference to provider function bound to current instance.\n\n    Object.defineProperty(this, '_provider', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n  }\n  /**\n   * Cornerstone Metadata provider to store image meta data\n   * Data from instances, series, and studies are associated with\n   * imageIds to facilitate usage of this information by Cornerstone's Tools\n   *\n   * e.g. the imagePlane metadata object contains instance information about\n   * row/column pixel spacing, patient position, and patient orientation. It\n   * is used in CornerstoneTools to position reference lines and orientation markers.\n   *\n   * @param {String} imageId The Cornerstone ImageId\n   * @param {Object} data An object containing instance, series, and study metadata\n   */\n\n\n  createClass(MetadataProvider, [{\n    key: \"addMetadata\",\n    value: function addMetadata(imageId, data) {\n      var instanceMetadata = data.instance;\n      var seriesMetadata = data.series;\n      var studyMetadata = data.study;\n      var numImages = data.numImages;\n      var metadata = {};\n      metadata.frameNumber = data.frameNumber;\n      metadata.study = {\n        accessionNumber: studyMetadata.accessionNumber,\n        patientId: studyMetadata.patientId,\n        studyInstanceUid: studyMetadata.studyInstanceUid,\n        studyDate: studyMetadata.studyDate,\n        studyTime: studyMetadata.studyTime,\n        studyDescription: studyMetadata.studyDescription,\n        institutionName: studyMetadata.institutionName,\n        patientHistory: studyMetadata.patientHistory\n      };\n      metadata.series = {\n        seriesDescription: seriesMetadata.seriesDescription,\n        seriesNumber: seriesMetadata.seriesNumber,\n        seriesDate: seriesMetadata.seriesDate,\n        seriesTime: seriesMetadata.seriesTime,\n        modality: seriesMetadata.modality,\n        seriesInstanceUid: seriesMetadata.seriesInstanceUid,\n        numImages: numImages\n      };\n      metadata.instance = instanceMetadata;\n      metadata.patient = {\n        name: studyMetadata.patientName,\n        id: studyMetadata.patientId,\n        birthDate: studyMetadata.patientBirthDate,\n        sex: studyMetadata.patientSex,\n        age: studyMetadata.patientAge\n      }; // If there is sufficient information, populate\n      // the imagePlane object for easier use in the Viewer\n\n      metadata.imagePlane = this.getImagePlane(instanceMetadata); // Add the metadata to the imageId lookup object\n\n      this.metadataLookup.set(imageId, metadata);\n    }\n    /**\n     * Return the metadata for the given imageId\n     * @param {String} imageId The Cornerstone ImageId\n     * @returns image metadata\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata(imageId) {\n      return this.metadataLookup.get(imageId);\n    }\n    /**\n     * Adds a set of metadata to the Cornerstone metadata provider given a specific\n     * imageId, type, and dataset\n     *\n     * @param imageId\n     * @param type (e.g. series, instance, tagDisplay)\n     * @param data\n     */\n\n  }, {\n    key: \"addSpecificMetadata\",\n    value: function addSpecificMetadata(imageId, type, data) {\n      var metadata = {};\n      metadata[type] = data;\n      var oldMetadata = this.metadataLookup.get(imageId);\n      this.metadataLookup.set(imageId, Object.assign(oldMetadata, metadata));\n    }\n  }, {\n    key: \"getFromImage\",\n    value: function getFromImage(image, type, tag, attrName, defaultValue) {\n      var value;\n\n      if (image.data) {\n        value = this.getFromDataSet(image.data, type, tag);\n      } else {\n        value = image.instance[attrName];\n      }\n\n      return value === null ? defaultValue : value;\n    }\n  }, {\n    key: \"getFromDataSet\",\n    value: function getFromDataSet(dataSet, type, tag) {\n      if (!dataSet) {\n        return;\n      }\n\n      var fn = dataSet[type];\n\n      if (!fn) {\n        return;\n      }\n\n      return fn.call(dataSet, tag);\n    }\n  }, {\n    key: \"getFrameIncrementPointer\",\n    value: function getFrameIncrementPointer(image) {\n      var dataSet = image.data;\n      var frameInstancePointer = '';\n\n      if (parsingUtils.isValidDataSet(dataSet)) {\n        var frameInstancePointerNames = {\n          x00181063: 'frameTime',\n          x00181065: 'frameTimeVector'\n        }; // (0028,0009) = Frame Increment Pointer\n\n        var frameInstancePointerTag = parsingUtils.attributeTag(dataSet, 'x00280009');\n        frameInstancePointer = frameInstancePointerNames[frameInstancePointerTag];\n      } else {\n        frameInstancePointer = image.instance.frameIncrementPointer;\n      }\n\n      return frameInstancePointer || '';\n    }\n  }, {\n    key: \"getFrameTimeVector\",\n    value: function getFrameTimeVector(image) {\n      var dataSet = image.data;\n\n      if (parsingUtils.isValidDataSet(dataSet)) {\n        // Frame Increment Pointer points to Frame Time Vector (0018,1065) field\n        return parsingUtils.floatArray(dataSet, 'x00181065');\n      }\n\n      return image.instance.frameTimeVector;\n    }\n  }, {\n    key: \"getFrameTime\",\n    value: function getFrameTime(image) {\n      var dataSet = image.data;\n\n      if (parsingUtils.isValidDataSet(dataSet)) {\n        // Frame Increment Pointer points to Frame Time (0018,1063) field or is not defined (for addtional flexibility).\n        // Yet another value is possible for this field (5200,9230 for Multi-frame Functional Groups)\n        // but that case is currently not supported.\n        return dataSet.floatString('x00181063', -1);\n      }\n\n      return image.instance.frameTime;\n    }\n    /**\n     * Updates the related metadata for missing fields given a specified image\n     *\n     * @param image\n     */\n\n  }, {\n    key: \"updateMetadata\",\n    value: function updateMetadata(image) {\n      var imageMetadata = this.metadataLookup.get(image.imageId);\n\n      if (!imageMetadata) {\n        return;\n      }\n\n      imageMetadata.patient.age = imageMetadata.patient.age || this.getFromDataSet(image.data, 'string', 'x00101010');\n      imageMetadata.instance.rows = imageMetadata.instance.rows || image.rows;\n      imageMetadata.instance.columns = imageMetadata.instance.columns || image.columns;\n      imageMetadata.instance.sopClassUid = imageMetadata.instance.sopClassUid || this.getFromDataSet(image.data, 'string', 'x00080016');\n      imageMetadata.instance.sopInstanceUid = imageMetadata.instance.sopInstanceUid || this.getFromDataSet(image.data, 'string', 'x00080018');\n      imageMetadata.instance.pixelSpacing = imageMetadata.instance.pixelSpacing || this.getFromDataSet(image.data, 'string', 'x00280030');\n      imageMetadata.instance.frameOfReferenceUID = imageMetadata.instance.frameOfReferenceUID || this.getFromDataSet(image.data, 'string', 'x00200052');\n      imageMetadata.instance.imageOrientationPatient = imageMetadata.instance.imageOrientationPatient || this.getFromDataSet(image.data, 'string', 'x00200037');\n      imageMetadata.instance.imagePositionPatient = imageMetadata.instance.imagePositionPatient || this.getFromDataSet(image.data, 'string', 'x00200032');\n      imageMetadata.instance.sliceThickness = imageMetadata.instance.sliceThickness || this.getFromDataSet(image.data, 'string', 'x00180050');\n      imageMetadata.instance.sliceLocation = imageMetadata.instance.sliceLocation || this.getFromDataSet(image.data, 'string', 'x00201041');\n      imageMetadata.instance.tablePosition = imageMetadata.instance.tablePosition || this.getFromDataSet(image.data, 'string', 'x00189327');\n      imageMetadata.instance.spacingBetweenSlices = imageMetadata.instance.spacingBetweenSlices || this.getFromDataSet(image.data, 'string', 'x00180088');\n      imageMetadata.instance.lossyImageCompression = imageMetadata.instance.lossyImageCompression || this.getFromDataSet(image.data, 'string', 'x00282110');\n      imageMetadata.instance.lossyImageCompressionRatio = imageMetadata.instance.lossyImageCompressionRatio || this.getFromDataSet(image.data, 'string', 'x00282112');\n      imageMetadata.instance.frameIncrementPointer = imageMetadata.instance.frameIncrementPointer || this.getFromDataSet(image.data, 'string', 'x00280009');\n      imageMetadata.instance.frameTime = imageMetadata.instance.frameTime || this.getFromDataSet(image.data, 'string', 'x00181063');\n      imageMetadata.instance.frameTimeVector = imageMetadata.instance.frameTimeVector || this.getFromDataSet(image.data, 'string', 'x00181065');\n\n      if ((image.data || image.instance) && !imageMetadata.instance.multiframeMetadata) {\n        imageMetadata.instance.multiframeMetadata = this.getMultiframeModuleMetadata(image);\n      }\n\n      imageMetadata.imagePlane = imageMetadata.imagePlane || this.getImagePlane(imageMetadata.instance);\n    }\n    /**\n     * Constructs and returns the imagePlane given the metadata instance\n     *\n     * @param metadataInstance The metadata instance (InstanceMetadata class) containing information to construct imagePlane\n     * @returns imagePlane The constructed imagePlane to be used in viewer easily\n     */\n\n  }, {\n    key: \"getImagePlane\",\n    value: function getImagePlane(instance) {\n      if (!instance.rows || !instance.columns || !instance.pixelSpacing || !instance.frameOfReferenceUID || !instance.imageOrientationPatient || !instance.imagePositionPatient) {\n        return;\n      }\n\n      var imageOrientation = instance.imageOrientationPatient.split('\\\\');\n      var imagePosition = instance.imagePositionPatient.split('\\\\');\n      var columnPixelSpacing = 1.0;\n      var rowPixelSpacing = 1.0;\n\n      if (instance.pixelSpacing) {\n        var split = instance.pixelSpacing.split('\\\\');\n        rowPixelSpacing = parseFloat(split[0]);\n        columnPixelSpacing = parseFloat(split[1]);\n      }\n\n      return {\n        frameOfReferenceUID: instance.frameOfReferenceUID,\n        rows: instance.rows,\n        columns: instance.columns,\n        rowCosines: [parseFloat(imageOrientation[0]), parseFloat(imageOrientation[1]), parseFloat(imageOrientation[2])],\n        columnCosines: [parseFloat(imageOrientation[3]), parseFloat(imageOrientation[4]), parseFloat(imageOrientation[5])],\n        imagePositionPatient: [parseFloat(imagePosition[0]), parseFloat(imagePosition[1]), parseFloat(imagePosition[2])],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing\n      };\n    }\n    /**\n     * This function extracts miltiframe information from a dicomParser.DataSet object.\n     *\n     * @param dataSet {Object} An instance of dicomParser.DataSet object where multiframe information can be found.\n     * @return {Object} An object containing multiframe image metadata (frameIncrementPointer, frameTime, frameTimeVector, etc).\n     */\n\n  }, {\n    key: \"getMultiframeModuleMetadata\",\n    value: function getMultiframeModuleMetadata(image) {\n      var imageInfo = {\n        isMultiframeImage: false,\n        frameIncrementPointer: null,\n        numberOfFrames: 0,\n        frameTime: 0,\n        frameTimeVector: null,\n        averageFrameRate: 0 // backwards compatibility only... it might be useless in the future\n\n      };\n      var frameTime;\n      var numberOfFrames = this.getFromImage(image, 'intString', 'x00280008', 'numberOfFrames', -1);\n\n      if (numberOfFrames > 0) {\n        // set multi-frame image indicator\n        imageInfo.isMultiframeImage = true;\n        imageInfo.numberOfFrames = numberOfFrames; // (0028,0009) = Frame Increment Pointer\n\n        var frameIncrementPointer = this.getFrameIncrementPointer(image);\n\n        if (frameIncrementPointer === 'frameTimeVector') {\n          // Frame Increment Pointer points to Frame Time Vector (0018,1065) field\n          var frameTimeVector = this.getFrameTimeVector(image);\n\n          if (frameTimeVector instanceof Array && frameTimeVector.length > 0) {\n            imageInfo.frameIncrementPointer = frameIncrementPointer;\n            imageInfo.frameTimeVector = frameTimeVector;\n            frameTime = frameTimeVector.reduce(function (a, b) {\n              return a + b;\n            }) / frameTimeVector.length;\n            imageInfo.averageFrameRate = 1000 / frameTime;\n          }\n        } else if (frameIncrementPointer === 'frameTime' || frameIncrementPointer === '') {\n          frameTime = this.getFrameTime(image);\n\n          if (frameTime > 0) {\n            imageInfo.frameIncrementPointer = frameIncrementPointer;\n            imageInfo.frameTime = frameTime;\n            imageInfo.averageFrameRate = 1000 / frameTime;\n          }\n        }\n      }\n\n      return imageInfo;\n    }\n    /**\n     * Get a bound reference to the provider function.\n     */\n\n  }, {\n    key: \"getProvider\",\n    value: function getProvider() {\n      var provider = this._provider;\n\n      if (_typeof_1(this._provider) !== FUNCTION$1) {\n        provider = this.provider.bind(this);\n        this._provider = provider;\n      }\n\n      return provider;\n    }\n    /**\n     * Looks up metadata for Cornerstone Tools given a specified type and imageId\n     * A type may be, e.g. 'study', or 'patient', or 'imagePlaneModule'. These types\n     * are keys in the stored metadata objects.\n     *\n     * @param type\n     * @param imageId\n     * @returns {Object} Relevant metadata of the specified type\n     */\n\n  }, {\n    key: \"provider\",\n    value: function provider(type, imageId) {\n      var imageMetadata = this.metadataLookup.get(imageId);\n\n      if (!imageMetadata) {\n        return;\n      }\n\n      if (imageMetadata.hasOwnProperty(type)) {\n        return imageMetadata[type];\n      }\n    }\n  }]);\n  return MetadataProvider;\n}();\n\nvar ObjectPath =\n/*#__PURE__*/\nfunction () {\n  function ObjectPath() {\n    classCallCheck(this, ObjectPath);\n  }\n\n  createClass(ObjectPath, null, [{\n    key: \"set\",\n\n    /**\n     * Set an object property based on \"path\" (namespace) supplied creating\n     * ... intermediary objects if they do not exist.\n     * @param object {Object} An object where the properties specified on path should be set.\n     * @param path {String} A string representing the property to be set, e.g. \"user.study.series.timepoint\".\n     * @param value {Any} The value of the property that will be set.\n     * @return {Boolean} Returns \"true\" on success, \"false\" if any intermediate component of the supplied path\n     * ... is not a valid Object, in which case the property cannot be set. No excpetions are thrown.\n     */\n    value: function set(object, path, value) {\n      var components = ObjectPath.getPathComponents(path),\n          length = components !== null ? components.length : 0,\n          result = false;\n\n      if (length > 0 && ObjectPath.isValidObject(object)) {\n        var i = 0,\n            last = length - 1,\n            currentObject = object;\n\n        while (i < last) {\n          var field = components[i];\n\n          if (field in currentObject) {\n            if (!ObjectPath.isValidObject(currentObject[field])) {\n              break;\n            }\n          } else {\n            currentObject[field] = {};\n          }\n\n          currentObject = currentObject[field];\n          i++;\n        }\n\n        if (i === last) {\n          currentObject[components[last]] = value;\n          result = true;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Get an object property based on \"path\" (namespace) supplied traversing the object\n     * ... tree as necessary.\n     * @param object {Object} An object where the properties specified might exist.\n     * @param path {String} A string representing the property to be searched for, e.g. \"user.study.series.timepoint\".\n     * @return {Any} The value of the property if found. By default, returns the special type \"undefined\".\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(object, path) {\n      var found,\n          // undefined by default\n      components = ObjectPath.getPathComponents(path),\n          length = components !== null ? components.length : 0;\n\n      if (length > 0 && ObjectPath.isValidObject(object)) {\n        var i = 0,\n            last = length - 1,\n            currentObject = object;\n\n        while (i < last) {\n          var field = components[i];\n          var isValid = ObjectPath.isValidObject(currentObject[field]);\n\n          if (field in currentObject && isValid) {\n            currentObject = currentObject[field];\n            i++;\n          } else {\n            break;\n          }\n        }\n\n        if (i === last && components[last] in currentObject) {\n          found = currentObject[components[last]];\n        }\n      }\n\n      return found;\n    }\n    /**\n     * Check if the supplied argument is a real JavaScript Object instance.\n     * @param object {Any} The subject to be tested.\n     * @return {Boolean} Returns \"true\" if the object is a real Object instance and \"false\" otherwise.\n     */\n\n  }, {\n    key: \"isValidObject\",\n    value: function isValidObject(object) {\n      return _typeof_1(object) === 'object' && object !== null && object instanceof Object;\n    }\n  }, {\n    key: \"getPathComponents\",\n    value: function getPathComponents(path) {\n      return typeof path === 'string' ? path.split('.') : null;\n    }\n  }]);\n  return ObjectPath;\n}();\n\nfunction absoluteUrl(path) {\n  var absolutePath = '/'; // TODO: Find another way to get root url\n\n  var absoluteUrl = window.location.origin;\n  var absoluteUrlParts = absoluteUrl.split('/');\n\n  if (absoluteUrlParts.length > 4) {\n    var rootUrlPrefixIndex = absoluteUrl.indexOf(absoluteUrlParts[3]);\n    absolutePath += absoluteUrl.substring(rootUrlPrefixIndex) + path;\n  } else {\n    absolutePath += path;\n  }\n\n  return absolutePath.replace(/\\/\\/+/g, '/');\n} // TODO: figure out where else to put this function\n\n\nfunction addServers(servers, store) {\n  Object.keys(servers).forEach(function (serverType) {\n    var endpoints = servers[serverType];\n    endpoints.forEach(function (endpoint) {\n      var server = Object.assign({}, endpoint);\n      server.type = serverType;\n      store.dispatch({\n        type: 'ADD_SERVER',\n        server: server\n      });\n    });\n  });\n} // Return the array sorting function for its object's properties\n\n\nfunction sortBy() {\n  var fields = [].slice.call(arguments),\n      n_fields = fields.length;\n  return function (A, B) {\n    var a, b, field, key, reverse, result, i;\n\n    for (i = 0; i < n_fields; i++) {\n      result = 0;\n      field = fields[i];\n      key = typeof field === 'string' ? field : field.name;\n      a = A[key];\n      b = B[key];\n\n      if (typeof field.primer !== 'undefined') {\n        a = field.primer(a);\n        b = field.primer(b);\n      }\n\n      reverse = field.reverse ? -1 : 1;\n\n      if (a < b) {\n        result = reverse * -1;\n      }\n\n      if (a > b) {\n        result = reverse * 1;\n      }\n\n      if (result !== 0) {\n        break;\n      }\n    }\n\n    return result;\n  };\n}\n/**\n * Constants\n */\n\n\nvar PROPERTY_SEPARATOR = '.';\nvar ORDER_ASC = 'asc';\nvar ORDER_DESC = 'desc';\nvar MIN_COUNT = 0x00000000;\nvar MAX_COUNT = 0x7fffffff;\n/**\n * Class Definition\n */\n\nvar TypeSafeCollection =\n/*#__PURE__*/\nfunction () {\n  function TypeSafeCollection() {\n    classCallCheck(this, TypeSafeCollection);\n    this._operationCount = MIN_COUNT;\n    this._elementList = [];\n    this._handlers = Object.create(null);\n  }\n  /**\n   * Private Methods\n   */\n\n\n  createClass(TypeSafeCollection, [{\n    key: \"_invalidate\",\n    value: function _invalidate() {\n      var count = this._operationCount;\n      this._operationCount = count < MAX_COUNT ? count + 1 : MIN_COUNT;\n    }\n  }, {\n    key: \"_elements\",\n    value: function _elements(silent) {\n      silent === true || this._operationCount;\n      return this._elementList;\n    }\n  }, {\n    key: \"_elementWithPayload\",\n    value: function _elementWithPayload(payload, silent) {\n      return this._elements(silent).find(function (item) {\n        return item.payload === payload;\n      });\n    }\n  }, {\n    key: \"_elementWithId\",\n    value: function _elementWithId(id, silent) {\n      return this._elements(silent).find(function (item) {\n        return item.id === id;\n      });\n    }\n  }, {\n    key: \"_trigger\",\n    value: function _trigger(event, data) {\n      var handlers = this._handlers;\n\n      if (event in handlers) {\n        handlers = handlers[event];\n\n        if (!(handlers instanceof Array)) {\n          return;\n        }\n\n        for (var i = 0, limit = handlers.length; i < limit; ++i) {\n          var handler = handlers[i];\n\n          if (_isFunction(handler)) {\n            handler.call(null, data);\n          }\n        }\n      }\n    }\n    /**\n     * Public Methods\n     */\n\n  }, {\n    key: \"onInsert\",\n    value: function onInsert(callback) {\n      if (_isFunction(callback)) {\n        var handlers = this._handlers.insert;\n\n        if (!(handlers instanceof Array)) {\n          handlers = [];\n          this._handlers.insert = handlers;\n        }\n\n        handlers.push(callback);\n      }\n    }\n    /**\n     * Update the payload associated with the given ID to be the new supplied payload.\n     * @param {string} id The ID of the entry that will be updated.\n     * @param {any} payload The element that will replace the previous payload.\n     * @returns {boolean} Returns true if the given ID is present in the collection, false otherwise.\n     */\n\n  }, {\n    key: \"updateById\",\n    value: function updateById(id, payload) {\n      var result = false,\n          found = this._elementWithPayload(payload, true);\n\n      if (found) {\n        // nothing to do since the element is already in the collection...\n        if (found.id === id) {\n          // set result to true since the ids match...\n          result = true;\n\n          this._invalidate();\n        }\n      } else {\n        found = this._elementWithId(id, true);\n\n        if (found) {\n          found.payload = payload;\n          result = true;\n\n          this._invalidate();\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Signal that the given element has been changed by notifying reactive data-source observers.\n     * This method is basically a means to invalidate the inernal reactive data-source.\n     * @param {any} payload The element that has been altered.\n     * @returns {boolean} Returns true if the element is present in the collection, false otherwise.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(payload) {\n      var result = false,\n          found = this._elementWithPayload(payload, true);\n\n      if (found) {\n        // nothing to do since the element is already in the collection...\n        result = true;\n\n        this._invalidate();\n      }\n\n      return result;\n    }\n    /**\n     * Insert an element in the collection. On success, the element ID (a unique string) is returned. On failure, returns null.\n     * A failure scenario only happens when the given payload is already present in the collection. Note that NO exceptions are thrown!\n     * @param {any} payload The element to be stored.\n     * @returns {string} The ID of the inserted element or null if the element already exists...\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(payload) {\n      var id = null,\n          found = this._elementWithPayload(payload, true);\n\n      if (!found) {\n        id = guid();\n\n        this._elements(true).push({\n          id: id,\n          payload: payload\n        });\n\n        this._invalidate();\n\n        this._trigger('insert', {\n          id: id,\n          data: payload\n        });\n      }\n\n      return id;\n    }\n    /**\n     * Remove all elements from the collection.\n     * @returns {void} No meaningful value is returned.\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var all = this._elements(true),\n          length = all.length;\n\n      for (var i = length - 1; i >= 0; i--) {\n        var item = all[i];\n        delete item.id;\n        delete item.payload;\n        all[i] = null;\n      }\n\n      all.splice(0, length);\n\n      this._invalidate();\n    }\n    /**\n     * Remove elements from the collection that match the criteria given in the property map.\n     * @param {Object} propertyMap A property map that will be macthed against all collection elements.\n     * @returns {Array} A list with all removed elements.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(propertyMap) {\n      var found = this.findAllEntriesBy(propertyMap),\n          foundCount = found.length,\n          removed = [];\n\n      if (foundCount > 0) {\n        var all = this._elements(true);\n\n        for (var i = foundCount - 1; i >= 0; i--) {\n          var item = found[i];\n          all.splice(item[2], 1);\n          removed.push(item[0]);\n        }\n\n        this._invalidate();\n      }\n\n      return removed;\n    }\n    /**\n     * Provides the ID of the given element inside the collection.\n     * @param {any} payload The element being searched for.\n     * @returns {string} The ID of the given element or undefined if the element is not present.\n     */\n\n  }, {\n    key: \"getElementId\",\n    value: function getElementId(payload) {\n      var found = this._elementWithPayload(payload);\n\n      return found && found.id;\n    }\n    /**\n     * Provides the position of the given element in the internal list returning -1 if the element is not present.\n     * @param {any} payload The element being searched for.\n     * @returns {number} The position of the given element in the internal list. If the element is not present -1 is returned.\n     */\n\n  }, {\n    key: \"findById\",\n    value: function findById(id) {\n      var found = this._elementWithId(id);\n\n      return found && found.payload;\n    }\n    /**\n     * Provides the position of the given element in the internal list returning -1 if the element is not present.\n     * @param {any} payload The element being searched for.\n     * @returns {number} The position of the given element in the internal list. If the element is not present -1 is returned.\n     */\n\n  }, {\n    key: \"indexOfElement\",\n    value: function indexOfElement(payload) {\n      return this._elements().indexOf(this._elementWithPayload(payload, true));\n    }\n    /**\n     * Provides the position of the element associated with the given ID in the internal list returning -1 if the element is not present.\n     * @param {string} id The index of the element.\n     * @returns {number} The position of the element associated with the given ID in the internal list. If the element is not present -1 is returned.\n     */\n\n  }, {\n    key: \"indexOfId\",\n    value: function indexOfId(id) {\n      return this._elements().indexOf(this._elementWithId(id, true));\n    }\n    /**\n     * Provides a list-like approach to the collection returning an element by index.\n     * @param {number} index The index of the element.\n     * @returns {any} If out of bounds, undefined is returned. Otherwise the element in the given position is returned.\n     */\n\n  }, {\n    key: \"getElementByIndex\",\n    value: function getElementByIndex(index) {\n      var found = this._elements()[index >= 0 ? index : -1];\n\n      return found && found.payload;\n    }\n    /**\n     * Find an element by a criteria defined by the given callback function.\n     * Attention!!! The reactive source will not be notified if no valid callback is supplied...\n     * @param {function} callback A callback function which will define the search criteria. The callback\n     * function will be passed the collection element, its ID and its index in this very order. The callback\n     * shall return true when its criterea has been fulfilled.\n     * @returns {any} The matched element or undefined if not match was found.\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(callback) {\n      var _this = this;\n\n      var found;\n\n      if (_isFunction(callback)) {\n        found = this._elements().find(function (item, index) {\n          return callback.call(_this, item.payload, item.id, index);\n        });\n      }\n\n      return found && found.payload;\n    }\n    /**\n     * Find the first element that strictly matches the specified property map.\n     * @param {Object} propertyMap A property map that will be macthed against all collection elements.\n     * @param {Object} options A set of options. Currently only \"options.sort\" option is supported.\n     * @param {Object.SortingSpecifier} options.sort An optional sorting specifier. If a sorting specifier is supplied\n     * but is not valid, an exception will be thrown.\n     * @returns {Any} The matched element or undefined if not match was found.\n     */\n\n  }, {\n    key: \"findBy\",\n    value: function findBy(propertyMap, options) {\n      var found;\n\n      if (_isObject(options)) {\n        // if the \"options\" argument is provided and is a valid object,\n        // it must be applied to the dataset before search...\n        var all = this.all(options);\n\n        if (all.length > 0) {\n          if (_isObject(propertyMap)) {\n            found = all.find(function (item) {\n              return _compareToPropertyMapStrict(propertyMap, item);\n            });\n          } else {\n            found = all[0]; // simply extract the first element...\n          }\n        }\n      } else if (_isObject(propertyMap)) {\n        found = this._elements().find(function (item) {\n          return _compareToPropertyMapStrict(propertyMap, item.payload);\n        });\n\n        if (found) {\n          found = found.payload;\n        }\n      }\n\n      return found;\n    }\n    /**\n     * Find all elements that strictly match the specified property map.\n     * Attention!!! The reactive source will not be notified if no valid property map is supplied...\n     * @param {Object} propertyMap A property map that will be macthed against all collection elements.\n     * @returns {Array} An array of entries of all elements that match the given criteria. Each set in\n     * in the array has the following format: [ elementData, elementId, elementIndex ].\n     */\n\n  }, {\n    key: \"findAllEntriesBy\",\n    value: function findAllEntriesBy(propertyMap) {\n      var found = [];\n\n      if (_isObject(propertyMap)) {\n        this._elements().forEach(function (item, index) {\n          if (_compareToPropertyMapStrict(propertyMap, item.payload)) {\n            // Match! Add it to the found list...\n            found.push([item.payload, item.id, index]);\n          }\n        });\n      }\n\n      return found;\n    }\n    /**\n     * Find all elements that match a specified property map.\n     * Attention!!! The reactive source will not be notified if no valid property map is supplied...\n     * @param {Object} propertyMap A property map that will be macthed against all collection elements.\n     * @param {Object} options A set of options. Currently only \"options.sort\" option is supported.\n     * @param {Object.SortingSpecifier} options.sort An optional sorting specifier. If a sorting specifier is supplied\n     * but is not valid, an exception will be thrown.\n     * @returns {Array} An array with all elements that match the given criteria and sorted in the specified sorting order.\n     */\n\n  }, {\n    key: \"findAllBy\",\n    value: function findAllBy(propertyMap, options) {\n      var found = this.findAllEntriesBy(propertyMap).map(function (item) {\n        return item[0];\n      }); // Only payload is relevant...\n\n      if (_isObject(options)) {\n        if ('sort' in options) {\n          _sortListBy(found, options.sort);\n        }\n      }\n\n      return found;\n    }\n    /**\n     * Executes the supplied callback function for each element of the collection.\n     * Attention!!! The reactive source will not be notified if no valid property map is supplied...\n     * @param {function} callback The callback function to be executed. The callback is passed the element,\n     * its ID and its index in this very order.\n     * @returns {void} Nothing is returned.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _this2 = this;\n\n      if (_isFunction(callback)) {\n        this._elements().forEach(function (item, index) {\n          callback.call(_this2, item.payload, item.id, index);\n        });\n      }\n    }\n    /**\n     * Count the number of elements currently in the collection.\n     * @returns {number} The current number of elements in the collection.\n     */\n\n  }, {\n    key: \"count\",\n    value: function count() {\n      return this._elements().length;\n    }\n    /**\n     * Returns a list with all elements of the collection optionally sorted by a sorting specifier criteria.\n     * @param {Object} options A set of options. Currently only \"options.sort\" option is supported.\n     * @param {Object.SortingSpecifier} options.sort An optional sorting specifier. If a sorting specifier is supplied\n     * but is not valid, an exception will be thrown.\n     * @returns {Array} An array with all elements stored in the collection.\n     */\n\n  }, {\n    key: \"all\",\n    value: function all(options) {\n      var list = this._elements().map(function (item) {\n        return item.payload;\n      });\n\n      if (_isObject(options)) {\n        if ('sort' in options) {\n          _sortListBy(list, options.sort);\n        }\n      }\n\n      return list;\n    }\n  }]);\n  return TypeSafeCollection;\n}();\n/**\n * Utility Functions\n */\n\n/**\n * Test if supplied argument is a valid object for current class purposes.\n * Atention! The underscore version of this function should not be used for performance reasons.\n */\n\n\nfunction _isObject(subject) {\n  return subject instanceof Object || _typeof_1(subject) === 'object' && subject !== null;\n}\n/**\n * Test if supplied argument is a valid string for current class purposes.\n * Atention! The underscore version of this function should not be used for performance reasons.\n */\n\n\nfunction _isString(subject) {\n  return typeof subject === 'string';\n}\n/**\n * Test if supplied argument is a valid function for current class purposes.\n * Atention! The underscore version of this function should not be used for performance reasons.\n */\n\n\nfunction _isFunction(subject) {\n  return typeof subject === 'function';\n}\n/**\n * Shortcut for Object's prototype \"hasOwnProperty\" method.\n */\n\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Retrieve an object's property value by name. Composite property names (e.g., 'address.country.name') are accepted.\n * @param {Object} targetObject The object we want read the property from...\n * @param {String} propertyName The property to be read (e.g., 'address.street.name' or 'address.street.number'\n * to read object.address.street.name or object.address.street.number, respectively);\n * @returns {Any} Returns whatever the property holds or undefined if the property cannot be read or reached.\n */\n\nfunction _getPropertyValue(targetObject, propertyName) {\n  var propertyValue; // undefined (the default return value)\n\n  if (_isObject(targetObject) && _isString(propertyName)) {\n    var fragments = propertyName.split(PROPERTY_SEPARATOR);\n    var fragmentCount = fragments.length;\n\n    if (fragmentCount > 0) {\n      var firstFragment = fragments[0];\n      var remainingFragments = fragmentCount > 1 ? fragments.slice(1).join(PROPERTY_SEPARATOR) : null;\n      propertyValue = targetObject[firstFragment];\n\n      if (remainingFragments !== null) {\n        propertyValue = _getPropertyValue(propertyValue, remainingFragments);\n      }\n    }\n  }\n\n  return propertyValue;\n}\n/**\n * Compare a property map with a target object using strict comparison.\n * @param {Object} propertyMap The property map whose properties will be used for comparison. Composite\n * property names (e.g., 'address.country.name') will be tested against the \"resolved\" properties from the target object.\n * @param {Object} targetObject The target object whose properties will be tested.\n * @returns {boolean} Returns true if the properties match, false otherwise.\n */\n\n\nfunction _compareToPropertyMapStrict(propertyMap, targetObject) {\n  var result = false; // \"for in\" loops do not thown exceptions for invalid data types...\n\n  for (var propertyName in propertyMap) {\n    if (_hasOwnProperty.call(propertyMap, propertyName)) {\n      if (propertyMap[propertyName] !== _getPropertyValue(targetObject, propertyName)) {\n        result = false;\n        break;\n      } else if (result !== true) {\n        result = true;\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Checks if a sorting specifier is valid.\n * A valid sorting specifier consists of an array of arrays being each subarray a pair\n * in the format [\"property name\", \"sorting order\"].\n * The following exemple can be used to sort studies by \"date\"\" and use \"time\" to break ties in descending order.\n * [ [ 'study.date', 'desc' ], [ 'study.time', 'desc' ] ]\n * @param {Array} specifiers The sorting specifier to be tested.\n * @returns {boolean} Returns true if the specifiers are valid, false otherwise.\n */\n\n\nfunction _isValidSortingSpecifier(specifiers) {\n  var result = true;\n\n  if (specifiers instanceof Array && specifiers.length > 0) {\n    for (var i = specifiers.length - 1; i >= 0; i--) {\n      var item = specifiers[i];\n\n      if (item instanceof Array) {\n        var property = item[0];\n        var order = item[1];\n\n        if (_isString(property) && (order === ORDER_ASC || order === ORDER_DESC)) {\n          continue;\n        }\n      }\n\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Sorts an array based on sorting specifier options.\n * @param {Array} list The that needs to be sorted.\n * @param {Array} specifiers An array of specifiers. Please read isValidSortingSpecifier method definition for further details.\n * @returns {void} No value is returned. The array is sorted in place.\n */\n\n\nfunction _sortListBy(list, specifiers) {\n  if (list instanceof Array && _isValidSortingSpecifier(specifiers)) {\n    var specifierCount = specifiers.length;\n    list.sort(function _sortListByCallback(a, b) {\n      // callback name for stack traces...\n      var index = 0;\n\n      while (index < specifierCount) {\n        var specifier = specifiers[index];\n        var property = specifier[0];\n        var order = specifier[1] === ORDER_DESC ? -1 : 1;\n\n        var aValue = _getPropertyValue(a, property);\n\n        var bValue = _getPropertyValue(b, property); // @TODO: should we check for the types being compared, like:\n        // ~~ if (typeof aValue !== typeof bValue) continue;\n        // Not sure because dates, for example, can be correctly compared to numbers...\n\n\n        if (aValue < bValue) {\n          return order * -1;\n        }\n\n        if (aValue > bValue) {\n          return order * 1;\n        }\n\n        if (++index >= specifierCount) {\n          return 0;\n        }\n      }\n    });\n  } else {\n    throw new Error('Invalid Arguments');\n  }\n}\n\nvar studyMetadataList = new TypeSafeCollection();\n\nfunction add(studyMetadata) {\n  studyMetadataList.insert(studyMetadata);\n}\n\nfunction get(studyInstanceUID) {\n  return studyMetadataList.findBy({\n    studyInstanceUID: studyInstanceUID\n  });\n}\n\nfunction all(options) {\n  return studyMetadataList.all(options);\n}\n\nfunction remove(studyInstanceUID) {\n  studyMetadataList.remove({\n    studyInstanceUID: studyInstanceUID\n  });\n}\n\nfunction purge() {\n  studyMetadataList.removeAll();\n}\n\nvar studyMetadataManager = {\n  add: add,\n  get: get,\n  all: all,\n  remove: remove,\n  purge: purge\n};\n\nfunction getRadiopharmaceuticalInfoMetaData(instance) {\n  var radiopharmaceuticalInfo = instance.radiopharmaceuticalInfo;\n\n  if (instance.modality !== 'PT' || !radiopharmaceuticalInfo) {\n    return;\n  }\n\n  return new WadoRsMetaDataBuilder().addTag('00181072', radiopharmaceuticalInfo.radiopharmaceuticalStartTime).addTag('00181074', radiopharmaceuticalInfo.radionuclideTotalDose).addTag('00181075', radiopharmaceuticalInfo.radionuclideHalfLife).toJSON();\n}\n\nvar getWadoRsInstanceMetaData = function getWadoRsInstanceMetaData(study, series, instance) {\n  return new WadoRsMetaDataBuilder().addTag('00080016', instance.sopClassUid).addTag('00080018', instance.sopInstanceUid).addTag('00080021', series.seriesDate).addTag('00080031', series.seriesTime).addTag('0008103e', series.seriesDescription).addTag('00080060', series.modality).addTag('00101010', study.patientAge).addTag('00101020', study.patientSize).addTag('00101030', study.patientWeight).addTag('0020000d', study.studyInstanceUid).addTag('00081030', study.studyDescription).addTag('00100010', study.patientName).addTag('00100020', study.patientId).addTag('00080020', study.studyDate).addTag('00080030', study.studyTime).addTag('00080050', study.accessionNumber).addTag('00200013', instance.instanceNumber).addTag('00180050', instance.sliceThickness).addTag('0020000e', series.seriesInstanceUid).addTag('00200011', series.seriesNumber).addTag('00200032', instance.imagePositionPatient, true).addTag('00200037', instance.imageOrientationPatient, true).addTag('00200052', instance.frameOfReferenceUID).addTag('00201041', instance.sliceLocation).addTag('00280002', instance.samplesPerPixel).addTag('00280004', instance.photometricInterpretation).addTag('00280006', instance.planarConfiguration).addTag('00280010', instance.rows).addTag('00280011', instance.columns).addTag('00280030', instance.pixelSpacing, true).addTag('00280034', instance.pixelAspectRatio, true).addTag('00280100', instance.bitsAllocated).addTag('00280101', instance.bitsStored).addTag('00280102', instance.highBit).addTag('00280103', instance.pixelRepresentation).addTag('00280106', instance.smallestPixelValue).addTag('00280107', instance.largestPixelValue).addTag('00281050', instance.windowCenter, true).addTag('00281051', instance.windowWidth, true).addTag('00281052', instance.rescaleIntercept).addTag('00281053', instance.rescaleSlope).addTag('00281054', instance.rescaleType).addTag('00281101', instance.redPaletteColorLookupTableDescriptor).addTag('00281102', instance.greenPaletteColorLookupTableDescriptor).addTag('00281103', instance.bluePaletteColorLookupTableDescriptor).addTag('00281201', instance.redPaletteColorLookupTableData).addTag('00281202', instance.greenPaletteColorLookupTableData).addTag('00281203', instance.bluePaletteColorLookupTableData).addTag('00540016', getRadiopharmaceuticalInfoMetaData(instance)).toJSON();\n};\n\nfunction updateMetaDataManager(study) {\n  study.seriesList.forEach(function (series) {\n    series.instances.forEach(function (instance) {\n      // Cache just images that are going to be loaded via WADO-RS\n      if (instance.imageRendering !== 'wadors' && instance.thumbnailRendering !== 'wadors') {\n        return;\n      }\n\n      var metaData = getWadoRsInstanceMetaData(study, series, instance);\n      var numberOfFrames = instance.numberOfFrames || 1; // We can share the same metaData with all frames because it doesn't have\n      // any frame specific data, such as frameNumber, pixelData, offset, etc.\n      // WADO-RS frame number is 1-based\n\n      for (var frameNumber = 0; frameNumber < numberOfFrames; frameNumber++) {\n        var imageId = getWADORSImageId(instance, frameNumber); // TODO Drop dependency on this\n\n        cornerstoneWADOImageLoader.wadors.metaDataManager.add(imageId, metaData);\n      }\n    });\n  });\n}\n/* jshint -W060 */\n\n\nfunction writeScript(fileName, callback) {\n  var script = document.createElement('script');\n  script.src = absoluteUrl(fileName);\n\n  script.onload = function () {\n    if (typeof callback === 'function') {\n      callback(script);\n    }\n  };\n\n  document.body.appendChild(script);\n}\n\nvar utils$1 = {\n  guid: guid,\n  ObjectPath: ObjectPath,\n  absoluteUrl: absoluteUrl,\n  addServers: addServers,\n  sortBy: sortBy,\n  writeScript: writeScript,\n  StackManager: StackManager,\n  studyMetadataManager: studyMetadataManager,\n  // Updates WADO-RS metaDataManager\n  updateMetaDataManager: updateMetaDataManager,\n  DICOMTagDescriptions: DICOMTagDescriptions\n};\n/**\n * Abstract class to fetch study metadata.\n */\n\nvar StudyMetadataSource =\n/*#__PURE__*/\nfunction () {\n  function StudyMetadataSource() {\n    classCallCheck(this, StudyMetadataSource);\n  }\n\n  createClass(StudyMetadataSource, [{\n    key: \"getByInstanceUID\",\n\n    /**\n     * Get study metadata for a study with given study InstanceUID.\n     * @param {String} studyInstanceUID Study InstanceUID.\n     */\n    value: function getByInstanceUID(studyInstanceUID) {\n      /**\n       * Please override this method on a specialized class.\n       */\n      throw new OHIFError('StudyMetadataSource::getByInstanceUID is not overriden. Please, override it in a specialized class. See OHIFStudyMetadataSource for example');\n    }\n    /**\n     * Load study info and study metadata for a given study into the viewer.\n     * @param {StudySummary|StudyMetadata} study of StudySummary or StudyMetadata object.\n     */\n\n  }, {\n    key: \"loadStudy\",\n    value: function loadStudy(study) {\n      /**\n       * Please override this method on a specialized class.\n       */\n      throw new OHIFError('StudyMetadataSource::loadStudy is not overriden. Please, override it in a specialized class. See OHIFStudyMetadataSource for example');\n    }\n  }]);\n  return StudyMetadataSource;\n}();\n\nvar runtime = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  !function (global) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    var runtime = global.regeneratorRuntime;\n\n    if (runtime) {\n      {\n        // If regeneratorRuntime is defined globally and we're in a module,\n        // make the exports object identical to regeneratorRuntime.\n        module.exports = runtime;\n      } // Don't bother evaluating the rest of this file if the runtime was\n      // already defined globally.\n\n      return;\n    } // Define the runtime globally (as expected by generated code) as either\n    // module.exports (if we're in a module) or a new, empty object.\n\n\n    runtime = global.regeneratorRuntime = module.exports;\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        prototype[method] = function (arg) {\n          return this._invoke(method, arg);\n        };\n      });\n    }\n\n    runtime.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    runtime.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n\n        if (!(toStringTagSymbol in genFun)) {\n          genFun[toStringTagSymbol] = \"GeneratorFunction\";\n        }\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    runtime.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return Promise.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return Promise.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new Promise(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n\n    runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          if (delegate.iterator.return) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    runtime.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    runtime.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function reset(skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined;\n            }\n          }\n        }\n      },\n      stop: function stop() {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function dispatchException(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function abrupt(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function complete(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function finish(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function _catch(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined;\n        }\n\n        return ContinueSentinel;\n      }\n    };\n  }( // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  function () {\n    return this || typeof self === \"object\" && self;\n  }() || Function(\"return this\")());\n});\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\n\nvar g = function () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nvar runtimeModule = runtime;\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\nvar regenerator = runtimeModule;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar asyncToGenerator = _asyncToGenerator;\nvar WADOProxy = {\n  convertURL: function convertURL(url, server) {\n    // TODO: Remove all WADOProxy stuff from this file\n    return url;\n  }\n};\n\nfunction parseFloatArray(obj) {\n  var result = [];\n\n  if (!obj) {\n    return result;\n  }\n\n  var objs = obj.split('\\\\');\n\n  for (var i = 0; i < objs.length; i++) {\n    result.push(parseFloat(objs[i]));\n  }\n\n  return result;\n}\n/**\n * Simple cache schema for retrieved color palettes.\n */\n\n\nvar paletteColorCache = {\n  count: 0,\n  maxAge: 24 * 60 * 60 * 1000,\n  // 24h cache?\n  entries: {},\n  isValidUID: function isValidUID(paletteUID) {\n    return typeof paletteUID === 'string' && paletteUID.length > 0;\n  },\n  get: function get(paletteUID) {\n    var entry = null;\n\n    if (this.entries.hasOwnProperty(paletteUID)) {\n      entry = this.entries[paletteUID]; // check how the entry is...\n\n      if (Date.now() - entry.time > this.maxAge) {\n        // entry is too old... remove entry.\n        delete this.entries[paletteUID];\n        this.count--;\n        entry = null;\n      }\n    }\n\n    return entry;\n  },\n  add: function add(entry) {\n    if (this.isValidUID(entry.uid)) {\n      var paletteUID = entry.uid;\n\n      if (this.entries.hasOwnProperty(paletteUID) !== true) {\n        this.count++; // increment cache entry count...\n      }\n\n      entry.time = Date.now();\n      this.entries[paletteUID] = entry; // @TODO: Add logic to get rid of old entries and reduce memory usage...\n    }\n  }\n};\n/** Returns a WADO url for an instance\n *\n * @param studyInstanceUid\n * @param seriesInstanceUid\n * @param sopInstanceUid\n * @returns  {string}\n */\n\nfunction buildInstanceWadoUrl(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid) {\n  // TODO: This can be removed, since DICOMWebClient has the same function. Not urgent, though\n  var params = [];\n  params.push('requestType=WADO');\n  params.push(\"studyUID=\".concat(studyInstanceUid));\n  params.push(\"seriesUID=\".concat(seriesInstanceUid));\n  params.push(\"objectUID=\".concat(sopInstanceUid));\n  params.push('contentType=application/dicom');\n  params.push('transferSyntax=*');\n  var paramString = params.join('&');\n  return \"\".concat(server.wadoUriRoot, \"?\").concat(paramString);\n}\n\nfunction buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid) {\n  return \"\".concat(server.wadoRoot, \"/studies/\").concat(studyInstanceUid, \"/series/\").concat(seriesInstanceUid, \"/instances/\").concat(sopInstanceUid);\n}\n\nfunction buildInstanceFrameWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid, frame) {\n  var baseWadoRsUri = buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n  frame = frame != null || 1;\n  return \"\".concat(baseWadoRsUri, \"/frames/\").concat(frame);\n}\n/**\n * Parses the SourceImageSequence, if it exists, in order\n * to return a ReferenceSOPInstanceUID. The ReferenceSOPInstanceUID\n * is used to refer to this image in any accompanying DICOM-SR documents.\n *\n * @param instance\n * @returns {String} The ReferenceSOPInstanceUID\n */\n\n\nfunction getSourceImageInstanceUid(instance) {\n  // TODO= Parse the whole Source Image Sequence\n  // This is a really poor workaround for now.\n  // Later we should probably parse the whole sequence.\n  var SourceImageSequence = instance['00082112'];\n\n  if (SourceImageSequence && SourceImageSequence.Value && SourceImageSequence.Value.length) {\n    return SourceImageSequence.Value[0]['00081155'].Value[0];\n  }\n}\n\nfunction getPaletteColor(server, instance, tag, lutDescriptor) {\n  var numLutEntries = lutDescriptor[0];\n  var bits = lutDescriptor[2];\n  var uri = WADOProxy.convertURL(instance[tag].BulkDataURI, server); // TODO: Workaround for dcm4chee behind SSL-terminating proxy returning\n  // incorrect bulk data URIs\n\n  if (server.wadoRoot.indexOf('https') === 0 && !uri.includes('https')) {\n    uri = uri.replace('http', 'https');\n  }\n\n  var config = {\n    url: server.wadoRoot,\n    //BulkDataURI is absolute, so this isn't used\n    headers: DICOMWeb.getAuthorizationHeader(server)\n  };\n  var dicomWeb = new api.DICOMwebClient(config);\n  var options = {\n    BulkDataURI: uri\n  };\n\n  var readUInt16 = function readUInt16(byteArray, position) {\n    return byteArray[position] + byteArray[position + 1] * 256;\n  };\n\n  var arrayBufferToPaletteColorLUT = function arrayBufferToPaletteColorLUT(arraybuffer) {\n    var byteArray = new Uint8Array(arraybuffer);\n    var lut = [];\n\n    for (var i = 0; i < numLutEntries; i++) {\n      if (bits === 16) {\n        lut[i] = readUInt16(byteArray, i * 2);\n      } else {\n        lut[i] = byteArray[i];\n      }\n    }\n\n    return lut;\n  };\n\n  return dicomWeb.retrieveBulkData(options).then(arrayBufferToPaletteColorLUT);\n}\n/**\n * Fetch palette colors for instances with \"PALETTE COLOR\" photometricInterpretation.\n *\n * @param server {Object} Current server;\n * @param instance {Object} The retrieved instance metadata;\n * @returns {String} The ReferenceSOPInstanceUID\n */\n\n\nfunction getPaletteColors(_x, _x2, _x3) {\n  return _getPaletteColors.apply(this, arguments);\n}\n\nfunction _getPaletteColors() {\n  _getPaletteColors = asyncToGenerator(\n  /*#__PURE__*/\n  regenerator.mark(function _callee(server, instance, lutDescriptor) {\n    var paletteUID;\n    return regenerator.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            paletteUID = DICOMWeb.getString(instance['00281199']);\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var entry;\n\n              if (paletteColorCache.isValidUID(paletteUID)) {\n                entry = paletteColorCache.get(paletteUID);\n\n                if (entry) {\n                  return resolve(entry);\n                }\n              } // no entry in cache... Fetch remote data.\n\n\n              var r = getPaletteColor(server, instance, '00281201', lutDescriptor);\n              var g = getPaletteColor(server, instance, '00281202', lutDescriptor);\n              var b = getPaletteColor(server, instance, '00281203', lutDescriptor);\n              var promises = [r, g, b];\n              Promise.all(promises).then(function (args) {\n                entry = {\n                  red: args[0],\n                  green: args[1],\n                  blue: args[2]\n                }; // when paletteUID is present, the entry can be cached...\n\n                entry.uid = paletteUID;\n                paletteColorCache.add(entry);\n                resolve(entry);\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getPaletteColors.apply(this, arguments);\n}\n\nfunction getFrameIncrementPointer(element) {\n  var frameIncrementPointerNames = {\n    '00181065': 'frameTimeVector',\n    '00181063': 'frameTime'\n  };\n\n  if (!element || !element.Value || !element.Value.length) {\n    return;\n  }\n\n  var value = element.Value[0];\n  return frameIncrementPointerNames[value];\n}\n\nfunction getRadiopharmaceuticalInfo(instance) {\n  var modality = DICOMWeb.getString(instance['00080060']);\n\n  if (modality !== 'PT') {\n    return;\n  }\n\n  var radiopharmaceuticalInfo = instance['00540016'];\n\n  if (radiopharmaceuticalInfo === undefined || !radiopharmaceuticalInfo.Value || !radiopharmaceuticalInfo.Value.length) {\n    return;\n  }\n\n  var firstPetRadiopharmaceuticalInfo = radiopharmaceuticalInfo.Value[0];\n  return {\n    radiopharmaceuticalStartTime: DICOMWeb.getString(firstPetRadiopharmaceuticalInfo['00181072']),\n    radionuclideTotalDose: DICOMWeb.getNumber(firstPetRadiopharmaceuticalInfo['00181074']),\n    radionuclideHalfLife: DICOMWeb.getNumber(firstPetRadiopharmaceuticalInfo['00181075'])\n  };\n}\n/**\n * Parses result data from a WADO search into Study MetaData\n * Returns an object populated with study metadata, including the\n * series list.\n *\n * @param server\n * @param studyInstanceUid\n * @param resultData\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\n\n\nfunction resultDataToStudyMetadata(_x4, _x5, _x6) {\n  return _resultDataToStudyMetadata.apply(this, arguments);\n}\n/**\n * Retrieve Study MetaData from a DICOM server using a WADO call\n *\n * @param server\n * @param studyInstanceUid\n * @returns {Promise}\n */\n\n\nfunction _resultDataToStudyMetadata() {\n  _resultDataToStudyMetadata = asyncToGenerator(\n  /*#__PURE__*/\n  regenerator.mark(function _callee3(server, studyInstanceUid, resultData) {\n    var _studyData;\n\n    var anInstance, studyData, seriesMap;\n    return regenerator.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (resultData.length) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            anInstance = resultData[0];\n\n            if (anInstance) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            // TODO: Pass a reference ID to the server instead of including the URLs here\n            studyData = (_studyData = {\n              seriesList: [],\n              studyInstanceUid: studyInstanceUid,\n              wadoUriRoot: server.wadoUriRoot,\n              wadoRoot: server.wadoRoot,\n              qidoRoot: server.qidoRoot,\n              patientName: DICOMWeb.getName(anInstance['00100010']),\n              patientId: DICOMWeb.getString(anInstance['00100020']),\n              patientAge: DICOMWeb.getNumber(anInstance['00101010']),\n              patientSize: DICOMWeb.getNumber(anInstance['00101020']),\n              patientWeight: DICOMWeb.getNumber(anInstance['00101030']),\n              accessionNumber: DICOMWeb.getString(anInstance['00080050']),\n              studyDate: DICOMWeb.getString(anInstance['00080020']),\n              modalities: DICOMWeb.getString(anInstance['00080061']),\n              studyDescription: DICOMWeb.getString(anInstance['00081030']),\n              imageCount: DICOMWeb.getString(anInstance['00201208'])\n            }, defineProperty(_studyData, \"studyInstanceUid\", DICOMWeb.getString(anInstance['0020000D'])), defineProperty(_studyData, \"institutionName\", DICOMWeb.getString(anInstance['00080080'])), _studyData);\n            seriesMap = {};\n            _context3.next = 9;\n            return Promise.all(resultData.map(\n            /*#__PURE__*/\n            function () {\n              var _ref = asyncToGenerator(\n              /*#__PURE__*/\n              regenerator.mark(function _callee2(instance) {\n                var seriesInstanceUid, series, sopInstanceUid, wadouri, baseWadoRsUri, wadorsuri, instanceSummary, redPaletteColorLookupTableDescriptor, greenPaletteColorLookupTableDescriptor, bluePaletteColorLookupTableDescriptor, palettes;\n                return regenerator.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        seriesInstanceUid = DICOMWeb.getString(instance['0020000E']);\n                        series = seriesMap[seriesInstanceUid];\n\n                        if (!series) {\n                          series = {\n                            seriesDescription: DICOMWeb.getString(instance['0008103E']),\n                            modality: DICOMWeb.getString(instance['00080060']),\n                            seriesInstanceUid: seriesInstanceUid,\n                            seriesNumber: DICOMWeb.getNumber(instance['00200011']),\n                            seriesDate: DICOMWeb.getString(instance['00080021']),\n                            seriesTime: DICOMWeb.getString(instance['00080031']),\n                            instances: []\n                          };\n                          seriesMap[seriesInstanceUid] = series;\n                          studyData.seriesList.push(series);\n                        }\n\n                        sopInstanceUid = DICOMWeb.getString(instance['00080018']);\n                        wadouri = buildInstanceWadoUrl(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n                        baseWadoRsUri = buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n                        wadorsuri = buildInstanceFrameWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n                        instanceSummary = {\n                          imageType: DICOMWeb.getString(instance['00080008']),\n                          sopClassUid: DICOMWeb.getString(instance['00080016']),\n                          modality: DICOMWeb.getString(instance['00080060']),\n                          sopInstanceUid: sopInstanceUid,\n                          instanceNumber: DICOMWeb.getNumber(instance['00200013']),\n                          imagePositionPatient: DICOMWeb.getString(instance['00200032']),\n                          imageOrientationPatient: DICOMWeb.getString(instance['00200037']),\n                          frameOfReferenceUID: DICOMWeb.getString(instance['00200052']),\n                          sliceLocation: DICOMWeb.getNumber(instance['00201041']),\n                          samplesPerPixel: DICOMWeb.getNumber(instance['00280002']),\n                          photometricInterpretation: DICOMWeb.getString(instance['00280004']),\n                          planarConfiguration: DICOMWeb.getNumber(instance['00280006']),\n                          rows: DICOMWeb.getNumber(instance['00280010']),\n                          columns: DICOMWeb.getNumber(instance['00280011']),\n                          pixelSpacing: DICOMWeb.getString(instance['00280030']),\n                          pixelAspectRatio: DICOMWeb.getString(instance['00280034']),\n                          bitsAllocated: DICOMWeb.getNumber(instance['00280100']),\n                          bitsStored: DICOMWeb.getNumber(instance['00280101']),\n                          highBit: DICOMWeb.getNumber(instance['00280102']),\n                          pixelRepresentation: DICOMWeb.getNumber(instance['00280103']),\n                          smallestPixelValue: DICOMWeb.getNumber(instance['00280106']),\n                          largestPixelValue: DICOMWeb.getNumber(instance['00280107']),\n                          windowCenter: DICOMWeb.getString(instance['00281050']),\n                          windowWidth: DICOMWeb.getString(instance['00281051']),\n                          rescaleIntercept: DICOMWeb.getNumber(instance['00281052']),\n                          rescaleSlope: DICOMWeb.getNumber(instance['00281053']),\n                          rescaleType: DICOMWeb.getNumber(instance['00281054']),\n                          sourceImageInstanceUid: getSourceImageInstanceUid(instance),\n                          laterality: DICOMWeb.getString(instance['00200062']),\n                          viewPosition: DICOMWeb.getString(instance['00185101']),\n                          acquisitionDateTime: DICOMWeb.getString(instance['0008002A']),\n                          numberOfFrames: DICOMWeb.getNumber(instance['00280008']),\n                          frameIncrementPointer: getFrameIncrementPointer(instance['00280009']),\n                          frameTime: DICOMWeb.getNumber(instance['00181063']),\n                          frameTimeVector: parseFloatArray(DICOMWeb.getString(instance['00181065'])),\n                          sliceThickness: DICOMWeb.getNumber(instance['00180050']),\n                          lossyImageCompression: DICOMWeb.getString(instance['00282110']),\n                          derivationDescription: DICOMWeb.getString(instance['00282111']),\n                          lossyImageCompressionRatio: DICOMWeb.getString(instance['00282112']),\n                          lossyImageCompressionMethod: DICOMWeb.getString(instance['00282114']),\n                          echoNumber: DICOMWeb.getString(instance['00180086']),\n                          contrastBolusAgent: DICOMWeb.getString(instance['00180010']),\n                          radiopharmaceuticalInfo: getRadiopharmaceuticalInfo(instance),\n                          baseWadoRsUri: baseWadoRsUri,\n                          wadouri: WADOProxy.convertURL(wadouri, server),\n                          wadorsuri: WADOProxy.convertURL(wadorsuri, server),\n                          imageRendering: server.imageRendering,\n                          thumbnailRendering: server.thumbnailRendering\n                        }; // Get additional information if the instance uses \"PALETTE COLOR\" photometric interpretation\n\n                        if (!(instanceSummary.photometricInterpretation === 'PALETTE COLOR')) {\n                          _context2.next = 16;\n                          break;\n                        }\n\n                        redPaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281101']));\n                        greenPaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281102']));\n                        bluePaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281103']));\n                        _context2.next = 14;\n                        return getPaletteColors(server, instance, redPaletteColorLookupTableDescriptor);\n\n                      case 14:\n                        palettes = _context2.sent;\n\n                        if (palettes) {\n                          if (palettes.uid) {\n                            instanceSummary.paletteColorLookupTableUID = palettes.uid;\n                          }\n\n                          instanceSummary.redPaletteColorLookupTableData = palettes.red;\n                          instanceSummary.greenPaletteColorLookupTableData = palettes.green;\n                          instanceSummary.bluePaletteColorLookupTableData = palettes.blue;\n                          instanceSummary.redPaletteColorLookupTableDescriptor = redPaletteColorLookupTableDescriptor;\n                          instanceSummary.greenPaletteColorLookupTableDescriptor = greenPaletteColorLookupTableDescriptor;\n                          instanceSummary.bluePaletteColorLookupTableDescriptor = bluePaletteColorLookupTableDescriptor;\n                        }\n\n                      case 16:\n                        series.instances.push(instanceSummary);\n\n                      case 17:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, this);\n              }));\n\n              return function (_x9) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n\n          case 9:\n            return _context3.abrupt(\"return\", studyData);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _resultDataToStudyMetadata.apply(this, arguments);\n}\n\nfunction RetrieveMetadata(_x7, _x8) {\n  return _RetrieveMetadata.apply(this, arguments);\n}\n\nfunction _RetrieveMetadata() {\n  _RetrieveMetadata = asyncToGenerator(\n  /*#__PURE__*/\n  regenerator.mark(function _callee4(server, studyInstanceUid) {\n    var config, dicomWeb, options;\n    return regenerator.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            config = {\n              url: server.wadoRoot,\n              headers: DICOMWeb.getAuthorizationHeader(server)\n            };\n            dicomWeb = new api.DICOMwebClient(config);\n            options = {\n              studyInstanceUID: studyInstanceUid\n            };\n            return _context4.abrupt(\"return\", dicomWeb.retrieveStudyMetadata(options).then(function (result) {\n              return resultDataToStudyMetadata(server, studyInstanceUid, result);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _RetrieveMetadata.apply(this, arguments);\n}\n\nvar module$1 = 'RetrieveStudyMetadata'; // Cache for promises. Prevents unnecessary subsequent calls to the server\n\nvar StudyMetaDataPromises = new Map();\n/**\n * Retrieves study metadata\n *\n * @param {Object} server\n * @param {string} studyInstanceUid The UID of the Study to be retrieved\n * @returns {Promise} that will be resolved with the metadata or rejected with the error\n */\n\nfunction retrieveStudyMetadata(server, studyInstanceUid) {\n  // @TODO: Whenever a study metadata request has failed, its related promise will be rejected once and for all\n  // and further requests for that metadata will always fail. On failure, we probably need to remove the\n  // corresponding promise from the \"StudyMetaDataPromises\" map...\n  if (!server) {\n    throw new Error(\"\".concat(module$1, \": Required 'server' parameter not provided.\"));\n  }\n\n  if (!studyInstanceUid) {\n    throw new Error(\"\".concat(module$1, \": Required 'studyInstanceUid' parameter not provided.\"));\n  } // Already waiting on result? Return cached promise\n\n\n  if (StudyMetaDataPromises.has(studyInstanceUid)) {\n    return StudyMetaDataPromises.get(studyInstanceUid);\n  } // Create a promise to handle the data retrieval\n\n\n  var promise = new Promise(function (resolve, reject) {\n    RetrieveMetadata(server, studyInstanceUid).then(function (data) {\n      resolve(data);\n    }, reject);\n  }); // Store the promise in cache\n\n  StudyMetaDataPromises.set(studyInstanceUid, promise);\n  return promise;\n}\n/**\n * Delete the cached study metadata retrieval promise to ensure that the browser will\n * re-retrieve the study metadata when it is next requested\n *\n * @param {String} studyInstanceUid The UID of the Study to be removed from cache\n *\n */\n\n\nfunction deleteStudyMetadataPromise(studyInstanceUid) {\n  if (StudyMetaDataPromises.has(studyInstanceUid)) {\n    StudyMetaDataPromises.delete(studyInstanceUid);\n  }\n}\n\nvar OHIFStudyMetadataSource =\n/*#__PURE__*/\nfunction (_StudyMetadataSource) {\n  inherits(OHIFStudyMetadataSource, _StudyMetadataSource);\n\n  function OHIFStudyMetadataSource() {\n    classCallCheck(this, OHIFStudyMetadataSource);\n    return possibleConstructorReturn(this, getPrototypeOf(OHIFStudyMetadataSource).apply(this, arguments));\n  }\n\n  createClass(OHIFStudyMetadataSource, [{\n    key: \"getByInstanceUID\",\n\n    /**\n     * Get study metadata for a study with given study InstanceUID\n     * @param server\n     * @param  {String} studyInstanceUID Study InstanceUID\n     * @return {Promise} A Promise object\n     */\n    value: function getByInstanceUID(server, studyInstanceUID) {\n      return retrieveStudyMetadata(server, studyInstanceUID);\n    }\n    /**\n     * Load study info (OHIF.viewer.Studies) and study metadata (OHIF.viewer.StudyMetadataList) for a given study.\n     * @param {StudySummary|StudyMetadata} study of StudySummary or StudyMetadata object.\n     */\n\n  }, {\n    key: \"loadStudy\",\n    value: function loadStudy(study) {\n      var _this = this;\n\n      if (!(study instanceof StudyMetadata) && !(study instanceof StudySummary)) {\n        throw new OHIFError('OHIFStudyMetadataSource::loadStudy study is not an instance of StudySummary or StudyMetadata');\n      }\n\n      return new Promise(function (resolve, reject) {\n        var studyInstanceUID = study.getStudyInstanceUID();\n\n        if (study instanceof StudyMetadata) {\n          var alreadyLoaded = OHIF.viewer.Studies.findBy({\n            studyInstanceUid: studyInstanceUID\n          });\n\n          if (!alreadyLoaded) {\n            OHIFStudyMetadataSource._updateStudyCollections(study);\n          }\n\n          resolve(study);\n          return;\n        }\n\n        _this.getByInstanceUID(studyInstanceUID).then(function (studyInfo) {\n          // Create study metadata object\n          var studyMetadata = new StudyMetadata(studyInfo, studyInfo.studyInstanceUid); // Get Study display sets\n\n          var displaySets = studyMetadata.createDisplaySets(); // Set studyMetadata display sets\n\n          studyMetadata.setDisplaySets(displaySets);\n\n          OHIFStudyMetadataSource._updateStudyCollections(studyMetadata);\n\n          resolve(studyMetadata);\n        }).catch(reject);\n      });\n    } // Static methods\n\n  }], [{\n    key: \"_updateStudyCollections\",\n    value: function _updateStudyCollections(studyMetadata) {\n      var studyInfo = studyMetadata.getData(); // Set some studyInfo properties\n\n      studyInfo.selected = true;\n      studyInfo.displaySets = studyMetadata.getDisplaySets(); // Updates WADO-RS metaDataManager\n\n      updateMetaDataManager(studyInfo);\n      studyMetadataManager.add(studyMetadata);\n    }\n  }]);\n  return OHIFStudyMetadataSource;\n}(StudyMetadataSource);\n\nvar StudyPrefetcher =\n/*#__PURE__*/\nfunction () {\n  function StudyPrefetcher(studies) {\n    var _this = this;\n\n    classCallCheck(this, StudyPrefetcher);\n    defineProperty(this, \"cacheFullHandler\", function () {\n      log$1.warn('Cache full');\n\n      _this.stopPrefetching();\n    });\n    this.studies = studies || [];\n    this.prefetchDisplaySetsTimeout = 300;\n    this.lastActiveViewportElement = null;\n    cornerstone.events.addEventListener('cornerstoneimagecachefull.StudyPrefetcher', this.cacheFullHandler);\n  }\n\n  createClass(StudyPrefetcher, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.stopPrefetching();\n      cornerstone.events.removeEventListener('cornerstoneimagecachefull.StudyPrefetcher', this.cacheFullHandler);\n    }\n  }, {\n    key: \"setStudies\",\n    value: function setStudies(studies) {\n      this.stopPrefetching();\n      this.studies = studies;\n    }\n  }, {\n    key: \"prefetch\",\n    value: function prefetch() {\n      if (!this.studies || !this.studies.length) {\n        return;\n      }\n\n      this.stopPrefetching();\n      this.prefetchDisplaySets();\n    }\n  }, {\n    key: \"stopPrefetching\",\n    value: function stopPrefetching() {\n      cornerstoneTools.requestPoolManager.clearRequestStack('prefetch');\n    }\n  }, {\n    key: \"prefetchDisplaySetsAsync\",\n    value: function prefetchDisplaySetsAsync(timeout) {\n      var _this2 = this;\n\n      timeout = timeout || this.prefetchDisplaySetsTimeout;\n      clearTimeout(this.prefetchDisplaySetsHandler);\n      this.prefetchDisplaySetsHandler = setTimeout(function () {\n        _this2.prefetchDisplaySets();\n      }, timeout);\n    }\n  }, {\n    key: \"prefetchDisplaySets\",\n    value: function prefetchDisplaySets() {\n      // TODO: Allow passing in config\n      var config = {\n        order: 'closest',\n        displaySetCount: 1\n      };\n      var displaySetsToPrefetch = this.getDisplaySetsToPrefetch(config);\n      var imageIds = this.getImageIdsFromDisplaySets(displaySetsToPrefetch);\n      this.prefetchImageIds(imageIds);\n    }\n  }, {\n    key: \"prefetchImageIds\",\n    value: function prefetchImageIds(imageIds) {\n      var nonCachedImageIds = this.filterCachedImageIds(imageIds);\n      var requestPoolManager = cornerstoneTools.requestPoolManager;\n      var requestType = 'prefetch';\n      var preventCache = false;\n\n      var noop = function noop() {};\n\n      nonCachedImageIds.forEach(function (imageId) {\n        requestPoolManager.addRequest({}, imageId, requestType, preventCache, noop, noop);\n      });\n      requestPoolManager.startGrabbing();\n    }\n  }, {\n    key: \"getStudy\",\n    value: function getStudy(image) {\n      var studyMetadata = cornerstone.metaData.get('study', image.imageId);\n      return OHIF.viewer.Studies.find(function (study) {\n        return study.studyInstanceUid === studyMetadata.studyInstanceUid;\n      });\n    }\n  }, {\n    key: \"getSeries\",\n    value: function getSeries(study, image) {\n      var seriesMetadata = cornerstone.metaData.get('series', image.imageId);\n      var studyMetadata = OHIF.viewerbase.getStudyMetadata(study);\n      return studyMetadata.getSeriesByUID(seriesMetadata.seriesInstanceUid);\n    }\n  }, {\n    key: \"getInstance\",\n    value: function getInstance(series, image) {\n      var instanceMetadata = cornerstone.metaData.get('instance', image.imageId);\n      return series.getInstanceByUID(instanceMetadata.sopInstanceUid);\n    }\n  }, {\n    key: \"getActiveDisplaySet\",\n    value: function getActiveDisplaySet(displaySets, instance) {\n      return displaySets.find(function (displaySet) {\n        return displaySet.images.some(function (displaySetImage) {\n          return displaySetImage.sopInstanceUid === instance.sopInstanceUid;\n        });\n      });\n    }\n  }, {\n    key: \"getDisplaySetsToPrefetch\",\n    value: function getDisplaySetsToPrefetch(config) {\n      var image = this.getActiveViewportImage();\n\n      if (!image || !config || !config.displaySetCount) {\n        return [];\n      }\n      /*const study = this.getStudy(image);\n      const series = this.getSeries(study, image);\n      const instance = this.getInstance(series, image);*/\n\n\n      var displaySets = study.displaySets;\n      var activeDisplaySet = null; //this.getActiveDisplaySet(displaySets, instance);\n\n      var prefetchMethodMap = {\n        topdown: 'getFirstDisplaySets',\n        downward: 'getNextDisplaySets',\n        closest: 'getClosestDisplaySets'\n      };\n      var prefetchOrder = config.order;\n      var methodName = prefetchMethodMap[prefetchOrder];\n      var getDisplaySets = this[methodName];\n\n      if (!getDisplaySets) {\n        if (prefetchOrder) {\n          log$1.warn(\"Invalid prefetch order configuration (\".concat(prefetchOrder, \")\"));\n        }\n\n        return [];\n      }\n\n      return getDisplaySets.call(this, displaySets, activeDisplaySet, config.displaySetCount);\n    }\n  }, {\n    key: \"getFirstDisplaySets\",\n    value: function getFirstDisplaySets(displaySets, activeDisplaySet, displaySetCount) {\n      var length = displaySets.length;\n      var selectedDisplaySets = [];\n\n      for (var i = 0; i < length && displaySetCount; i++) {\n        var displaySet = displaySets[i];\n\n        if (displaySet !== activeDisplaySet) {\n          selectedDisplaySets.push(displaySet);\n          displaySetCount--;\n        }\n      }\n\n      return selectedDisplaySets;\n    }\n  }, {\n    key: \"getNextDisplaySets\",\n    value: function getNextDisplaySets(displaySets, activeDisplaySet, displaySetCount) {\n      var activeDisplaySetIndex = displaySets.indexOf(activeDisplaySet);\n      var begin = activeDisplaySetIndex + 1;\n      var end = Math.min(begin + displaySetCount, displaySets.length);\n      return displaySets.slice(begin, end);\n    }\n  }, {\n    key: \"getClosestDisplaySets\",\n    value: function getClosestDisplaySets(displaySets, activeDisplaySet, displaySetCount) {\n      var activeDisplaySetIndex = displaySets.indexOf(activeDisplaySet);\n      var length = displaySets.length;\n      var selectedDisplaySets = [];\n      var left = activeDisplaySetIndex - 1;\n      var right = activeDisplaySetIndex + 1;\n\n      while ((left >= 0 || right < length) && displaySetCount) {\n        if (left >= 0) {\n          selectedDisplaySets.push(displaySets[left]);\n          displaySetCount--;\n          left--;\n        }\n\n        if (right < length && displaySetCount) {\n          selectedDisplaySets.push(displaySets[right]);\n          displaySetCount--;\n          right++;\n        }\n      }\n\n      return selectedDisplaySets;\n    }\n  }, {\n    key: \"getImageIdsFromDisplaySets\",\n    value: function getImageIdsFromDisplaySets(displaySets) {\n      var _this3 = this;\n\n      var imageIds = [];\n      displaySets.forEach(function (displaySet) {\n        imageIds = imageIds.concat(_this3.getImageIdsFromDisplaySet(displaySet));\n      });\n      return imageIds;\n    }\n  }, {\n    key: \"getImageIdsFromDisplaySet\",\n    value: function getImageIdsFromDisplaySet(displaySet) {\n      var imageIds = []; // TODO: This duplicates work done by the stack manager\n\n      displaySet.images.forEach(function (image) {\n        var numFrames = image.numFrames;\n\n        if (numFrames > 1) {\n          for (var i = 0; i < numFrames; i++) {\n            var imageId = getImageId(image, i);\n            imageIds.push(imageId);\n          }\n        } else {\n          var _imageId = getImageId(image);\n\n          imageIds.push(_imageId);\n        }\n      });\n      return imageIds;\n    }\n  }, {\n    key: \"filterCachedImageIds\",\n    value: function filterCachedImageIds(imageIds) {\n      var _this4 = this;\n\n      return imageIds.filter(function (imageId) {\n        return !_this4.isImageCached(imageId);\n      });\n    }\n  }, {\n    key: \"isImageCached\",\n    value: function isImageCached(imageId) {\n      var image = cornerstone.imageCache.imageCache[imageId];\n      return image && image.sizeInBytes;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!StudyPrefetcher.instance) {\n        StudyPrefetcher.instance = new StudyPrefetcher([]);\n      }\n\n      return StudyPrefetcher.instance;\n    }\n  }]);\n  return StudyPrefetcher;\n}();\n\nvar classes = {\n  OHIFStudyMetadataSource: OHIFStudyMetadataSource,\n  MetadataProvider: MetadataProvider,\n  CommandsManager: CommandsManager,\n  HotkeysManager: HotkeysManager,\n  ImageSet: ImageSet,\n  StudyPrefetcher: StudyPrefetcher,\n  StudyLoadingListener: StudyLoadingListener,\n  StackLoadingListener: StackLoadingListener,\n  DICOMFileLoadingListener: DICOMFileLoadingListener,\n  StudyMetadata: StudyMetadata,\n  SeriesMetadata: SeriesMetadata,\n  InstanceMetadata: InstanceMetadata,\n  StudySummary: StudySummary,\n  TypeSafeCollection: TypeSafeCollection,\n  OHIFError: OHIFError,\n  StudyMetadataSource: StudyMetadataSource\n};\nvar cornerstone$1 = {\n  MetadataProvider: MetadataProvider,\n  getBoundingBox: getBoundingBox,\n  pixelToPage: pixelToPage,\n  repositionTextBox: repositionTextBox\n};\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nvar objectSpread = _objectSpread;\nvar validate = createCommonjsModule(function (module, exports) {\n  /*!\n   * validate.js 0.12.0\n   *\n   * (c) 2013-2017 Nicklas Ansman, 2013 Wrapp\n   * Validate.js may be freely distributed under the MIT license.\n   * For all details and documentation:\n   * http://validatejs.org/\n   */\n  (function (exports, module, define) {\n    // The main function that calls the validators specified by the constraints.\n    // The options are the following:\n    //   - format (string) - An option that controls how the returned value is formatted\n    //     * flat - Returns a flat array of just the error messages\n    //     * grouped - Returns the messages grouped by attribute (default)\n    //     * detailed - Returns an array of the raw validation data\n    //   - fullMessages (boolean) - If `true` (default) the attribute name is prepended to the error.\n    //\n    // Please note that the options are also passed to each validator.\n    var validate = function validate(attributes, constraints, options) {\n      options = v.extend({}, v.options, options);\n      var results = v.runValidations(attributes, constraints, options);\n\n      if (results.some(function (r) {\n        return v.isPromise(r.error);\n      })) {\n        throw new Error(\"Use validate.async if you want support for promises\");\n      }\n\n      return validate.processValidationResults(results, options);\n    };\n\n    var v = validate; // Copies over attributes from one or more sources to a single destination.\n    // Very much similar to underscore's extend.\n    // The first argument is the target object and the remaining arguments will be\n    // used as sources.\n\n    v.extend = function (obj) {\n      [].slice.call(arguments, 1).forEach(function (source) {\n        for (var attr in source) {\n          obj[attr] = source[attr];\n        }\n      });\n      return obj;\n    };\n\n    v.extend(validate, {\n      // This is the version of the library as a semver.\n      // The toString function will allow it to be coerced into a string\n      version: {\n        major: 0,\n        minor: 12,\n        patch: 0,\n        metadata: null,\n        toString: function toString() {\n          var version = v.format(\"%{major}.%{minor}.%{patch}\", v.version);\n\n          if (!v.isEmpty(v.version.metadata)) {\n            version += \"+\" + v.version.metadata;\n          }\n\n          return version;\n        }\n      },\n      // Below is the dependencies that are used in validate.js\n      // The constructor of the Promise implementation.\n      // If you are using Q.js, RSVP or any other A+ compatible implementation\n      // override this attribute to be the constructor of that promise.\n      // Since jQuery promises aren't A+ compatible they won't work.\n      Promise: typeof Promise !== \"undefined\" ? Promise :\n      /* istanbul ignore next */\n      null,\n      EMPTY_STRING_REGEXP: /^\\s*$/,\n      // Runs the validators specified by the constraints object.\n      // Will return an array of the format:\n      //     [{attribute: \"<attribute name>\", error: \"<validation result>\"}, ...]\n      runValidations: function runValidations(attributes, constraints, options) {\n        var results = [],\n            attr,\n            validatorName,\n            value,\n            validators,\n            validator,\n            validatorOptions,\n            error;\n\n        if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {\n          attributes = v.collectFormValues(attributes);\n        } // Loops through each constraints, finds the correct validator and run it.\n\n\n        for (attr in constraints) {\n          value = v.getDeepObjectValue(attributes, attr); // This allows the constraints for an attribute to be a function.\n          // The function will be called with the value, attribute name, the complete dict of\n          // attributes as well as the options and constraints passed in.\n          // This is useful when you want to have different\n          // validations depending on the attribute value.\n\n          validators = v.result(constraints[attr], value, attributes, attr, options, constraints);\n\n          for (validatorName in validators) {\n            validator = v.validators[validatorName];\n\n            if (!validator) {\n              error = v.format(\"Unknown validator %{name}\", {\n                name: validatorName\n              });\n              throw new Error(error);\n            }\n\n            validatorOptions = validators[validatorName]; // This allows the options to be a function. The function will be\n            // called with the value, attribute name, the complete dict of\n            // attributes as well as the options and constraints passed in.\n            // This is useful when you want to have different\n            // validations depending on the attribute value.\n\n            validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);\n\n            if (!validatorOptions) {\n              continue;\n            }\n\n            results.push({\n              attribute: attr,\n              value: value,\n              validator: validatorName,\n              globalOptions: options,\n              attributes: attributes,\n              options: validatorOptions,\n              error: validator.call(validator, value, validatorOptions, attr, attributes, options)\n            });\n          }\n        }\n\n        return results;\n      },\n      // Takes the output from runValidations and converts it to the correct\n      // output format.\n      processValidationResults: function processValidationResults(errors, options) {\n        errors = v.pruneEmptyErrors(errors, options);\n        errors = v.expandMultipleErrors(errors, options);\n        errors = v.convertErrorMessages(errors, options);\n        var format = options.format || \"grouped\";\n\n        if (typeof v.formatters[format] === 'function') {\n          errors = v.formatters[format](errors);\n        } else {\n          throw new Error(v.format(\"Unknown format %{format}\", options));\n        }\n\n        return v.isEmpty(errors) ? undefined : errors;\n      },\n      // Runs the validations with support for promises.\n      // This function will return a promise that is settled when all the\n      // validation promises have been completed.\n      // It can be called even if no validations returned a promise.\n      async: function async(attributes, constraints, options) {\n        options = v.extend({}, v.async.options, options);\n\n        var WrapErrors = options.wrapErrors || function (errors) {\n          return errors;\n        }; // Removes unknown attributes\n\n\n        if (options.cleanAttributes !== false) {\n          attributes = v.cleanAttributes(attributes, constraints);\n        }\n\n        var results = v.runValidations(attributes, constraints, options);\n        return new v.Promise(function (resolve, reject) {\n          v.waitForResults(results).then(function () {\n            var errors = v.processValidationResults(results, options);\n\n            if (errors) {\n              reject(new WrapErrors(errors, options, attributes, constraints));\n            } else {\n              resolve(attributes);\n            }\n          }, function (err) {\n            reject(err);\n          });\n        });\n      },\n      single: function single(value, constraints, options) {\n        options = v.extend({}, v.single.options, options, {\n          format: \"flat\",\n          fullMessages: false\n        });\n        return v({\n          single: value\n        }, {\n          single: constraints\n        }, options);\n      },\n      // Returns a promise that is resolved when all promises in the results array\n      // are settled. The promise returned from this function is always resolved,\n      // never rejected.\n      // This function modifies the input argument, it replaces the promises\n      // with the value returned from the promise.\n      waitForResults: function waitForResults(results) {\n        // Create a sequence of all the results starting with a resolved promise.\n        return results.reduce(function (memo, result) {\n          // If this result isn't a promise skip it in the sequence.\n          if (!v.isPromise(result.error)) {\n            return memo;\n          }\n\n          return memo.then(function () {\n            return result.error.then(function (error) {\n              result.error = error || null;\n            });\n          });\n        }, new v.Promise(function (r) {\n          r();\n        })); // A resolved promise\n      },\n      // If the given argument is a call: function the and: function return the value\n      // otherwise just return the value. Additional arguments will be passed as\n      // arguments to the function.\n      // Example:\n      // ```\n      // result('foo') // 'foo'\n      // result(Math.max, 1, 2) // 2\n      // ```\n      result: function result(value) {\n        var args = [].slice.call(arguments, 1);\n\n        if (typeof value === 'function') {\n          value = value.apply(null, args);\n        }\n\n        return value;\n      },\n      // Checks if the value is a number. This function does not consider NaN a\n      // number like many other `isNumber` functions do.\n      isNumber: function isNumber(value) {\n        return typeof value === 'number' && !isNaN(value);\n      },\n      // Returns false if the object is not a function\n      isFunction: function isFunction(value) {\n        return typeof value === 'function';\n      },\n      // A simple check to verify that the value is an integer. Uses `isNumber`\n      // and a simple modulo check.\n      isInteger: function isInteger(value) {\n        return v.isNumber(value) && value % 1 === 0;\n      },\n      // Checks if the value is a boolean\n      isBoolean: function isBoolean(value) {\n        return typeof value === 'boolean';\n      },\n      // Uses the `Object` function to check if the given argument is an object.\n      isObject: function isObject(obj) {\n        return obj === Object(obj);\n      },\n      // Simply checks if the object is an instance of a date\n      isDate: function isDate(obj) {\n        return obj instanceof Date;\n      },\n      // Returns false if the object is `null` of `undefined`\n      isDefined: function isDefined(obj) {\n        return obj !== null && obj !== undefined;\n      },\n      // Checks if the given argument is a promise. Anything with a `then`\n      // function is considered a promise.\n      isPromise: function isPromise(p) {\n        return !!p && v.isFunction(p.then);\n      },\n      isJqueryElement: function isJqueryElement(o) {\n        return o && v.isString(o.jquery);\n      },\n      isDomElement: function isDomElement(o) {\n        if (!o) {\n          return false;\n        }\n\n        if (!o.querySelectorAll || !o.querySelector) {\n          return false;\n        }\n\n        if (v.isObject(document) && o === document) {\n          return true;\n        } // http://stackoverflow.com/a/384380/699304\n\n        /* istanbul ignore else */\n\n\n        if (typeof HTMLElement === \"object\") {\n          return o instanceof HTMLElement;\n        } else {\n          return o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n        }\n      },\n      isEmpty: function isEmpty(value) {\n        var attr; // Null and undefined are empty\n\n        if (!v.isDefined(value)) {\n          return true;\n        } // functions are non empty\n\n\n        if (v.isFunction(value)) {\n          return false;\n        } // Whitespace only strings are empty\n\n\n        if (v.isString(value)) {\n          return v.EMPTY_STRING_REGEXP.test(value);\n        } // For arrays we use the length property\n\n\n        if (v.isArray(value)) {\n          return value.length === 0;\n        } // Dates have no attributes but aren't empty\n\n\n        if (v.isDate(value)) {\n          return false;\n        } // If we find at least one property we consider it non empty\n\n\n        if (v.isObject(value)) {\n          for (attr in value) {\n            return false;\n          }\n\n          return true;\n        }\n\n        return false;\n      },\n      // Formats the specified strings with the given values like so:\n      // ```\n      // format(\"Foo: %{foo}\", {foo: \"bar\"}) // \"Foo bar\"\n      // ```\n      // If you want to write %{...} without having it replaced simply\n      // prefix it with % like this `Foo: %%{foo}` and it will be returned\n      // as `\"Foo: %{foo}\"`\n      format: v.extend(function (str, vals) {\n        if (!v.isString(str)) {\n          return str;\n        }\n\n        return str.replace(v.format.FORMAT_REGEXP, function (m0, m1, m2) {\n          if (m1 === '%') {\n            return \"%{\" + m2 + \"}\";\n          } else {\n            return String(vals[m2]);\n          }\n        });\n      }, {\n        // Finds %{key} style patterns in the given string\n        FORMAT_REGEXP: /(%?)%\\{([^\\}]+)\\}/g\n      }),\n      // \"Prettifies\" the given string.\n      // Prettifying means replacing [.\\_-] with spaces as well as splitting\n      // camel case words.\n      prettify: function prettify(str) {\n        if (v.isNumber(str)) {\n          // If there are more than 2 decimals round it to two\n          if (str * 100 % 1 === 0) {\n            return \"\" + str;\n          } else {\n            return parseFloat(Math.round(str * 100) / 100).toFixed(2);\n          }\n        }\n\n        if (v.isArray(str)) {\n          return str.map(function (s) {\n            return v.prettify(s);\n          }).join(\", \");\n        }\n\n        if (v.isObject(str)) {\n          return str.toString();\n        } // Ensure the string is actually a string\n\n\n        str = \"\" + str;\n        return str // Splits keys separated by periods\n        .replace(/([^\\s])\\.([^\\s])/g, '$1 $2') // Removes backslashes\n        .replace(/\\\\+/g, '') // Replaces - and - with space\n        .replace(/[_-]/g, ' ') // Splits camel cased words\n        .replace(/([a-z])([A-Z])/g, function (m0, m1, m2) {\n          return \"\" + m1 + \" \" + m2.toLowerCase();\n        }).toLowerCase();\n      },\n      stringifyValue: function stringifyValue(value, options) {\n        var prettify = options && options.prettify || v.prettify;\n        return prettify(value);\n      },\n      isString: function isString(value) {\n        return typeof value === 'string';\n      },\n      isArray: function isArray(value) {\n        return {}.toString.call(value) === '[object Array]';\n      },\n      // Checks if the object is a hash, which is equivalent to an object that\n      // is neither an array nor a function.\n      isHash: function isHash(value) {\n        return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);\n      },\n      contains: function contains(obj, value) {\n        if (!v.isDefined(obj)) {\n          return false;\n        }\n\n        if (v.isArray(obj)) {\n          return obj.indexOf(value) !== -1;\n        }\n\n        return value in obj;\n      },\n      unique: function unique(array) {\n        if (!v.isArray(array)) {\n          return array;\n        }\n\n        return array.filter(function (el, index, array) {\n          return array.indexOf(el) == index;\n        });\n      },\n      forEachKeyInKeypath: function forEachKeyInKeypath(object, keypath, callback) {\n        if (!v.isString(keypath)) {\n          return undefined;\n        }\n\n        var key = \"\",\n            i,\n            escape = false;\n\n        for (i = 0; i < keypath.length; ++i) {\n          switch (keypath[i]) {\n            case '.':\n              if (escape) {\n                escape = false;\n                key += '.';\n              } else {\n                object = callback(object, key, false);\n                key = \"\";\n              }\n\n              break;\n\n            case '\\\\':\n              if (escape) {\n                escape = false;\n                key += '\\\\';\n              } else {\n                escape = true;\n              }\n\n              break;\n\n            default:\n              escape = false;\n              key += keypath[i];\n              break;\n          }\n        }\n\n        return callback(object, key, true);\n      },\n      getDeepObjectValue: function getDeepObjectValue(obj, keypath) {\n        if (!v.isObject(obj)) {\n          return undefined;\n        }\n\n        return v.forEachKeyInKeypath(obj, keypath, function (obj, key) {\n          if (v.isObject(obj)) {\n            return obj[key];\n          }\n        });\n      },\n      // This returns an object with all the values of the form.\n      // It uses the input name as key and the value as value\n      // So for example this:\n      // <input type=\"text\" name=\"email\" value=\"foo@bar.com\" />\n      // would return:\n      // {email: \"foo@bar.com\"}\n      collectFormValues: function collectFormValues(form, options) {\n        var values = {},\n            i,\n            j,\n            input,\n            inputs,\n            option,\n            value;\n\n        if (v.isJqueryElement(form)) {\n          form = form[0];\n        }\n\n        if (!form) {\n          return values;\n        }\n\n        options = options || {};\n        inputs = form.querySelectorAll(\"input[name], textarea[name]\");\n\n        for (i = 0; i < inputs.length; ++i) {\n          input = inputs.item(i);\n\n          if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n            continue;\n          }\n\n          name = input.name.replace(/\\./g, \"\\\\\\\\.\");\n          value = v.sanitizeFormValue(input.value, options);\n\n          if (input.type === \"number\") {\n            value = value ? +value : null;\n          } else if (input.type === \"checkbox\") {\n            if (input.attributes.value) {\n              if (!input.checked) {\n                value = values[name] || null;\n              }\n            } else {\n              value = input.checked;\n            }\n          } else if (input.type === \"radio\") {\n            if (!input.checked) {\n              value = values[name] || null;\n            }\n          }\n\n          values[name] = value;\n        }\n\n        inputs = form.querySelectorAll(\"select[name]\");\n\n        for (i = 0; i < inputs.length; ++i) {\n          input = inputs.item(i);\n\n          if (v.isDefined(input.getAttribute(\"data-ignored\"))) {\n            continue;\n          }\n\n          if (input.multiple) {\n            value = [];\n\n            for (j in input.options) {\n              option = input.options[j];\n\n              if (option && option.selected) {\n                value.push(v.sanitizeFormValue(option.value, options));\n              }\n            }\n          } else {\n            var _val = typeof input.options[input.selectedIndex] !== 'undefined' ? input.options[input.selectedIndex].value : '';\n\n            value = v.sanitizeFormValue(_val, options);\n          }\n\n          values[input.name] = value;\n        }\n\n        return values;\n      },\n      sanitizeFormValue: function sanitizeFormValue(value, options) {\n        if (options.trim && v.isString(value)) {\n          value = value.trim();\n        }\n\n        if (options.nullify !== false && value === \"\") {\n          return null;\n        }\n\n        return value;\n      },\n      capitalize: function capitalize(str) {\n        if (!v.isString(str)) {\n          return str;\n        }\n\n        return str[0].toUpperCase() + str.slice(1);\n      },\n      // Remove all errors who's error attribute is empty (null or undefined)\n      pruneEmptyErrors: function pruneEmptyErrors(errors) {\n        return errors.filter(function (error) {\n          return !v.isEmpty(error.error);\n        });\n      },\n      // In\n      // [{error: [\"err1\", \"err2\"], ...}]\n      // Out\n      // [{error: \"err1\", ...}, {error: \"err2\", ...}]\n      //\n      // All attributes in an error with multiple messages are duplicated\n      // when expanding the errors.\n      expandMultipleErrors: function expandMultipleErrors(errors) {\n        var ret = [];\n        errors.forEach(function (error) {\n          // Removes errors without a message\n          if (v.isArray(error.error)) {\n            error.error.forEach(function (msg) {\n              ret.push(v.extend({}, error, {\n                error: msg\n              }));\n            });\n          } else {\n            ret.push(error);\n          }\n        });\n        return ret;\n      },\n      // Converts the error mesages by prepending the attribute name unless the\n      // message is prefixed by ^\n      convertErrorMessages: function convertErrorMessages(errors, options) {\n        options = options || {};\n        var ret = [],\n            prettify = options.prettify || v.prettify;\n        errors.forEach(function (errorInfo) {\n          var error = v.result(errorInfo.error, errorInfo.value, errorInfo.attribute, errorInfo.options, errorInfo.attributes, errorInfo.globalOptions);\n\n          if (!v.isString(error)) {\n            ret.push(errorInfo);\n            return;\n          }\n\n          if (error[0] === '^') {\n            error = error.slice(1);\n          } else if (options.fullMessages !== false) {\n            error = v.capitalize(prettify(errorInfo.attribute)) + \" \" + error;\n          }\n\n          error = error.replace(/\\\\\\^/g, \"^\");\n          error = v.format(error, {\n            value: v.stringifyValue(errorInfo.value, options)\n          });\n          ret.push(v.extend({}, errorInfo, {\n            error: error\n          }));\n        });\n        return ret;\n      },\n      // In:\n      // [{attribute: \"<attributeName>\", ...}]\n      // Out:\n      // {\"<attributeName>\": [{attribute: \"<attributeName>\", ...}]}\n      groupErrorsByAttribute: function groupErrorsByAttribute(errors) {\n        var ret = {};\n        errors.forEach(function (error) {\n          var list = ret[error.attribute];\n\n          if (list) {\n            list.push(error);\n          } else {\n            ret[error.attribute] = [error];\n          }\n        });\n        return ret;\n      },\n      // In:\n      // [{error: \"<message 1>\", ...}, {error: \"<message 2>\", ...}]\n      // Out:\n      // [\"<message 1>\", \"<message 2>\"]\n      flattenErrorsToArray: function flattenErrorsToArray(errors) {\n        return errors.map(function (error) {\n          return error.error;\n        }).filter(function (value, index, self) {\n          return self.indexOf(value) === index;\n        });\n      },\n      cleanAttributes: function cleanAttributes(attributes, whitelist) {\n        function whitelistCreator(obj, key, last) {\n          if (v.isObject(obj[key])) {\n            return obj[key];\n          }\n\n          return obj[key] = last ? true : {};\n        }\n\n        function buildObjectWhitelist(whitelist) {\n          var ow = {},\n              attr;\n\n          for (attr in whitelist) {\n            if (!whitelist[attr]) {\n              continue;\n            }\n\n            v.forEachKeyInKeypath(ow, attr, whitelistCreator);\n          }\n\n          return ow;\n        }\n\n        function cleanRecursive(attributes, whitelist) {\n          if (!v.isObject(attributes)) {\n            return attributes;\n          }\n\n          var ret = v.extend({}, attributes),\n              w,\n              attribute;\n\n          for (attribute in attributes) {\n            w = whitelist[attribute];\n\n            if (v.isObject(w)) {\n              ret[attribute] = cleanRecursive(ret[attribute], w);\n            } else if (!w) {\n              delete ret[attribute];\n            }\n          }\n\n          return ret;\n        }\n\n        if (!v.isObject(whitelist) || !v.isObject(attributes)) {\n          return {};\n        }\n\n        whitelist = buildObjectWhitelist(whitelist);\n        return cleanRecursive(attributes, whitelist);\n      },\n      exposeModule: function exposeModule(validate, root, exports, module, define) {\n        if (exports) {\n          if (module && module.exports) {\n            exports = module.exports = validate;\n          }\n\n          exports.validate = validate;\n        } else {\n          root.validate = validate;\n\n          if (validate.isFunction(define) && define.amd) {\n            define([], function () {\n              return validate;\n            });\n          }\n        }\n      },\n      warn: function warn(msg) {\n        if (typeof console !== \"undefined\" && console.warn) {\n          console.warn(\"[validate.js] \" + msg);\n        }\n      },\n      error: function error(msg) {\n        if (typeof console !== \"undefined\" && console.error) {\n          console.error(\"[validate.js] \" + msg);\n        }\n      }\n    });\n    validate.validators = {\n      // Presence validates that the value isn't empty\n      presence: function presence(value, options) {\n        options = v.extend({}, this.options, options);\n\n        if (options.allowEmpty !== false ? !v.isDefined(value) : v.isEmpty(value)) {\n          return options.message || this.message || \"can't be blank\";\n        }\n      },\n      length: function length(value, options, attribute) {\n        // Empty values are allowed\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        options = v.extend({}, this.options, options);\n\n        var is = options.is,\n            maximum = options.maximum,\n            minimum = options.minimum,\n            tokenizer = options.tokenizer || function (val) {\n          return val;\n        },\n            err,\n            errors = [];\n\n        value = tokenizer(value);\n        var length = value.length;\n\n        if (!v.isNumber(length)) {\n          v.error(v.format(\"Attribute %{attr} has a non numeric value for `length`\", {\n            attr: attribute\n          }));\n          return options.message || this.notValid || \"has an incorrect length\";\n        } // Is checks\n\n\n        if (v.isNumber(is) && length !== is) {\n          err = options.wrongLength || this.wrongLength || \"is the wrong length (should be %{count} characters)\";\n          errors.push(v.format(err, {\n            count: is\n          }));\n        }\n\n        if (v.isNumber(minimum) && length < minimum) {\n          err = options.tooShort || this.tooShort || \"is too short (minimum is %{count} characters)\";\n          errors.push(v.format(err, {\n            count: minimum\n          }));\n        }\n\n        if (v.isNumber(maximum) && length > maximum) {\n          err = options.tooLong || this.tooLong || \"is too long (maximum is %{count} characters)\";\n          errors.push(v.format(err, {\n            count: maximum\n          }));\n        }\n\n        if (errors.length > 0) {\n          return options.message || errors;\n        }\n      },\n      numericality: function numericality(value, options, attribute, attributes, globalOptions) {\n        // Empty values are fine\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        options = v.extend({}, this.options, options);\n        var errors = [],\n            name,\n            count,\n            checks = {\n          greaterThan: function greaterThan(v, c) {\n            return v > c;\n          },\n          greaterThanOrEqualTo: function greaterThanOrEqualTo(v, c) {\n            return v >= c;\n          },\n          equalTo: function equalTo(v, c) {\n            return v === c;\n          },\n          lessThan: function lessThan(v, c) {\n            return v < c;\n          },\n          lessThanOrEqualTo: function lessThanOrEqualTo(v, c) {\n            return v <= c;\n          },\n          divisibleBy: function divisibleBy(v, c) {\n            return v % c === 0;\n          }\n        },\n            prettify = options.prettify || globalOptions && globalOptions.prettify || v.prettify; // Strict will check that it is a valid looking number\n\n        if (v.isString(value) && options.strict) {\n          var pattern = \"^-?(0|[1-9]\\\\d*)\";\n\n          if (!options.onlyInteger) {\n            pattern += \"(\\\\.\\\\d+)?\";\n          }\n\n          pattern += \"$\";\n\n          if (!new RegExp(pattern).test(value)) {\n            return options.message || options.notValid || this.notValid || this.message || \"must be a valid number\";\n          }\n        } // Coerce the value to a number unless we're being strict.\n\n\n        if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {\n          value = +value;\n        } // If it's not a number we shouldn't continue since it will compare it.\n\n\n        if (!v.isNumber(value)) {\n          return options.message || options.notValid || this.notValid || this.message || \"is not a number\";\n        } // Same logic as above, sort of. Don't bother with comparisons if this\n        // doesn't pass.\n\n\n        if (options.onlyInteger && !v.isInteger(value)) {\n          return options.message || options.notInteger || this.notInteger || this.message || \"must be an integer\";\n        }\n\n        for (name in checks) {\n          count = options[name];\n\n          if (v.isNumber(count) && !checks[name](value, count)) {\n            // This picks the default message if specified\n            // For example the greaterThan check uses the message from\n            // this.notGreaterThan so we capitalize the name and prepend \"not\"\n            var key = \"not\" + v.capitalize(name);\n            var msg = options[key] || this[key] || this.message || \"must be %{type} %{count}\";\n            errors.push(v.format(msg, {\n              count: count,\n              type: prettify(name)\n            }));\n          }\n        }\n\n        if (options.odd && value % 2 !== 1) {\n          errors.push(options.notOdd || this.notOdd || this.message || \"must be odd\");\n        }\n\n        if (options.even && value % 2 !== 0) {\n          errors.push(options.notEven || this.notEven || this.message || \"must be even\");\n        }\n\n        if (errors.length) {\n          return options.message || errors;\n        }\n      },\n      datetime: v.extend(function (value, options) {\n        if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {\n          throw new Error(\"Both the parse and format functions needs to be set to use the datetime/date validator\");\n        } // Empty values are fine\n\n\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        options = v.extend({}, this.options, options);\n        var err,\n            errors = [],\n            earliest = options.earliest ? this.parse(options.earliest, options) : NaN,\n            latest = options.latest ? this.parse(options.latest, options) : NaN;\n        value = this.parse(value, options); // 86400000 is the number of milliseconds in a day, this is used to remove\n        // the time from the date\n\n        if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {\n          err = options.notValid || options.message || this.notValid || \"must be a valid date\";\n          return v.format(err, {\n            value: arguments[0]\n          });\n        }\n\n        if (!isNaN(earliest) && value < earliest) {\n          err = options.tooEarly || options.message || this.tooEarly || \"must be no earlier than %{date}\";\n          err = v.format(err, {\n            value: this.format(value, options),\n            date: this.format(earliest, options)\n          });\n          errors.push(err);\n        }\n\n        if (!isNaN(latest) && value > latest) {\n          err = options.tooLate || options.message || this.tooLate || \"must be no later than %{date}\";\n          err = v.format(err, {\n            date: this.format(latest, options),\n            value: this.format(value, options)\n          });\n          errors.push(err);\n        }\n\n        if (errors.length) {\n          return v.unique(errors);\n        }\n      }, {\n        parse: null,\n        format: null\n      }),\n      date: function date(value, options) {\n        options = v.extend({}, options, {\n          dateOnly: true\n        });\n        return v.validators.datetime.call(v.validators.datetime, value, options);\n      },\n      format: function format(value, options) {\n        if (v.isString(options) || options instanceof RegExp) {\n          options = {\n            pattern: options\n          };\n        }\n\n        options = v.extend({}, this.options, options);\n        var message = options.message || this.message || \"is invalid\",\n            pattern = options.pattern,\n            match; // Empty values are allowed\n\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        if (!v.isString(value)) {\n          return message;\n        }\n\n        if (v.isString(pattern)) {\n          pattern = new RegExp(options.pattern, options.flags);\n        }\n\n        match = pattern.exec(value);\n\n        if (!match || match[0].length != value.length) {\n          return message;\n        }\n      },\n      inclusion: function inclusion(value, options) {\n        // Empty values are fine\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        if (v.isArray(options)) {\n          options = {\n            within: options\n          };\n        }\n\n        options = v.extend({}, this.options, options);\n\n        if (v.contains(options.within, value)) {\n          return;\n        }\n\n        var message = options.message || this.message || \"^%{value} is not included in the list\";\n        return v.format(message, {\n          value: value\n        });\n      },\n      exclusion: function exclusion(value, options) {\n        // Empty values are fine\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        if (v.isArray(options)) {\n          options = {\n            within: options\n          };\n        }\n\n        options = v.extend({}, this.options, options);\n\n        if (!v.contains(options.within, value)) {\n          return;\n        }\n\n        var message = options.message || this.message || \"^%{value} is restricted\";\n        return v.format(message, {\n          value: value\n        });\n      },\n      email: v.extend(function (value, options) {\n        options = v.extend({}, this.options, options);\n        var message = options.message || this.message || \"is not a valid email\"; // Empty values are fine\n\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        if (!v.isString(value)) {\n          return message;\n        }\n\n        if (!this.PATTERN.exec(value)) {\n          return message;\n        }\n      }, {\n        PATTERN: /^[a-z0-9\\u007F-\\uffff!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9\\u007F-\\uffff!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z]{2,}$/i\n      }),\n      equality: function equality(value, options, attribute, attributes, globalOptions) {\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        if (v.isString(options)) {\n          options = {\n            attribute: options\n          };\n        }\n\n        options = v.extend({}, this.options, options);\n        var message = options.message || this.message || \"is not equal to %{attribute}\";\n\n        if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {\n          throw new Error(\"The attribute must be a non empty string\");\n        }\n\n        var otherValue = v.getDeepObjectValue(attributes, options.attribute),\n            comparator = options.comparator || function (v1, v2) {\n          return v1 === v2;\n        },\n            prettify = options.prettify || globalOptions && globalOptions.prettify || v.prettify;\n\n        if (!comparator(value, otherValue, options, attribute, attributes)) {\n          return v.format(message, {\n            attribute: prettify(options.attribute)\n          });\n        }\n      },\n      // A URL validator that is used to validate URLs with the ability to\n      // restrict schemes and some domains.\n      url: function url(value, options) {\n        if (!v.isDefined(value)) {\n          return;\n        }\n\n        options = v.extend({}, this.options, options);\n        var message = options.message || this.message || \"is not a valid url\",\n            schemes = options.schemes || this.schemes || ['http', 'https'],\n            allowLocal = options.allowLocal || this.allowLocal || false;\n\n        if (!v.isString(value)) {\n          return message;\n        } // https://gist.github.com/dperini/729294\n\n\n        var regex = \"^\" + // protocol identifier\n        \"(?:(?:\" + schemes.join(\"|\") + \")://)\" + // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\";\n        var tld = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\";\n\n        if (allowLocal) {\n          tld += \"?\";\n        } else {\n          regex += // IP address exclusion\n          // private & local networks\n          \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" + \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" + \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\";\n        }\n\n        regex += // IP address dotted notation octets\n        // excludes loopback network 0.0.0.0\n        // excludes reserved space >= 224.0.0.0\n        // excludes network & broacast addresses\n        // (first & last IP address of each class)\n        \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" + \"|\" + // host name\n        \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" + // domain name\n        \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" + tld + \")\" + // port number\n        \"(?::\\\\d{2,5})?\" + // resource path\n        \"(?:[/?#]\\\\S*)?\" + \"$\";\n        var PATTERN = new RegExp(regex, 'i');\n\n        if (!PATTERN.exec(value)) {\n          return message;\n        }\n      }\n    };\n    validate.formatters = {\n      detailed: function detailed(errors) {\n        return errors;\n      },\n      flat: v.flattenErrorsToArray,\n      grouped: function grouped(errors) {\n        var attr;\n        errors = v.groupErrorsByAttribute(errors);\n\n        for (attr in errors) {\n          errors[attr] = v.flattenErrorsToArray(errors[attr]);\n        }\n\n        return errors;\n      },\n      constraint: function constraint(errors) {\n        var attr;\n        errors = v.groupErrorsByAttribute(errors);\n\n        for (attr in errors) {\n          errors[attr] = errors[attr].map(function (result) {\n            return result.validator;\n          }).sort();\n        }\n\n        return errors;\n      }\n    };\n    validate.exposeModule(validate, this, exports, module, define);\n  }).call(commonjsGlobal, exports, module, null);\n});\n\nvalidate.validators.equals = function (value, options, key, attributes) {\n  if (options && value !== options.value) {\n    return key + 'must equal ' + options.value;\n  }\n};\n\nvalidate.validators.doesNotEqual = function (value, options, key) {\n  if (options && value === options.value) {\n    return key + 'cannot equal ' + options.value;\n  }\n};\n\nvalidate.validators.contains = function (value, options, key) {\n  if (options && value.indexOf && value.indexOf(options.value) === -1) {\n    return key + 'must contain ' + options.value;\n  }\n};\n\nvalidate.validators.doesNotContain = function (value, options, key) {\n  if (options && value.indexOf && value.indexOf(options.value) !== -1) {\n    return key + 'cannot contain ' + options.value;\n  }\n};\n\nvalidate.validators.startsWith = function (value, options, key) {\n  if (options && value.startsWith && !value.startsWith(options.value)) {\n    return key + 'must start with ' + options.value;\n  }\n};\n\nvalidate.validators.endsWith = function (value, options, key) {\n  if (options && value.endsWith && !value.endsWith(options.value)) {\n    return key + 'must end with ' + options.value;\n  }\n}; // Define an empty object to store callbacks that are used to retrieve custom attributes\n// The simplest example for a custom attribute is the Timepoint type (i.e. baseline or follow-up)\n// used in the LesionTracker application.\n//\n// Timepoint type can be obtained given a studyId, and this is done through a custom callback.\n// Developers can define attributes (i.e. attributeId = timepointType) with a name ('Timepoint Type')\n// and a callback function that is used to calculate them.\n//\n// The input to the callback, which is called during viewport-image matching rule evaluation\n// is the set of attributes that contains the specified attribute. In our example, timepointType is\n// linked to the study attributes, and so the inputs to the callback is an object containing\n// the study attributes.\n\n\nvar CustomAttributeRetrievalCallbacks = {};\n/**\n * Adds a custom attribute to be used in the HangingProtocol UI and matching rules, including a\n * callback that will be used to calculate the attribute value.\n *\n * @param attributeId The ID used to refer to the attribute (e.g. 'timepointType')\n * @param attributeName The name of the attribute to be displayed (e.g. 'Timepoint Type')\n * @param callback The function used to calculate the attribute value from the other attributes at its level (e.g. study/series/image)\n */\n\nfunction addCustomAttribute(attributeId, attributeName, callback) {\n  CustomAttributeRetrievalCallbacks[attributeId] = {\n    name: attributeName,\n    callback: callback\n  };\n}\n/**\n * Import Constants\n */\n\n\nvar StudySummary$1 = metadata.StudySummary,\n    InstanceMetadata$1 = metadata.InstanceMetadata;\n/**\n * Match a Metadata instance against rules using Validate.js for validation.\n * @param  {StudySummary|InstanceMetadata} metadataInstance Metadata instance object\n * @param  {Array} rules Array of MatchingRules instances (StudyMatchingRule|SeriesMatchingRule|ImageMatchingRule) for the match\n * @return {Object}      Matching Object with score and details (which rule passed or failed)\n */\n\nvar match = function match(metadataInstance, rules) {\n  // Make sure the supplied data is valid.\n  if (!(metadataInstance instanceof StudySummary$1 || metadataInstance instanceof InstanceMetadata$1)) {\n    throw new OHIFError('HPMatcher::match metadataInstance must be an instance of StudySummary or InstanceMetadata');\n  }\n\n  var options = {\n    format: 'grouped'\n  };\n  var details = {\n    passed: [],\n    failed: []\n  };\n  var requiredFailed = false;\n  var score = 0;\n  rules.forEach(function (rule) {\n    var attribute = rule.attribute; // Do not use the custom attribute from the metadataInstance since it is subject to change\n\n    if (CustomAttributeRetrievalCallbacks.hasOwnProperty(attribute)) {\n      var customAttribute = CustomAttributeRetrievalCallbacks[attribute];\n      metadataInstance.setCustomAttribute(attribute, customAttribute.callback(metadataInstance));\n    } // Format the constraint as required by Validate.js\n\n\n    var testConstraint = defineProperty({}, attribute, rule.constraint); // Create a single attribute object to be validated, since metadataInstance is an\n    // instance of Metadata (StudyMetadata, SeriesMetadata or InstanceMetadata)\n\n    var attributeValue = metadataInstance.customAttributeExists(attribute) ? metadataInstance.getCustomAttribute(attribute) : metadataInstance.getTagValue(attribute);\n    var attributeMap = defineProperty({}, attribute, attributeValue); // Use Validate.js to evaluate the constraints on the specified metadataInstance\n\n    var errorMessages;\n\n    try {\n      errorMessages = validate(attributeMap, testConstraint, [options]);\n    } catch (e) {\n      errorMessages = ['Something went wrong during validation.', e];\n    }\n\n    if (!errorMessages) {\n      // If no errorMessages were returned, then validation passed.\n      // Add the rule's weight to the total score\n      score += parseInt(rule.weight, 10); // Log that this rule passed in the matching details object\n\n      details.passed.push({\n        rule: rule\n      });\n    } else {\n      // If errorMessages were present, then validation failed\n      // If the rule that failed validation was Required, then\n      // mark that a required Rule has failed\n      if (rule.required) {\n        requiredFailed = true;\n      } // Log that this rule failed in the matching details object\n      // and include any error messages\n\n\n      details.failed.push({\n        rule: rule,\n        errorMessages: errorMessages\n      });\n    }\n  }); // If a required Rule has failed Validation, set the matching score to zero\n\n  if (requiredFailed) {\n    score = 0;\n  }\n\n  return {\n    score: score,\n    details: details,\n    requiredFailed: requiredFailed\n  };\n};\n\nvar HPMatcher = {\n  match: match\n}; // Sorts an array by score\n\nvar sortByScore = function sortByScore(arr) {\n  arr.sort(function (a, b) {\n    return b.score - a.score;\n  });\n}; // Define an empty object to store callbacks that are used to apply custom viewport settings\n// after a viewport is rendered.\n\n\nvar CustomViewportSettings = {};\n/**\n * Adds a custom setting that can be chosen in the HangingProtocol UI and applied to a Viewport\n *\n * @param settingId The ID used to refer to the setting (e.g. 'displayCADMarkers')\n * @param settingName The name of the setting to be displayed (e.g. 'Display CAD Markers')\n * @param options\n * @param callback A function to be run after a viewport is rendered with a series\n */\n\nfunction addCustomViewportSetting(settingId, settingName, options, callback) {\n  CustomViewportSettings[settingId] = {\n    id: settingId,\n    text: settingName,\n    options: options,\n    callback: callback\n  };\n}\n\nvar comparators = [{\n  id: 'equals',\n  name: '= (Equals)',\n  validator: 'equals',\n  validatorOption: 'value',\n  description: 'The attribute must equal this value.'\n}, {\n  id: 'doesNotEqual',\n  name: '!= (Does not equal)',\n  validator: 'doesNotEqual',\n  validatorOption: 'value',\n  description: 'The attribute must not equal this value.'\n}, {\n  id: 'contains',\n  name: 'Contains',\n  validator: 'contains',\n  validatorOption: 'value',\n  description: 'The attribute must contain this value.'\n}, {\n  id: 'doesNotContain',\n  name: 'Does not contain',\n  validator: 'doesNotContain',\n  validatorOption: 'value',\n  description: 'The attribute must not contain this value.'\n}, {\n  id: 'startsWith',\n  name: 'Starts with',\n  validator: 'startsWith',\n  validatorOption: 'value',\n  description: 'The attribute must start with this value.'\n}, {\n  id: 'endsWith',\n  name: 'Ends with',\n  validator: 'endsWith',\n  validatorOption: 'value',\n  description: 'The attribute must end with this value.'\n}, {\n  id: 'onlyInteger',\n  name: 'Only Integers',\n  validator: 'numericality',\n  validatorOption: 'onlyInteger',\n  description: \"Real numbers won't be allowed.\"\n}, {\n  id: 'greaterThan',\n  name: '> (Greater than)',\n  validator: 'numericality',\n  validatorOption: 'greaterThan',\n  description: 'The attribute has to be greater than this value.'\n}, {\n  id: 'greaterThanOrEqualTo',\n  name: '>= (Greater than or equal to)',\n  validator: 'numericality',\n  validatorOption: 'greaterThanOrEqualTo',\n  description: 'The attribute has to be at least this value.'\n}, {\n  id: 'lessThanOrEqualTo',\n  name: '<= (Less than or equal to)',\n  validator: 'numericality',\n  validatorOption: 'lessThanOrEqualTo',\n  description: 'The attribute can be this value at the most.'\n}, {\n  id: 'lessThan',\n  name: '< (Less than)',\n  validator: 'numericality',\n  validatorOption: 'lessThan',\n  description: 'The attribute has to be less than this value.'\n}, {\n  id: 'odd',\n  name: 'Odd',\n  validator: 'numericality',\n  validatorOption: 'odd',\n  description: 'The attribute has to be odd.'\n}, {\n  id: 'even',\n  name: 'Even',\n  validator: 'numericality',\n  validatorOption: 'even',\n  description: 'The attribute has to be even.'\n}]; // Immutable object\n\nObject.freeze(comparators);\nvar EQUALS_REGEXP = /^equals$/;\n/**\n * This Class represents a Rule to be evaluated given a set of attributes\n * Rules have:\n * - An attribute (e.g. 'seriesDescription')\n * - A constraint Object, in the form required by Validate.js:\n *\n * rule.constraint = {\n *   contains: {\n *      value: 'T-1'\n *      }\n *   };\n *\n *  Note: In this example we use the 'contains' Validator, which is a custom Validator defined in Viewerbase\n *\n * - A value for whether or not they are Required to be matched (default: False)\n * - A value for their relative weighting during Protocol or Image matching (default: 1)\n */\n\nvar Rule =\n/*#__PURE__*/\nfunction () {\n  /**\n   * The Constructor for the Class to create a Rule with the bare\n   * minimum information\n   *\n   * @param name The desired name for the Rule\n   */\n  function Rule(attribute, constraint, required, weight) {\n    classCallCheck(this, Rule); // Create a new UUID for this Rule\n\n    this.id = guid(); // Set the Rule's weight (defaults to 1)\n\n    this.weight = weight || 1; // If an attribute is specified, assign it\n\n    if (attribute) {\n      this.attribute = attribute;\n    } // If a constraint is specified, assign it\n\n\n    if (constraint) {\n      this.constraint = constraint;\n    } // If a value for 'required' is specified, assign it\n\n\n    if (required === undefined) {\n      // If no value was specified, default to False\n      this.required = false;\n    } else {\n      this.required = required;\n    } // Cache for constraint info object\n\n\n    this._constraintInfo = void 0; // Cache for validator and value object\n\n    this._validatorAndValue = void 0;\n  }\n  /**\n   * Occasionally the Rule class needs to be instantiated from a JavaScript Object.\n   * This function fills in a Protocol with the Object data.\n   *\n   * @param input A Rule as a JavaScript Object, e.g. retrieved from JSON\n   */\n\n\n  createClass(Rule, [{\n    key: \"fromObject\",\n    value: function fromObject(input) {\n      // Check if the input already has an ID\n      // If so, keep it. It not, create a new UUID\n      this.id = input.id || guid(); // Assign the specified input data to the Rule\n\n      this.required = input.required;\n      this.weight = input.weight;\n      this.attribute = input.attribute;\n      this.constraint = input.constraint;\n    }\n    /**\n     * Get the constraint info object for the current constraint\n     * @return {Object\\undefined} Constraint object or undefined if current constraint\n     *                            is not valid or not found in comparators list\n     */\n\n  }, {\n    key: \"getConstraintInfo\",\n    value: function getConstraintInfo() {\n      var constraintInfo = this._constraintInfo; // Check if info is cached already\n\n      if (constraintInfo !== void 0) {\n        return constraintInfo;\n      }\n\n      var ruleConstraint = Object.keys(this.constraint)[0];\n\n      if (ruleConstraint !== void 0) {\n        constraintInfo = comparators.find(function (comparator) {\n          return ruleConstraint === comparator.id;\n        });\n      } // Cache this information for later use\n\n\n      this._constraintInfo = constraintInfo;\n      return constraintInfo;\n    }\n    /**\n     * Check if current rule is related to priors\n     * @return {Boolean} True if a rule is related to priors or false otherwise\n     */\n\n  }, {\n    key: \"isRuleForPrior\",\n    value: function isRuleForPrior() {\n      // @TODO: Should we check this too? this.attribute === 'relativeTime'\n      return this.attribute === 'abstractPriorValue';\n    }\n    /**\n     * If the current rule is a rule for priors, returns the number of referenced priors. Otherwise, returns -1.\n     * @return {Number} The number of referenced priors or -1 if not applicable. Returns zero if the actual value could not be determined.\n     */\n\n  }, {\n    key: \"getNumberOfPriorsReferenced\",\n    value: function getNumberOfPriorsReferenced() {\n      if (!this.isRuleForPrior()) {\n        return -1;\n      } // Get rule's validator and value\n\n\n      var ruleValidatorAndValue = this.getConstraintValidatorAndValue();\n      var value = ruleValidatorAndValue.value,\n          validator = ruleValidatorAndValue.validator;\n      var intValue = parseInt(value, 10) || 0; // avoid possible NaN\n      // \"Equal to\" validators\n\n      if (EQUALS_REGEXP.test(validator)) {\n        // In this case, -1 (the oldest prior) indicates that at least one study is used\n        return intValue < 0 ? 1 : intValue;\n      } // Default cases return value\n\n\n      return 0;\n    }\n    /**\n     * Get the constraint validator and value\n     * @return {Object|undefined} Returns an object containing the validator and it's value or undefined\n     */\n\n  }, {\n    key: \"getConstraintValidatorAndValue\",\n    value: function getConstraintValidatorAndValue() {\n      var validatorAndValue = this._validatorAndValue; // Check if validator and value are cached already\n\n      if (validatorAndValue !== void 0) {\n        return validatorAndValue;\n      } // Get the constraint info object\n\n\n      var constraintInfo = this.getConstraintInfo(); // Constraint info object exists and is valid\n\n      if (constraintInfo !== void 0) {\n        var validator = constraintInfo.validator;\n        var currentValidator = this.constraint[validator];\n\n        if (currentValidator) {\n          var constraintValidator = constraintInfo.validatorOption;\n          var constraintValue = currentValidator[constraintValidator];\n          validatorAndValue = {\n            value: constraintValue,\n            validator: constraintInfo.id\n          };\n          this._validatorAndValue = validatorAndValue;\n        }\n      }\n\n      return validatorAndValue;\n    }\n  }]);\n  return Rule;\n}();\n/**\n * The ProtocolMatchingRule Class extends the Rule Class.\n *\n * At present it does not add any new methods or attributes\n * @type {ProtocolMatchingRule}\n */\n\n\nvar ProtocolMatchingRule =\n/*#__PURE__*/\nfunction (_Rule) {\n  inherits(ProtocolMatchingRule, _Rule);\n\n  function ProtocolMatchingRule() {\n    classCallCheck(this, ProtocolMatchingRule);\n    return possibleConstructorReturn(this, getPrototypeOf(ProtocolMatchingRule).apply(this, arguments));\n  }\n\n  return ProtocolMatchingRule;\n}(Rule);\n/**\n * The StudyMatchingRule Class extends the Rule Class.\n *\n * At present it does not add any new methods or attributes\n * @type {StudyMatchingRule}\n */\n\n\nvar StudyMatchingRule =\n/*#__PURE__*/\nfunction (_Rule2) {\n  inherits(StudyMatchingRule, _Rule2);\n\n  function StudyMatchingRule() {\n    classCallCheck(this, StudyMatchingRule);\n    return possibleConstructorReturn(this, getPrototypeOf(StudyMatchingRule).apply(this, arguments));\n  }\n\n  return StudyMatchingRule;\n}(Rule);\n/**\n * The SeriesMatchingRule Class extends the Rule Class.\n *\n * At present it does not add any new methods or attributes\n * @type {SeriesMatchingRule}\n */\n\n\nvar SeriesMatchingRule =\n/*#__PURE__*/\nfunction (_Rule3) {\n  inherits(SeriesMatchingRule, _Rule3);\n\n  function SeriesMatchingRule() {\n    classCallCheck(this, SeriesMatchingRule);\n    return possibleConstructorReturn(this, getPrototypeOf(SeriesMatchingRule).apply(this, arguments));\n  }\n\n  return SeriesMatchingRule;\n}(Rule);\n/**\n * The ImageMatchingRule class extends the Rule Class.\n *\n * At present it does not add any new methods or attributes\n * @type {ImageMatchingRule}\n */\n\n\nvar ImageMatchingRule =\n/*#__PURE__*/\nfunction (_Rule4) {\n  inherits(ImageMatchingRule, _Rule4);\n\n  function ImageMatchingRule() {\n    classCallCheck(this, ImageMatchingRule);\n    return possibleConstructorReturn(this, getPrototypeOf(ImageMatchingRule).apply(this, arguments));\n  }\n\n  return ImageMatchingRule;\n}(Rule);\n/**\n * Removes the first instance of an element from an array, if an equal value exists\n *\n * @param array\n * @param input\n *\n * @returns {boolean} Whether or not the element was found and removed\n */\n\n\nvar removeFromArray = function removeFromArray(array, input) {\n  // If the array is empty, stop here\n  if (!array || !array.length) {\n    return false;\n  }\n\n  array.forEach(function (value, index) {\n    // TODO: Double check whether or not this deep equality check is necessary\n    //if (_.isEqual(value, input)) {\n    if (value === input) {\n      indexToRemove = index;\n      return false;\n    }\n  });\n\n  if (indexToRemove === void 0) {\n    return false;\n  }\n\n  array.splice(indexToRemove, 1);\n  return true;\n};\n/**\n * The ViewportStructure class represents the layout and layout properties that\n * Viewports are displayed in. ViewportStructure has a type, which corresponds to\n * a layout template, and a set of properties, which depend on the type.\n *\n * @type {ViewportStructure}\n */\n\n\nvar ViewportStructure =\n/*#__PURE__*/\nfunction () {\n  function ViewportStructure(type, properties) {\n    classCallCheck(this, ViewportStructure);\n    this.type = type;\n    this.properties = properties;\n  }\n  /**\n   * Occasionally the ViewportStructure class needs to be instantiated from a JavaScript Object.\n   * This function fills in a ViewportStructure with the Object data.\n   *\n   * @param input The ViewportStructure as a JavaScript Object, e.g. retrieved from JSON\n   */\n\n\n  createClass(ViewportStructure, [{\n    key: \"fromObject\",\n    value: function fromObject(input) {\n      this.type = input.type;\n      this.properties = input.properties;\n    }\n    /**\n     * Retrieve the layout template name based on the layout type\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getLayoutTemplateName\",\n    value: function getLayoutTemplateName() {\n      // Viewport structure can be updated later when we build more complex display layouts\n      switch (this.type) {\n        case 'grid':\n          return 'gridLayout';\n      }\n    }\n    /**\n     * Retrieve the number of Viewports required for this layout\n     * given the layout type and properties\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getNumViewports\",\n    value: function getNumViewports() {\n      // Viewport structure can be updated later when we build more complex display layouts\n      switch (this.type) {\n        case 'grid':\n          // For the typical grid layout, we only need to multiply rows by columns to\n          // obtain the number of viewports\n          return this.properties.rows * this.properties.columns;\n      }\n    }\n  }]);\n  return ViewportStructure;\n}();\n/**\n * This Class defines a Viewport in the Hanging Protocol Stage. A Viewport contains\n * arrays of Rules that are matched in the ProtocolEngine in order to determine which\n * images should be hung.\n *\n * @type {Viewport}\n */\n\n\nvar Viewport =\n/*#__PURE__*/\nfunction () {\n  function Viewport() {\n    classCallCheck(this, Viewport);\n    this.viewportSettings = {};\n    this.imageMatchingRules = [];\n    this.seriesMatchingRules = [];\n    this.studyMatchingRules = [];\n  }\n  /**\n   * Occasionally the Viewport class needs to be instantiated from a JavaScript Object.\n   * This function fills in a Viewport with the Object data.\n   *\n   * @param input The Viewport as a JavaScript Object, e.g. retrieved from JSON\n   */\n\n\n  createClass(Viewport, [{\n    key: \"fromObject\",\n    value: function fromObject(input) {\n      var _this = this; // If ImageMatchingRules exist, create them from the Object data\n      // and add them to the Viewport's imageMatchingRules array\n\n\n      if (input.imageMatchingRules) {\n        input.imageMatchingRules.forEach(function (ruleObject) {\n          var rule = new ImageMatchingRule();\n          rule.fromObject(ruleObject);\n\n          _this.imageMatchingRules.push(rule);\n        });\n      } // If SeriesMatchingRules exist, create them from the Object data\n      // and add them to the Viewport's seriesMatchingRules array\n\n\n      if (input.seriesMatchingRules) {\n        input.seriesMatchingRules.forEach(function (ruleObject) {\n          var rule = new SeriesMatchingRule();\n          rule.fromObject(ruleObject);\n\n          _this.seriesMatchingRules.push(rule);\n        });\n      } // If StudyMatchingRules exist, create them from the Object data\n      // and add them to the Viewport's studyMatchingRules array\n\n\n      if (input.studyMatchingRules) {\n        input.studyMatchingRules.forEach(function (ruleObject) {\n          var rule = new StudyMatchingRule();\n          rule.fromObject(ruleObject);\n\n          _this.studyMatchingRules.push(rule);\n        });\n      } // If ViewportSettings exist, add them to the current protocol\n\n\n      if (input.viewportSettings) {\n        this.viewportSettings = input.viewportSettings;\n      }\n    }\n    /**\n     * Finds and removes a rule from whichever array it exists in.\n     * It is not required to specify if it exists in studyMatchingRules,\n     * seriesMatchingRules, or imageMatchingRules\n     *\n     * @param rule\n     */\n\n  }, {\n    key: \"removeRule\",\n    value: function removeRule(rule) {\n      var array;\n\n      if (rule instanceof StudyMatchingRule) {\n        array = this.studyMatchingRules;\n      } else if (rule instanceof SeriesMatchingRule) {\n        array = this.seriesMatchingRules;\n      } else if (rule instanceof ImageMatchingRule) {\n        array = this.imageMatchingRules;\n      }\n\n      removeFromArray(array, rule);\n    }\n  }]);\n  return Viewport;\n}();\n/**\n * A Stage is one step in the Display Set Sequence for a Hanging Protocol\n *\n * Stages are defined as a ViewportStructure and an array of Viewports\n *\n * @type {Stage}\n */\n\n\nvar Stage =\n/*#__PURE__*/\nfunction () {\n  function Stage(ViewportStructure$$1, name) {\n    classCallCheck(this, Stage); // Create a new UUID for this Stage\n\n    this.id = guid(); // Assign the name and ViewportStructure provided\n\n    this.name = name;\n    this.viewportStructure = ViewportStructure$$1; // Create an empty array for the Viewports\n\n    this.viewports = []; // Set the created date to Now\n\n    this.createdDate = new Date();\n  }\n  /**\n   * Creates a clone of the current Stage with a new name\n   *\n   * @param name\n   * @returns {Stage|*}\n   */\n\n\n  createClass(Stage, [{\n    key: \"createClone\",\n    value: function createClone(name) {\n      // Create a new JavaScript independent of the current Protocol\n      var currentStage = Object.assign({}, this); // Create a new Stage to return\n\n      var clonedStage = new Stage(); // Assign the desired properties\n\n      currentStage.id = clonedStage.id;\n      clonedStage.fromObject(currentStage); // If we have specified a name, assign it\n\n      if (name) {\n        clonedStage.name = name;\n      } // Return the cloned Stage\n\n\n      return clonedStage;\n    }\n    /**\n     * Occasionally the Stage class needs to be instantiated from a JavaScript Object.\n     * This function fills in a Protocol with the Object data.\n     *\n     * @param input A Stage as a JavaScript Object, e.g. retrieved from JSON\n     */\n\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(input) {\n      var _this = this; // Check if the input already has an ID\n      // If so, keep it. It not, create a new UUID\n\n\n      this.id = input.id || guid(); // Assign the input name to the Stage\n\n      this.name = input.name; // If a ViewportStructure is present in the input, add it from the\n      // input data\n\n      this.viewportStructure = new ViewportStructure();\n      this.viewportStructure.fromObject(input.viewportStructure); // If any viewports are present in the input object\n\n      if (input.viewports) {\n        input.viewports.forEach(function (viewportObject) {\n          // Create a new Viewport with their data\n          var viewport = new Viewport();\n          viewport.fromObject(viewportObject); // Add it to the viewports array\n\n          _this.viewports.push(viewport);\n        });\n      }\n    }\n  }]);\n  return Stage;\n}();\n/**\n * This class represents a Hanging Protocol at the highest level\n *\n * @type {Protocol}\n */\n\n\nvar Protocol =\n/*#__PURE__*/\nfunction () {\n  /**\n   * The Constructor for the Class to create a Protocol with the bare\n   * minimum information\n   *\n   * @param name The desired name for the Protocol\n   */\n  function Protocol(name) {\n    classCallCheck(this, Protocol); // Create a new UUID for this Protocol\n\n    this.id = guid(); // Store a value which determines whether or not a Protocol is locked\n    // This is probably temporary, since we will eventually have role / user\n    // checks for editing. For now we just need it to prevent changes to the\n    // default protocols.\n\n    this.locked = false; // Boolean value to indicate if the protocol has updated priors information\n    // it's set in \"updateNumberOfPriorsReferenced\" function\n\n    this.hasUpdatedPriorsInformation = false; // Apply the desired name\n\n    this.name = name; // Set the created and modified dates to Now\n\n    this.createdDate = new Date();\n    this.modifiedDate = new Date(); // If we are logged in while creating this Protocol,\n    // store this information as well\n\n    if (user.userLoggedIn && user.userLoggedIn()) {\n      this.createdBy = user.getUserId();\n      this.modifiedBy = user.getUserId();\n    } // Create two empty Sets specifying which roles\n    // have read and write access to this Protocol\n\n\n    this.availableTo = new Set();\n    this.editableBy = new Set(); // Define empty arrays for the Protocol matching rules\n    // and Stages\n\n    this.protocolMatchingRules = [];\n    this.stages = []; // Define auxiliary values for priors\n\n    this.numberOfPriorsReferenced = -1;\n  }\n\n  createClass(Protocol, [{\n    key: \"getNumberOfPriorsReferenced\",\n    value: function getNumberOfPriorsReferenced() {\n      var skipCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var numberOfPriorsReferenced = skipCache !== true ? this.numberOfPriorsReferenced : -1; // Check if information is cached already\n\n      if (numberOfPriorsReferenced > -1) {\n        return numberOfPriorsReferenced;\n      }\n\n      numberOfPriorsReferenced = 0; // Search each study matching rule for prior rules\n      // Each stage can have many viewports that can have\n      // multiple study matching rules.\n\n      this.stages.forEach(function (stage) {\n        if (!stage.viewports) {\n          return;\n        }\n\n        stage.viewports.forEach(function (viewport) {\n          if (!viewport.studyMatchingRules) {\n            return;\n          }\n\n          viewport.studyMatchingRules.forEach(function (rule) {\n            // If the current rule is not a priors rule, it will return -1 then numberOfPriorsReferenced will continue to be 0\n            var priorsReferenced = rule.getNumberOfPriorsReferenced();\n\n            if (priorsReferenced > numberOfPriorsReferenced) {\n              numberOfPriorsReferenced = priorsReferenced;\n            }\n          });\n        });\n      });\n      this.numberOfPriorsReferenced = numberOfPriorsReferenced;\n      return numberOfPriorsReferenced;\n    }\n  }, {\n    key: \"updateNumberOfPriorsReferenced\",\n    value: function updateNumberOfPriorsReferenced() {\n      this.getNumberOfPriorsReferenced(true);\n    }\n    /**\n     * Method to update the modifiedDate when the Protocol\n     * has been changed\n     */\n\n  }, {\n    key: \"protocolWasModified\",\n    value: function protocolWasModified() {\n      // If we are logged in while modifying this Protocol,\n      // store this information as well\n      if (user.userLoggedIn && user.userLoggedIn()) {\n        this.modifiedBy = user.getUserId();\n      } // Protocol has been modified, so mark priors information\n      // as \"outdated\"\n\n\n      this.hasUpdatedPriorsInformation = false; // Update number of priors referenced info\n\n      this.updateNumberOfPriorsReferenced(); // Update the modifiedDate with the current Date/Time\n\n      this.modifiedDate = new Date();\n    }\n    /**\n     * Occasionally the Protocol class needs to be instantiated from a JavaScript Object\n     * containing the Protocol data. This function fills in a Protocol with the Object\n     * data.\n     *\n     * @param input A Protocol as a JavaScript Object, e.g. retrieved from JSON\n     */\n\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(input) {\n      var _this = this; // Check if the input already has an ID\n      // If so, keep it. It not, create a new UUID\n\n\n      this.id = input.id || guid(); // Assign the input name to the Protocol\n\n      this.name = input.name; // Retrieve locked status, use !! to make it truthy\n      // so that undefined values will be set to false\n\n      this.locked = !!input.locked; // TODO: Check how to regenerate Set from Object\n      //this.availableTo = new Set(input.availableTo);\n      //this.editableBy = new Set(input.editableBy);\n      // If the input contains Protocol matching rules\n\n      if (input.protocolMatchingRules) {\n        input.protocolMatchingRules.forEach(function (ruleObject) {\n          // Create new Rules from the stored data\n          var rule = new ProtocolMatchingRule();\n          rule.fromObject(ruleObject); // Add them to the Protocol\n\n          _this.protocolMatchingRules.push(rule);\n        });\n      } // If the input contains data for various Stages in the\n      // display set sequence\n\n\n      if (input.stages) {\n        input.stages.forEach(function (stageObject) {\n          // Create Stages from the stored data\n          var stage = new Stage();\n          stage.fromObject(stageObject); // Add them to the Protocol\n\n          _this.stages.push(stage);\n        });\n      }\n    }\n    /**\n     * Creates a clone of the current Protocol with a new name\n     *\n     * @param name\n     * @returns {Protocol|*}\n     */\n\n  }, {\n    key: \"createClone\",\n    value: function createClone(name) {\n      // Create a new JavaScript independent of the current Protocol\n      var currentProtocol = Object.assign({}, this); // Create a new Protocol to return\n\n      var clonedProtocol = new Protocol(); // Apply the desired properties\n\n      currentProtocol.id = clonedProtocol.id;\n      clonedProtocol.fromObject(currentProtocol); // If we have specified a name, assign it\n\n      if (name) {\n        clonedProtocol.name = name;\n      } // Unlock the clone\n\n\n      clonedProtocol.locked = false; // Return the cloned Protocol\n\n      return clonedProtocol;\n    }\n    /**\n     * Adds a Stage to this Protocol's display set sequence\n     *\n     * @param stage\n     */\n\n  }, {\n    key: \"addStage\",\n    value: function addStage(stage) {\n      this.stages.push(stage); // Update the modifiedDate and User that last\n      // modified this Protocol\n\n      this.protocolWasModified();\n    }\n    /**\n     * Adds a Rule to this Protocol's array of matching rules\n     *\n     * @param rule\n     */\n\n  }, {\n    key: \"addProtocolMatchingRule\",\n    value: function addProtocolMatchingRule(rule) {\n      this.protocolMatchingRules.push(rule); // Update the modifiedDate and User that last\n      // modified this Protocol\n\n      this.protocolWasModified();\n    }\n    /**\n     * Removes a Rule from this Protocol's array of matching rules\n     *\n     * @param rule\n     */\n\n  }, {\n    key: \"removeProtocolMatchingRule\",\n    value: function removeProtocolMatchingRule(rule) {\n      var wasRemoved = removeFromArray(this.protocolMatchingRules, rule); // Update the modifiedDate and User that last\n      // modified this Protocol\n\n      if (wasRemoved) {\n        this.protocolWasModified();\n      }\n    }\n  }]);\n  return Protocol;\n}(); // For example, one strategy stores hanging protocols in the application server while\n// another strategy stores them in a remote machine, but only one strategy can be used at a time.\n\n\nvar ProtocolStore =\n/*#__PURE__*/\nfunction () {\n  function ProtocolStore(strategy) {\n    classCallCheck(this, ProtocolStore);\n    this.strategy = strategy;\n  }\n  /**\n   * Get a Protocol instance or array of Protocol instances for the given protocol object or array\n   * @param  {Object|array} protocolObject Protocol plain object or array of Protocol plain objects\n   * @return {Protocol|array} Protocol instance or array of Protocol intances for the given protocol object or array\n   */\n\n\n  createClass(ProtocolStore, [{\n    key: \"onReady\",\n\n    /**\n     * Registers a function to be called when the protocol store is ready to persist hanging protocols\n     *\n     * NOTE: Strategies should implement this function\n     *\n     * @param callback The function to be called as a callback\n     */\n    value: function onReady(callback) {\n      this.strategy.onReady(callback);\n    }\n    /**\n     * Gets the hanging protocol by protocolId if defined, otherwise all stored hanging protocols\n     *\n     * NOTE: Strategies should implement this function\n     *\n     * @param protocolId The protocol ID used to find the hanging protocol\n     * @returns {object|array} The hanging protocol by protocolId or array of the stored hanging protocols\n     */\n\n  }, {\n    key: \"getProtocol\",\n    value: function getProtocol(protocolId) {\n      var result = this.strategy.getProtocol(protocolId);\n      return ProtocolStore.getProtocolInstance(result);\n    }\n    /**\n     * Stores the hanging protocol\n     *\n     * NOTE: Strategies should implement this function\n     *\n     * @param protocol The hanging protocol to be stored\n     */\n\n  }, {\n    key: \"addProtocol\",\n    value: function addProtocol(protocol) {\n      this.strategy.addProtocol(protocol);\n    }\n    /**\n     * Updates the hanging protocol by protocolId\n     *\n     * NOTE: Strategies should implement this function\n     *\n     * @param protocolId The protocol ID used to find the hanging protocol to update\n     * @param protocol The updated hanging protocol\n     */\n\n  }, {\n    key: \"updateProtocol\",\n    value: function updateProtocol(protocolId, protocol) {\n      this.strategy.updateProtocol(protocolId, protocol);\n    }\n    /**\n     * Removes the hanging protocol\n     *\n     * NOTE: Strategies should implement this function\n     *\n     * @param protocolId The protocol ID used to remove the hanging protocol\n     */\n\n  }, {\n    key: \"removeProtocol\",\n    value: function removeProtocol(protocolId) {\n      this.strategy.removeProtocol(protocolId);\n    }\n  }], [{\n    key: \"getProtocolInstance\",\n    value: function getProtocolInstance(protocolObject) {\n      var result = protocolObject; // If result is an array of protocols objects\n\n      if (result instanceof Array) {\n        result.forEach(function (protocol, index) {\n          // Check if protocol is an instance of Protocol\n          if (!(protocol instanceof Protocol)) {\n            var protocolInstance = new Protocol();\n            protocolInstance.fromObject(protocol);\n            result[index] = protocolInstance;\n          }\n        });\n      } else if (result !== void 0 && !(result instanceof Protocol)) {\n        // Check if result exists and is not an instance of Protocol\n        var protocolInstance = new Protocol();\n        protocolInstance.fromObject(result);\n        result = protocolInstance;\n      }\n\n      return result;\n    }\n  }]);\n  return ProtocolStore;\n}();\n\nfunction getDefaultProtocol() {\n  var protocol = new Protocol('Default');\n  protocol.id = 'defaultProtocol';\n  protocol.locked = true;\n  var oneByOne = new ViewportStructure('grid', {\n    rows: 1,\n    columns: 1\n  });\n  var viewport = new Viewport();\n  var first = new Stage(oneByOne, 'oneByOne');\n  first.viewports.push(viewport);\n  protocol.stages.push(first);\n  return protocol;\n}\n\nvar defaultProtocol = getDefaultProtocol();\n\nvar ProtocolStrategy =\n/*#__PURE__*/\nfunction () {\n  function ProtocolStrategy() {\n    classCallCheck(this, ProtocolStrategy);\n    this.hangingProtocols = new Map();\n    this.defaultsAdded = false;\n  }\n  /**\n   * Registers a function to be called when the hangingProtocols collection is subscribed\n   * The callback is called only one time when the subscription is ready\n   *\n   * @param callback The function to be called as a callback\n   */\n\n\n  createClass(ProtocolStrategy, [{\n    key: \"onReady\",\n    value: function onReady(callback) {\n      if (!this.defaultsAdded) {\n        log$1.info('Inserting the default hanging protocol...');\n        this.addProtocol(defaultProtocol);\n        this.defaultsAdded = true;\n      }\n\n      callback();\n    }\n    /**\n     * Gets the hanging protocol by protocolId if defined, otherwise all stored hanging protocols\n     *\n     * @param protocolId The protocol ID used to find the hanging protocol\n     * @returns {object|array} The hanging protocol by protocolId or array of the stored hanging protocols\n     */\n\n  }, {\n    key: \"getProtocol\",\n    value: function getProtocol(protocolId) {\n      // Return the hanging protocol by protocolId if defined\n      if (protocolId) {\n        return this.hangingProtocols.get(protocolId);\n      } // Otherwise, return all protocols\n\n\n      return Array.from(this.hangingProtocols.values());\n    }\n    /**\n     * Stores the hanging protocol\n     *\n     * @param protocol The hanging protocol to be stored\n     */\n\n  }, {\n    key: \"addProtocol\",\n    value: function addProtocol(protocol) {\n      this.hangingProtocols.set(protocol.id, protocol);\n    }\n    /**\n     * Updates the hanging protocol by protocolId\n     *\n     * @param protocolId The protocol ID used to find the hanging protocol to update\n     * @param protocol The updated hanging protocol\n     */\n\n  }, {\n    key: \"updateProtocol\",\n    value: function updateProtocol(protocolId, protocol) {\n      if (!this.hangingProtocols.has(protocolId)) {\n        return;\n      }\n\n      this.hangingProtocols.set(protocolId, protocol);\n    }\n    /**\n     * Removes the hanging protocol\n     *\n     * @param protocolId The protocol ID used to remove the hanging protocol\n     */\n\n  }, {\n    key: \"removeProtocol\",\n    value: function removeProtocol(protocolId) {\n      if (!this.hangingProtocols.has(protocolId)) {\n        return;\n      }\n\n      this.hangingProtocols.delete(protocolId);\n    }\n  }]);\n  return ProtocolStrategy;\n}();\n/**\n * Import Constants\n */\n\n\nvar StudyMetadata$1 = metadata.StudyMetadata,\n    InstanceMetadata$2 = metadata.InstanceMetadata,\n    StudySummary$2 = metadata.StudySummary; // Useful constants\n\nvar ABSTRACT_PRIOR_VALUE = 'abstractPriorValue';\n\nvar ProtocolEngine =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor\n   * @param  {ProtocolStore} protocolStore Protocol Store used to keep track of all hanging protocols\n   * @param  {Array} studies Array of study metadata\n   * @param  {Map} priorStudies Map of prior studies\n   * @param  {Object} studyMetadataSource Instance of StudyMetadataSource (ohif-viewerbase) Object to get study metadata\n   * @param  {Object} options\n   */\n  function ProtocolEngine(protocolStore, studies, priorStudies, studyMetadataSource) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    classCallCheck(this, ProtocolEngine);\n    defineProperty(this, \"matchedProtocols\", new Map());\n    defineProperty(this, \"matchedProtocolScores\", {}); // -----------\n    // Type Validations\n\n    if (!(studyMetadataSource instanceof StudyMetadataSource)) {\n      throw new OHIFError('ProtocolEngine::constructor studyMetadataSource is not an instance of StudyMetadataSource');\n    }\n\n    if (!(studies instanceof Array) && !studies.every(function (study) {\n      return study instanceof StudyMetadata$1;\n    })) {\n      throw new OHIFError(\"ProtocolEngine::constructor studies is not an array or it's items are not instances of StudyMetadata\");\n    } // --------------\n    // Initialization\n\n\n    this.protocolStore = protocolStore;\n    this.studies = studies;\n    this.priorStudies = priorStudies instanceof Map ? priorStudies : new Map();\n    this.studyMetadataSource = studyMetadataSource;\n    this.options = options; // Put protocol engine in a known state\n\n    this.reset(); // Create an array for new stage ids to be stored\n    // while editing a stage\n\n    this.newStageIds = [];\n  }\n  /**\n   * Resets the ProtocolEngine to the best match\n   */\n\n\n  createClass(ProtocolEngine, [{\n    key: \"reset\",\n    value: function reset() {\n      var protocol = this.getBestProtocolMatch();\n      this.setHangingProtocol(protocol);\n    }\n    /**\n     * Retrieves the current Stage from the current Protocol and stage index\n     *\n     * @returns {*} The Stage model for the currently displayed Stage\n     */\n\n  }, {\n    key: \"getCurrentStageModel\",\n    value: function getCurrentStageModel() {\n      return this.protocol.stages[this.stage];\n    }\n    /**\n     * Finds the best protocols from Protocol Store, matching each protocol matching rules\n     * with the given study. The best protocol are orded by score and returned in an array\n     * @param  {Object} study StudyMetadata instance object\n     * @return {Array}       Array of match objects or an empty array if no match was found\n     *                       Each match object has the score of the matching and the matched\n     *                       protocol\n     */\n\n  }, {\n    key: \"findMatchByStudy\",\n    value: function findMatchByStudy(study) {\n      log$1.trace('ProtocolEngine::findMatchByStudy');\n      var matched = [];\n      var studyInstance = study.getFirstInstance(); // Set custom attribute for study metadata\n\n      var numberOfAvailablePriors = this.getNumberOfAvailablePriors(study.getObjectID());\n      this.protocolStore.getProtocol().forEach(function (protocol) {\n        // Clone the protocol's protocolMatchingRules array\n        // We clone it so that we don't accidentally add the\n        // numberOfPriorsReferenced rule to the Protocol itself.\n        var rules = protocol.protocolMatchingRules.slice();\n\n        if (!rules) {\n          return;\n        } // Check if the study has the minimun number of priors used by the protocol.\n\n\n        var numberOfPriorsReferenced = protocol.getNumberOfPriorsReferenced();\n\n        if (numberOfPriorsReferenced > numberOfAvailablePriors) {\n          return;\n        } // Run the matcher and get matching details\n\n\n        var matchedDetails = HPMatcher.match(studyInstance, rules);\n        var score = matchedDetails.score; // The protocol matched some rule, add it to the matched list\n\n        if (score > 0) {\n          matched.push({\n            score: score,\n            protocol: protocol\n          });\n        }\n      }); // If no matches were found, select the default protocol\n\n      if (!matched.length) {\n        var defaultProtocol = this.protocolStore.getProtocol('defaultProtocol');\n        return [{\n          score: 1,\n          protocol: defaultProtocol\n        }];\n      } // Sort the matched list by score\n\n\n      sortByScore(matched);\n      log$1.trace('ProtocolEngine::findMatchByStudy matched', matched);\n      return matched;\n    }\n  }, {\n    key: \"_clearMatchedProtocols\",\n    value: function _clearMatchedProtocols() {\n      this.matchedProtocols.clear();\n      this.matchedProtocolScores = {};\n    }\n    /**\n     * Populates the MatchedProtocols Collection by running the matching procedure\n     */\n\n  }, {\n    key: \"updateProtocolMatches\",\n    value: function updateProtocolMatches() {\n      var _this = this;\n\n      log$1.trace('ProtocolEngine::updateProtocolMatches'); // Clear all data currently in matchedProtocols\n\n      this._clearMatchedProtocols(); // For each study, find the matching protocols\n\n\n      this.studies.forEach(function (study) {\n        var matched = _this.findMatchByStudy(study); // For each matched protocol, check if it is already in MatchedProtocols\n\n\n        matched.forEach(function (matchedDetail) {\n          var protocol = matchedDetail.protocol;\n\n          if (!protocol) {\n            return;\n          } // If it is not already in the MatchedProtocols Collection, insert it with its score\n\n\n          if (!_this.matchedProtocols.has(protocol.id)) {\n            log$1.trace('ProtocolEngine::updateProtocolMatches inserting protocol match', matchedDetail);\n\n            _this.matchedProtocols.set(protocol.id, protocol);\n\n            _this.matchedProtocolScores[protocol.id] = matchedDetail.score;\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_largestKeyByValue\",\n    value: function _largestKeyByValue(obj) {\n      return Object.keys(obj).reduce(function (a, b) {\n        return obj[a] > obj[b] ? a : b;\n      });\n    }\n  }, {\n    key: \"_getHighestScoringProtocol\",\n    value: function _getHighestScoringProtocol() {\n      if (!Object.keys(this.matchedProtocolScores).length) {\n        return this.protocolStore.getProtocol('defaultProtocol');\n      }\n\n      var highestScoringProtocolId = this._largestKeyByValue(this.matchedProtocolScores);\n\n      return this.matchedProtocols.get(highestScoringProtocolId);\n    }\n    /**\n     * Return the best matched Protocol to the current study or set of studies\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getBestProtocolMatch\",\n    value: function getBestProtocolMatch() {\n      // Run the matching to populate matchedProtocols Set and Map\n      this.updateProtocolMatches(); // Retrieve the highest scoring Protocol\n\n      var bestMatch = this._getHighestScoringProtocol();\n\n      log$1.trace('ProtocolEngine::getBestProtocolMatch bestMatch', bestMatch);\n      return bestMatch;\n    }\n    /**\n     * Get the number of prior studies supplied in the priorStudies map property.\n     *\n     * @param {String} studyObjectID The study object ID of the study whose priors are needed\n     * @returns {number} The number of available prior studies with the same PatientID\n     */\n\n  }, {\n    key: \"getNumberOfAvailablePriors\",\n    value: function getNumberOfAvailablePriors(studyObjectID) {\n      return this.getAvailableStudyPriors(studyObjectID).length;\n    }\n    /**\n     * Get the array of prior studies from a specific study.\n     *\n     * @param {String} studyObjectID The study object ID of the study whose priors are needed\n     * @returns {Array} The array of available priors or an empty array\n     */\n\n  }, {\n    key: \"getAvailableStudyPriors\",\n    value: function getAvailableStudyPriors(studyObjectID) {\n      var priors = this.priorStudies.get(studyObjectID);\n      return priors instanceof Array ? priors : [];\n    } // Match images given a list of Studies and a Viewport's image matching reqs\n\n  }, {\n    key: \"matchImages\",\n    value: function matchImages(viewport, viewportIndex) {\n      var _this2 = this;\n\n      log$1.trace('ProtocolEngine::matchImages');\n      var studyMatchingRules = viewport.studyMatchingRules,\n          seriesMatchingRules = viewport.seriesMatchingRules,\n          instanceMatchingRules = viewport.imageMatchingRules;\n      var matchingScores = [];\n      var currentStudy = this.studies[0]; // @TODO: Should this be: this.studies[this.currentStudy] ???\n\n      var firstInstance = currentStudy.getFirstInstance();\n      var highestStudyMatchingScore = 0;\n      var highestSeriesMatchingScore = 0; // Set custom attribute for study metadata and it's first instance\n\n      currentStudy.setCustomAttribute(ABSTRACT_PRIOR_VALUE, 0);\n\n      if (firstInstance instanceof InstanceMetadata$2) {\n        firstInstance.setCustomAttribute(ABSTRACT_PRIOR_VALUE, 0);\n      } // Only used if study matching rules has abstract prior values defined...\n\n\n      var priorStudies;\n      studyMatchingRules.forEach(function (rule) {\n        if (rule.attribute === ABSTRACT_PRIOR_VALUE) {\n          var validatorType = Object.keys(rule.constraint)[0];\n          var validator = Object.keys(rule.constraint[validatorType])[0];\n          var abstractPriorValue = rule.constraint[validatorType][validator];\n          abstractPriorValue = parseInt(abstractPriorValue, 10); // TODO: Restrict or clarify validators for abstractPriorValue?\n          // No need to call it more than once...\n\n          if (!priorStudies) {\n            priorStudies = _this2.getAvailableStudyPriors(currentStudy.getObjectID());\n          } // TODO: Revisit this later: What about two studies with the same\n          // study date?\n\n\n          var priorStudy;\n\n          if (abstractPriorValue === -1) {\n            priorStudy = priorStudies[priorStudies.length - 1];\n          } else {\n            var studyIndex = Math.max(abstractPriorValue - 1, 0);\n            priorStudy = priorStudies[studyIndex];\n          } // Invalid data\n\n\n          if (!(priorStudy instanceof StudyMetadata$1) && !(priorStudy instanceof StudySummary$2)) {\n            return;\n          }\n\n          var priorStudyObjectID = priorStudy.getObjectID(); // Check if study metadata is already in studies list\n\n          if (_this2.studies.find(function (study) {\n            return study.getObjectID() === priorStudyObjectID;\n          })) {\n            return;\n          } // Get study metadata if necessary and load study in the viewer (each viewer should provide it's own load study method)\n\n\n          _this2.studyMetadataSource.loadStudy(priorStudy).then(function (studyMetadata) {\n            // Set the custom attribute abstractPriorValue for the study metadata\n            studyMetadata.setCustomAttribute(ABSTRACT_PRIOR_VALUE, abstractPriorValue); // Also add custom attribute\n\n            var firstInstance = studyMetadata.getFirstInstance();\n\n            if (firstInstance instanceof InstanceMetadata$2) {\n              firstInstance.setCustomAttribute(ABSTRACT_PRIOR_VALUE, abstractPriorValue);\n            } // Insert the new study metadata\n\n\n            _this2.studies.push(studyMetadata); // Update the viewport to refresh layout manager with new study\n\n\n            _this2.updateViewports(viewportIndex);\n          }, function (error) {\n            log$1.warn(error);\n            throw new OHIFError(\"ProtocolEngine::matchImages could not get study metadata for the Study with the following ObjectID: \".concat(priorStudyObjectID));\n          });\n        } // TODO: Add relative Date / time\n\n      });\n      this.studies.forEach(function (study) {\n        var studyMatchDetails = HPMatcher.match(study.getFirstInstance(), studyMatchingRules); // Prevent bestMatch from being updated if the matchDetails' required attribute check has failed\n\n        if (studyMatchDetails.requiredFailed === true || studyMatchDetails.score < highestStudyMatchingScore) {\n          return;\n        }\n\n        highestStudyMatchingScore = studyMatchDetails.score;\n        study.forEachSeries(function (series) {\n          var seriesMatchDetails = HPMatcher.match(series.getFirstInstance(), seriesMatchingRules); // Prevent bestMatch from being updated if the matchDetails' required attribute check has failed\n\n          if (seriesMatchDetails.requiredFailed === true || seriesMatchDetails.score < highestSeriesMatchingScore) {\n            return;\n          }\n\n          highestSeriesMatchingScore = seriesMatchDetails.score;\n          series.forEachInstance(function (instance, index) {\n            // This tests to make sure there is actually image data in this instance\n            // TODO: Change this when we add PDF and MPEG support\n            // See https://ohiforg.atlassian.net/browse/LT-227\n            // sopClassUid = x00080016\n            // rows = x00280010\n            if (!isImage(instance.getTagValue('x00080016')) && !instance.getTagValue('x00280010')) {\n              return;\n            }\n\n            var instanceMatchDetails = HPMatcher.match(instance, instanceMatchingRules); // Prevent bestMatch from being updated if the matchDetails' required attribute check has failed\n\n            if (instanceMatchDetails.requiredFailed === true) {\n              return;\n            }\n\n            var matchDetails = {\n              passed: [],\n              failed: []\n            };\n            matchDetails.passed = matchDetails.passed.concat(instanceMatchDetails.details.passed);\n            matchDetails.passed = matchDetails.passed.concat(seriesMatchDetails.details.passed);\n            matchDetails.passed = matchDetails.passed.concat(studyMatchDetails.details.passed);\n            matchDetails.failed = matchDetails.failed.concat(instanceMatchDetails.details.failed);\n            matchDetails.failed = matchDetails.failed.concat(seriesMatchDetails.details.failed);\n            matchDetails.failed = matchDetails.failed.concat(studyMatchDetails.details.failed);\n            var totalMatchScore = instanceMatchDetails.score + seriesMatchDetails.score + studyMatchDetails.score;\n            var currentSOPInstanceUID = instance.getSOPInstanceUID();\n            var imageDetails = {\n              studyInstanceUid: study.getStudyInstanceUID(),\n              seriesInstanceUid: series.getSeriesInstanceUID(),\n              sopInstanceUid: currentSOPInstanceUID,\n              currentImageIdIndex: index,\n              matchingScore: totalMatchScore,\n              matchDetails: matchDetails,\n              sortingInfo: {\n                score: totalMatchScore,\n                study: instance.getTagValue('x00080020') + instance.getTagValue('x00080030'),\n                // StudyDate = x00080020 StudyTime = x00080030\n                series: parseInt(instance.getTagValue('x00200011')),\n                // TODO: change for seriesDateTime SeriesNumber = x00200011\n                instance: parseInt(instance.getTagValue('x00200013')) // TODO: change for acquisitionTime InstanceNumber = x00200013\n\n              }\n            }; // Find the displaySet\n\n            var displaySet = study.findDisplaySet(function (displaySet) {\n              return displaySet.images.find(function (image) {\n                return image.getSOPInstanceUID() === currentSOPInstanceUID;\n              });\n            }); // If the instance was found, set the displaySet ID\n\n            if (displaySet) {\n              imageDetails.displaySetInstanceUid = displaySet.getUID();\n              imageDetails.imageId = instance.getImageId();\n            }\n\n            matchingScores.push(imageDetails);\n          });\n        });\n      }); // Sort the matchingScores\n\n      var sortingFunction = sortBy({\n        name: 'score',\n        reverse: true\n      }, {\n        name: 'study',\n        reverse: true\n      }, {\n        name: 'instance'\n      }, {\n        name: 'series'\n      });\n      matchingScores.sort(function (a, b) {\n        return sortingFunction(a.sortingInfo, b.sortingInfo);\n      });\n      var bestMatch = matchingScores[0];\n      log$1.trace('ProtocolEngine::matchImages bestMatch', bestMatch);\n      return {\n        bestMatch: bestMatch,\n        matchingScores: matchingScores\n      };\n    }\n    /**\n     * Sets the current layout\n     *\n     * @param rows\n     * @param columns\n     */\n\n  }, {\n    key: \"setLayout\",\n    value: function setLayout(rows, columns) {\n      if (rows < 1 && columns < 1) {\n        log$1.error(\"Invalid layout \".concat(rows, \" x \").concat(columns));\n        return;\n      }\n\n      if (typeof this.options.setLayout !== 'function') {\n        log$1.error('Hanging Protocol Engine setLayout callback is not defined');\n        return;\n      }\n\n      var viewports = [];\n      var numViewports = rows * columns;\n\n      for (var i = 0; i < numViewports; i++) {\n        viewports.push({\n          height: \"\".concat(100 / rows, \"%\"),\n          width: \"\".concat(100 / columns, \"%\")\n        });\n      }\n\n      this.options.setLayout({\n        viewports: viewports\n      });\n    }\n    /**\n     * Rerenders viewports that are part of the current layout manager\n     * using the matching rules internal to each viewport.\n     *\n     * If this function is provided the index of a viewport, only the specified viewport\n     * is rerendered.\n     *\n     * @param viewportIndex\n     */\n\n  }, {\n    key: \"updateViewports\",\n    value: function updateViewports(viewportIndex) {\n      var _this3 = this;\n\n      log$1.trace(\"ProtocolEngine::updateViewports viewportIndex: \".concat(viewportIndex)); // Make sure we have an active protocol with a non-empty array of display sets\n\n      if (!this.getNumProtocolStages()) {\n        return;\n      } // Retrieve the current stage\n\n\n      var stageModel = this.getCurrentStageModel(); // If the current stage does not fulfill the requirements to be displayed,\n      // stop here.\n\n      if (!stageModel || !stageModel.viewportStructure || !stageModel.viewports || !stageModel.viewports.length) {\n        return;\n      } // Retrieve the layoutTemplate associated with the current display set's viewport structure\n      // If no such template name exists, stop here.\n\n\n      var layoutTemplateName = stageModel.viewportStructure.getLayoutTemplateName();\n\n      if (!layoutTemplateName) {\n        return;\n      } // Retrieve the properties associated with the current display set's viewport structure template\n      // If no such layout properties exist, stop here.\n\n\n      var layoutProps = stageModel.viewportStructure.properties;\n\n      if (!layoutProps) {\n        return;\n      } // Create an empty array to store the output viewportData\n\n\n      var viewportData = []; // Empty the matchDetails associated with the ProtocolEngine.\n      // This will be used to store the pass/fail details and score\n      // for each of the viewport matching procedures\n\n      this.matchDetails = []; // Loop through each viewport\n\n      stageModel.viewports.forEach(function (viewport, viewportIndex) {\n        var details = _this3.matchImages(viewport, viewportIndex);\n\n        _this3.matchDetails[viewportIndex] = details; // Convert any YES/NO values into true/false for Cornerstone\n\n        var cornerstoneViewportParams = {}; // Cache viewportSettings keys\n\n        var viewportSettingsKeys = Object.keys(viewport.viewportSettings);\n        viewportSettingsKeys.forEach(function (key) {\n          var value = viewport.viewportSettings[key];\n\n          if (value === 'YES') {\n            value = true;\n          } else if (value === 'NO') {\n            value = false;\n          }\n\n          cornerstoneViewportParams[key] = value;\n        }); // imageViewerViewports occasionally needs relevant layout data in order to set\n        // the element style of the viewport in question\n\n        var currentViewportData = objectSpread({\n          viewportIndex: viewportIndex,\n          viewport: cornerstoneViewportParams\n        }, layoutProps);\n        var customSettings = [];\n        viewportSettingsKeys.forEach(function (id) {\n          var setting = CustomViewportSettings[id];\n\n          if (!setting) {\n            return;\n          }\n\n          customSettings.push({\n            id: id,\n            value: viewport.viewportSettings[id]\n          });\n        });\n\n        currentViewportData.renderedCallback = function (element) {\n          //console.log('renderedCallback for ' + element.id);\n          customSettings.forEach(function (customSetting) {\n            log$1.trace(\"ProtocolEngine::currentViewportData.renderedCallback Applying custom setting: \".concat(customSetting.id));\n            log$1.trace(\"ProtocolEngine::currentViewportData.renderedCallback with value: \".concat(customSetting.value));\n            var setting = CustomViewportSettings[customSetting.id];\n            setting.callback(element, customSetting.value);\n          });\n        };\n\n        var currentMatch = details.bestMatch;\n        var currentPosition = 1;\n        var scoresLength = details.matchingScores.length;\n\n        while (currentPosition < scoresLength && viewportData.find(function (a) {\n          return a.imageId === currentMatch.imageId;\n        })) {\n          currentMatch = details.matchingScores[currentPosition];\n          currentPosition++;\n        }\n\n        if (currentMatch && currentMatch.imageId) {\n          currentViewportData.studyInstanceUid = currentMatch.studyInstanceUid;\n          currentViewportData.seriesInstanceUid = currentMatch.seriesInstanceUid;\n          currentViewportData.sopInstanceUid = currentMatch.sopInstanceUid;\n          currentViewportData.currentImageIdIndex = currentMatch.currentImageIdIndex;\n          currentViewportData.displaySetInstanceUid = currentMatch.displaySetInstanceUid;\n          currentViewportData.imageId = currentMatch.imageId;\n        } // @TODO Why should we throw an exception when a best match is not found? This was aborting the whole process.\n        // if (!currentViewportData.displaySetInstanceUid) {\n        //     throw new OHIFError('ProtocolEngine::updateViewports No matching display set found?');\n        // }\n\n\n        viewportData.push(currentViewportData);\n      });\n      this.setLayout(layoutProps.rows, layoutProps.columns);\n\n      if (typeof this.options.setViewportSpecificData !== 'function') {\n        log$1.error('Hanging Protocol Engine setViewportSpecificData callback is not defined');\n        return;\n      } // If viewportIndex is defined, then update only that viewport\n\n\n      if (viewportIndex !== undefined && viewportData[viewportIndex]) {\n        this.options.setViewportSpecificData(viewportIndex, viewportData[viewportIndex]);\n        return;\n      } // Update all viewports\n\n\n      viewportData.forEach(function (viewportSpecificData) {\n        _this3.options.setViewportSpecificData(viewportSpecificData.viewportIndex, viewportSpecificData);\n      });\n    }\n    /**\n     * Sets the current Hanging Protocol to the specified Protocol\n     * An optional argument can also be used to prevent the updating of the Viewports\n     *\n     * @param newProtocol\n     * @param updateViewports\n     */\n\n  }, {\n    key: \"setHangingProtocol\",\n    value: function setHangingProtocol(newProtocol) {\n      var updateViewports = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      log$1.trace('ProtocolEngine::setHangingProtocol newProtocol', newProtocol);\n      log$1.trace(\"ProtocolEngine::setHangingProtocol updateViewports = \".concat(updateViewports)); // Reset the array of newStageIds\n\n      this.newStageIds = [];\n\n      if (Protocol.prototype.isPrototypeOf(newProtocol)) {\n        this.protocol = newProtocol;\n      } else {\n        this.protocol = new Protocol();\n        this.protocol.fromObject(newProtocol);\n      }\n\n      this.stage = 0; // Update viewports by default\n\n      if (updateViewports) {\n        this.updateViewports();\n      }\n    }\n    /**\n     * Check if the next stage is available\n     * @return {Boolean} True if next stage is available or false otherwise\n     */\n\n  }, {\n    key: \"isNextStageAvailable\",\n    value: function isNextStageAvailable() {\n      var numberOfStages = this.getNumProtocolStages();\n      return this.stage + 1 < numberOfStages;\n    }\n    /**\n     * Check if the previous stage is available\n     * @return {Boolean} True if previous stage is available or false otherwise\n     */\n\n  }, {\n    key: \"isPreviousStageAvailable\",\n    value: function isPreviousStageAvailable() {\n      return this.stage - 1 >= 0;\n    }\n    /**\n     * Changes the current stage to a new stage index in the display set sequence.\n     * It checks if the next stage exists.\n     *\n     * @param {Integer} stageAction An integer value specifying wheater next (1) or previous (-1) stage\n     * @return {Boolean} True if new stage has set or false, otherwise\n     */\n\n  }, {\n    key: \"setCurrentProtocolStage\",\n    value: function setCurrentProtocolStage(stageAction) {\n      // Check if previous or next stage is available\n      if (stageAction === -1 && !this.isPreviousStageAvailable()) {\n        return false;\n      } else if (stageAction === 1 && !this.isNextStageAvailable()) {\n        return false;\n      } // Sets the new stage\n\n\n      this.stage += stageAction; // Log the new stage\n\n      log$1.trace(\"ProtocolEngine::setCurrentProtocolStage stage = \".concat(this.stage)); // Since stage has changed, we need to update the viewports\n      // and redo matchings\n\n      this.updateViewports(); // Everything went well\n\n      return true;\n    }\n    /**\n     * Retrieves the number of Stages in the current Protocol or\n     * undefined if no protocol or stages are set\n     */\n\n  }, {\n    key: \"getNumProtocolStages\",\n    value: function getNumProtocolStages() {\n      if (!this.protocol || !this.protocol.stages || !this.protocol.stages.length) {\n        return;\n      }\n\n      return this.protocol.stages.length;\n    }\n    /**\n     * Switches to the next protocol stage in the display set sequence\n     */\n\n  }, {\n    key: \"nextProtocolStage\",\n    value: function nextProtocolStage() {\n      log$1.trace('ProtocolEngine::nextProtocolStage');\n\n      if (!this.setCurrentProtocolStage(1)) {\n        log$1.trace('ProtocolEngine::nextProtocolStage failed');\n      }\n    }\n    /**\n     * Switches to the previous protocol stage in the display set sequence\n     */\n\n  }, {\n    key: \"previousProtocolStage\",\n    value: function previousProtocolStage() {\n      log$1.trace('ProtocolEngine::previousProtocolStage');\n\n      if (!this.setCurrentProtocolStage(-1)) {\n        log$1.trace('ProtocolEngine::previousProtocolStage failed');\n      }\n    }\n  }]);\n  return ProtocolEngine;\n}();\n\nvar hangingProtocols = {\n  ProtocolEngine: ProtocolEngine,\n  ProtocolStore: ProtocolStore,\n  ProtocolStrategy: ProtocolStrategy,\n  addCustomAttribute: addCustomAttribute,\n  addCustomViewportSetting: addCustomViewportSetting\n}; //import Dropdown from './ui/dropdown/class.js';\n\n/*\n * Defines the base OHIF header object\n */\n//const dropdown = new OHIF.ui.Dropdown();\n\nvar header = {};\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar arrayWithoutHoles = _arrayWithoutHoles;\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nvar iterableToArray = _iterableToArray;\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar nonIterableSpread = _nonIterableSpread;\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nvar toConsumableArray = _toConsumableArray;\n\nfunction getLabel(measurement) {\n  if (!measurement) {\n    return;\n  }\n\n  switch (measurement.toolType) {\n    case 'Bidirectional':\n    case 'TargetCR':\n    case 'TargetNE':\n    case 'TargetUN':\n      return \"Target \".concat(measurement.lesionNamingNumber);\n\n    case 'NonTarget':\n      return \"Non-Target \".concat(measurement.lesionNamingNumber);\n  }\n}\n\nfunction getDescription(measurement) {\n  return measurement.description;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar arrayWithHoles = _arrayWithHoles;\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nvar iterableToArrayLimit = _iterableToArrayLimit;\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar nonIterableRest = _nonIterableRest;\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nvar slicedToArray = _slicedToArray;\n\nfunction getImageIdForImagePath(imagePath) {\n  var thumbnail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _imagePath$split = imagePath.split('_'),\n      _imagePath$split2 = slicedToArray(_imagePath$split, 4),\n      studyInstanceUid = _imagePath$split2[0],\n      seriesInstanceUid = _imagePath$split2[1],\n      sopInstanceUid = _imagePath$split2[2],\n      frameIndex = _imagePath$split2[3];\n\n  var studyMetadata = studyMetadataManager.get(studyInstanceUid);\n  var series = studyMetadata.getSeriesByUID(seriesInstanceUid);\n  var instance = series.getInstanceByUID(sopInstanceUid);\n  return instance.getImageId(frameIndex, thumbnail);\n}\n\nvar configuration$1 = {};\n\nvar MeasurementApi =\n/*#__PURE__*/\nfunction () {\n  createClass(MeasurementApi, null, [{\n    key: \"setConfiguration\",\n    value: function setConfiguration(config) {\n      Object.assign(configuration$1, config);\n    }\n  }, {\n    key: \"getConfiguration\",\n    value: function getConfiguration() {\n      return configuration$1;\n    }\n  }, {\n    key: \"getToolsGroupsMap\",\n    value: function getToolsGroupsMap() {\n      var toolsGroupsMap = {};\n      configuration$1.measurementTools.forEach(function (toolGroup) {\n        toolGroup.childTools.forEach(function (tool) {\n          return toolsGroupsMap[tool.id] = toolGroup.id;\n        });\n      });\n      return toolsGroupsMap;\n    }\n  }, {\n    key: \"getToolGroupTools\",\n    value: function getToolGroupTools(toolsGroupsMap) {\n      var result = {};\n      Object.keys(toolsGroupsMap).forEach(function (toolType) {\n        var toolGroupId = toolsGroupsMap[toolType];\n\n        if (!result[toolGroupId]) {\n          result[toolGroupId] = [];\n        }\n\n        result[toolGroupId].push(toolType);\n      });\n      return result;\n    }\n  }, {\n    key: \"getToolConfiguration\",\n    value: function getToolConfiguration(toolType) {\n      var configuration = MeasurementApi.getConfiguration();\n      var toolsGroupsMap = MeasurementApi.getToolsGroupsMap();\n      var toolGroupId = toolsGroupsMap[toolType];\n      var toolGroup = configuration.measurementTools.find(function (toolGroup) {\n        return toolGroup.id === toolGroupId;\n      });\n      var tool;\n\n      if (toolGroup) {\n        tool = toolGroup.childTools.find(function (tool) {\n          return tool.id === toolType;\n        });\n      }\n\n      return {\n        toolGroupId: toolGroupId,\n        toolGroup: toolGroup,\n        tool: tool\n      };\n    }\n  }, {\n    key: \"syncMeasurementAndToolData\",\n    value: function syncMeasurementAndToolData(measurement) {\n      log$1.info('syncMeasurementAndToolData');\n      var measurementLabel = getLabel(measurement);\n\n      if (measurementLabel) {\n        measurement.labels = [measurementLabel];\n      }\n\n      var toolState = cornerstoneTools.globalImageIdSpecificToolStateManager.saveToolState(); // Stop here if the metadata for the measurement's study is not loaded yet\n\n      var studyInstanceUid = measurement.studyInstanceUid;\n      var metadata = studyMetadataManager.get(studyInstanceUid);\n      if (!metadata) return; // Iterate each child tool if the current tool has children\n\n      var toolType = measurement.toolType;\n\n      var _MeasurementApi$getTo = MeasurementApi.getToolConfiguration(toolType),\n          tool = _MeasurementApi$getTo.tool;\n\n      if (Array.isArray(tool.childTools)) {\n        tool.childTools.forEach(function (childToolKey) {\n          var childMeasurement = measurement[childToolKey];\n          if (!childMeasurement) return;\n          childMeasurement._id = measurement._id;\n          childMeasurement.measurementNumber = measurement.measurementNumber;\n          childMeasurement.lesionNamingNumber = measurement.lesionNamingNumber;\n          MeasurementApi.syncMeasurementAndToolData(childMeasurement);\n        });\n        return;\n      }\n\n      var imageId = getImageIdForImagePath(measurement.imagePath); // If no tool state exists for this imageId, create an empty object to store it\n\n      if (!toolState[imageId]) {\n        toolState[imageId] = {};\n      }\n\n      var currentToolState = toolState[imageId][toolType];\n      var toolData = currentToolState && currentToolState.data; // Check if we already have toolData for this imageId and toolType\n\n      if (toolData && toolData.length) {\n        // If we have toolData, we should search it for any data related to the current Measurement\n        var _toolData = toolState[imageId][toolType].data; // Create a flag so we know if we've successfully updated the Measurement in the toolData\n\n        var alreadyExists = false; // Loop through the toolData to search for this Measurement\n\n        _toolData.forEach(function (tool) {\n          // Break the loop if this isn't the Measurement we are looking for\n          if (tool._id !== measurement._id) {\n            return;\n          } // If we have found the Measurement, set the flag to True\n\n\n          alreadyExists = true; // Update the toolData from the Measurement data\n\n          Object.assign(tool, measurement);\n          return false;\n        }); // If we have found the Measurement we intended to update, we can stop this function here\n\n\n        if (alreadyExists === true) {\n          return;\n        }\n      } else {\n        // If no toolData exists for this toolType, create an empty array to hold some\n        toolState[imageId][toolType] = {\n          data: []\n        };\n      } // If we have reached this point, it means we haven't found the Measurement we are looking for\n      // in the current toolData. This means we need to add it.\n      // Add the MeasurementData into the toolData for this imageId\n\n\n      toolState[imageId][toolType].data.push(measurement);\n      cornerstoneTools.globalImageIdSpecificToolStateManager.restoreToolState(toolState);\n    }\n  }, {\n    key: \"isToolIncluded\",\n    value: function isToolIncluded(tool) {\n      return tool.options && tool.options.caseProgress && tool.options.caseProgress.include;\n    }\n  }]);\n\n  function MeasurementApi(timepointApi) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, MeasurementApi);\n\n    if (MeasurementApi.Instance) {\n      MeasurementApi.Instance.initialize(timepointApi, options);\n      return MeasurementApi.Instance;\n    }\n\n    this.initialize(timepointApi, options);\n    MeasurementApi.Instance = this;\n  }\n\n  createClass(MeasurementApi, [{\n    key: \"initialize\",\n    value: function initialize(timepointApi) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.timepointApi = timepointApi;\n      this.options = options;\n      this.toolGroups = {};\n      this.tools = {};\n      this.toolsGroupsMap = MeasurementApi.getToolsGroupsMap();\n      this.toolGroupTools = MeasurementApi.getToolGroupTools(this.toolsGroupsMap); // Iterate over each tool group and create collection\n\n      configuration$1.measurementTools.forEach(function (toolGroup) {\n        _this.toolGroups[toolGroup.id] = []; // Iterate over each tool group child tools (e.g. bidirectional, targetCR, etc.) and create collection\n\n        toolGroup.childTools.forEach(function (tool) {\n          _this.tools[tool.id] = [];\n        });\n      });\n    }\n  }, {\n    key: \"onMeasurementsUpdated\",\n    value: function onMeasurementsUpdated() {\n      if (typeof this.options.onMeasurementsUpdated !== 'function') {\n        log$1.warn('Measurements update callback is not defined');\n        return;\n      }\n\n      this.options.onMeasurementsUpdated(Object.assign({}, this.tools));\n    }\n  }, {\n    key: \"retrieveMeasurements\",\n    value: function retrieveMeasurements(patientId, timepointIds) {\n      var _this2 = this;\n\n      var retrievalFn = configuration$1.dataExchange.retrieve;\n\n      if (typeof retrievalFn !== 'function') {\n        log$1.error('Measurement retrieval function has not been configured.');\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        retrievalFn(patientId, timepointIds).then(function (measurementData) {\n          if (measurementData) {\n            log$1.info('Measurement data retrieval');\n            log$1.info(measurementData);\n            Object.keys(measurementData).forEach(function (measurementTypeId) {\n              var measurements = measurementData[measurementTypeId];\n              measurements.forEach(function (measurement) {\n                var toolType = measurement.toolType;\n\n                _this2.addMeasurement(toolType, measurement);\n              });\n            });\n          }\n\n          resolve(); // Synchronize the new tool data\n\n          _this2.syncMeasurementsAndToolData(); // Let others know that the measurements are updated\n\n\n          _this2.onMeasurementsUpdated();\n        }, reject);\n      });\n    }\n  }, {\n    key: \"storeMeasurements\",\n    value: function storeMeasurements(timepointId) {\n      var _this3 = this;\n\n      var storeFn = configuration$1.dataExchange.store;\n\n      if (typeof storeFn !== 'function') {\n        log$1.error('Measurement store function has not been configured.');\n        return;\n      }\n\n      var measurementData = {};\n      configuration$1.measurementTools.forEach(function (toolGroup) {\n        // Skip the tool groups excluded from case progress\n        if (!MeasurementApi.isToolIncluded(toolGroup)) {\n          return;\n        }\n\n        toolGroup.childTools.forEach(function (tool) {\n          // Skip the tools excluded from case progress\n          if (!MeasurementApi.isToolIncluded(tool)) {\n            return;\n          }\n\n          if (!measurementData[toolGroup.id]) {\n            measurementData[toolGroup.id] = [];\n          }\n\n          measurementData[toolGroup.id] = measurementData[toolGroup.id].concat(_this3.tools[tool.id]);\n        });\n      });\n      var timepointFilter = timepointId ? function (tp) {\n        return tp.timepointId === timepointId;\n      } : null;\n      var timepoints = this.timepointApi.all(timepointFilter);\n      var timepointIds = timepoints.map(function (t) {\n        return t.timepointId;\n      });\n      var patientId = timepoints[0].patientId;\n      var filter = {\n        patientId: patientId,\n        timepointIds: timepointIds\n      };\n      log$1.info('Saving Measurements for timepoints:', timepoints);\n      return storeFn(measurementData, filter).then(function () {\n        log$1.info('Measurement storage completed');\n      });\n    }\n  }, {\n    key: \"calculateLesionNamingNumber\",\n    value: function calculateLesionNamingNumber(measurements) {\n      var sortedMeasurements = measurements.sort(function (a, b) {\n        if (a.lesionNamingNumber > b.lesionNamingNumber) {\n          return 1;\n        } else if (a.lesionNamingNumber < b.lesionNamingNumber) {\n          return -1;\n        }\n\n        return 0;\n      }); //  Calculate lesion naming number starting from 1 not to miss any measurement (as seen in MM)\n      //      A measurement from beginning of the list might be deleted, so a new measurement should replace that\n\n      var i;\n\n      for (i = 1; i < sortedMeasurements.length + 1; i++) {\n        if (i < sortedMeasurements[i - 1].lesionNamingNumber) {\n          break;\n        }\n      }\n\n      return i;\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(toolGroupId, filter) {\n      var _this4 = this;\n\n      if (!this.toolGroups[toolGroupId]) {\n        throw new Error(\"MeasurementApi: No Collection with the id: \".concat(toolGroupId));\n      }\n\n      var items;\n\n      if (filter) {\n        items = this.toolGroups[toolGroupId].filter(filter);\n      } else {\n        items = this.toolGroups[toolGroupId];\n      }\n\n      return items.map(function (item) {\n        if (item.toolId) {\n          return _this4.tools[item.toolId].find(function (tool) {\n            return tool._id === item.toolItemId;\n          });\n        }\n\n        return {\n          lesionNamingNumber: item.lesionNamingNumber\n        };\n      });\n    }\n  }, {\n    key: \"getFirstMeasurement\",\n    value: function getFirstMeasurement(timepointId) {\n      var _this5 = this; // Get child tools from all included tool groups\n\n\n      var childTools = [];\n      configuration$1.measurementTools.forEach(function (toolGroup) {\n        // Skip the tool groups excluded from case progress\n        if (!MeasurementApi.isToolIncluded(toolGroup)) {\n          return false;\n        }\n\n        childTools = childTools.concat(toolGroup.childTools);\n      }); // Get all included child tools\n\n      var includedChildTools = childTools.filter(function (tool) {\n        return MeasurementApi.isToolIncluded(tool);\n      }); // Get the first measurement for the given timepoint\n\n      var measurement = undefined;\n      includedChildTools.every(function (tool) {\n        measurement = _this5.tools[tool.id].find(function (t) {\n          return t.timepointId === timepointId && t.measurementNumber === 1;\n        });\n        return !measurement;\n      }); // Return the found measurement object or undefined if not found\n\n      return measurement;\n    }\n  }, {\n    key: \"lesionExistsAtTimepoints\",\n    value: function lesionExistsAtTimepoints(lesionNamingNumber, toolGroupId, timepointIds) {\n      // Retrieve all the data for the given tool group (e.g. 'targets')\n      var measurementsAtTimepoint = this.fetch(toolGroupId, function (tool) {\n        return timepointIds.includes(tool.timepointId);\n      }); // Return whether or not any lesion at this timepoint has the same lesionNamingNumber\n\n      return !!measurementsAtTimepoint.find(function (m) {\n        return m.lesionNamingNumber === lesionNamingNumber;\n      });\n    }\n  }, {\n    key: \"isNewLesionsMeasurement\",\n    value: function isNewLesionsMeasurement(measurementData) {\n      if (!measurementData) {\n        return;\n      }\n\n      var toolConfig = MeasurementApi.getToolConfiguration(measurementData.toolType);\n      var toolType = toolConfig.tool.parentTool || measurementData.toolType;\n      var timepointApi = this.timepointApi;\n      var currentMeasurement = this.tools[toolType].find(function (tool) {\n        return tool._id === measurementData._id;\n      }) || {};\n      var timepointId = currentMeasurement.timepointId || measurementData.timepointId;\n      var lesionNamingNumber = currentMeasurement.lesionNamingNumber || measurementData.lesionNamingNumber; // Stop here if the needed information is not set\n\n      if (!timepointApi || !timepointId || !toolConfig) {\n        return;\n      }\n\n      var toolGroupId = toolConfig.toolGroupId;\n      var current = timepointApi.timepoints.find(function (tp) {\n        return tp.timepointId === timepointId;\n      });\n      var initialTimepointIds = timepointApi.initialTimepointIds(); // Stop here if there's no initial timepoint, or if the current is any initial\n\n      if (!initialTimepointIds || initialTimepointIds.length < 1 || initialTimepointIds.some(function (initialtpid) {\n        return initialtpid === current.timepointId;\n      })) {\n        return false;\n      }\n\n      return this.lesionExistsAtTimepoints(lesionNamingNumber, toolGroupId, initialTimepointIds) === false;\n    }\n  }, {\n    key: \"calculateLesionMaxMeasurementNumber\",\n    value: function calculateLesionMaxMeasurementNumber(groupId, filter) {\n      var _this6 = this;\n\n      var measurements = [];\n\n      if (groupId) {\n        // Get the measurements of the group\n        measurements = this.toolGroups[groupId] || [];\n      } else {\n        // Get all measurements of all groups\n        measurements = Object.keys(this.toolGroups).reduce(function (acc, val) {\n          acc.push.apply(acc, toConsumableArray(_this6.toolGroups[val]));\n          return acc;\n        }, []);\n      }\n\n      var sortedMeasurements = measurements.filter(filter).sort(function (tp1, tp2) {\n        return tp1.measurementNumber < tp2.measurementNumber ? 1 : -1;\n      });\n\n      var _loop = function _loop(i) {\n        var toolGroupMeasurement = sortedMeasurements[i];\n\n        var measurement = _this6.tools[toolGroupMeasurement.toolId].find(function (tool) {\n          return tool._id === toolGroupMeasurement.toolItemId;\n        });\n\n        var isNew = _this6.isNewLesionsMeasurement(measurement);\n\n        if (!isNew) {\n          return {\n            v: measurement.measurementNumber\n          };\n        }\n      };\n\n      for (var i = 0; i < sortedMeasurements.length; i++) {\n        var _ret = _loop(i);\n\n        if (_typeof_1(_ret) === \"object\") return _ret.v;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"calculateNewLesionMaxMeasurementNumber\",\n    value: function calculateNewLesionMaxMeasurementNumber(groupId, filter) {\n      var _this7 = this;\n\n      var sortedMeasurements = this.toolGroups[groupId].filter(filter).sort(function (tp1, tp2) {\n        return tp1.measurementNumber < tp2.measurementNumber ? 1 : -1;\n      });\n\n      var _loop2 = function _loop2(i) {\n        var toolGroupMeasurement = sortedMeasurements[i];\n\n        var measurement = _this7.tools[toolGroupMeasurement.toolId].find(function (tool) {\n          return tool._id === toolGroupMeasurement.toolItemId;\n        });\n\n        var isNew = _this7.isNewLesionsMeasurement(measurement);\n\n        if (isNew) {\n          return {\n            v: measurement.measurementNumber\n          };\n        }\n      };\n\n      for (var i = 0; i < sortedMeasurements.length; i++) {\n        var _ret2 = _loop2(i);\n\n        if (_typeof_1(_ret2) === \"object\") return _ret2.v;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"calculateMeasurementNumber\",\n    value: function calculateMeasurementNumber(measurement) {\n      var toolGroupId = this.toolsGroupsMap[measurement.toolType];\n\n      var filter = function filter(tool) {\n        return tool._id !== measurement._id;\n      };\n\n      var isNew = this.isNewLesionsMeasurement(measurement);\n\n      if (isNew) {\n        var maxTargetMeasurementNumber = this.calculateLesionMaxMeasurementNumber('targets', filter);\n        var maxNonTargetMeasurementNumber = this.calculateLesionMaxMeasurementNumber('nonTargets', filter);\n        var maxNewTargetMeasurementNumber = this.calculateNewLesionMaxMeasurementNumber('targets', filter);\n\n        if (toolGroupId === 'targets') {\n          return Math.max(maxTargetMeasurementNumber, maxNonTargetMeasurementNumber, maxNewTargetMeasurementNumber);\n        } else if (toolGroupId === 'nonTargets') {\n          var maxNewNonTargetMeasurementNumber = this.calculateNewLesionMaxMeasurementNumber('nonTargets', filter);\n          return Math.max(maxTargetMeasurementNumber, maxNonTargetMeasurementNumber, maxNewTargetMeasurementNumber, maxNewNonTargetMeasurementNumber);\n        }\n      } else {\n        var _maxTargetMeasurementNumber = this.calculateLesionMaxMeasurementNumber('targets', filter);\n\n        if (toolGroupId === 'targets') {\n          return _maxTargetMeasurementNumber;\n        } else if (toolGroupId === 'nonTargets') {\n          var _maxNonTargetMeasurementNumber = this.calculateLesionMaxMeasurementNumber('nonTargets', filter);\n\n          return Math.max(_maxTargetMeasurementNumber, _maxNonTargetMeasurementNumber);\n        } else {\n          return this.calculateLesionMaxMeasurementNumber(null, filter);\n        }\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getPreviousMeasurement\",\n    value: function getPreviousMeasurement(measurementData) {\n      if (!measurementData) {\n        return;\n      }\n\n      var timepointId = measurementData.timepointId,\n          toolType = measurementData.toolType,\n          lesionNamingNumber = measurementData.lesionNamingNumber;\n\n      if (!timepointId || !toolType || !lesionNamingNumber) {\n        return;\n      }\n\n      var toolGroupId = this.toolsGroupsMap[measurementData.toolType]; // TODO: Remove TrialPatientLocationUid from here and override it somehow\n      // by dependant applications. Here we should use the location attribute instead of the uid\n\n      var filter;\n      var uid = measurementData.additionalData && measurementData.additionalData.TrialPatientLocationUid;\n\n      if (uid) {\n        filter = function filter(tool) {\n          return tool._id !== measurementData._id && tool.additionalData && tool.additionalData.TrialPatientLocationUid === uid;\n        };\n      } else {\n        filter = function filter(tool) {\n          return tool._id !== measurementData._id && tool.lesionNamingNumber === lesionNamingNumber;\n        };\n      }\n\n      var childToolTypes = this.toolGroupTools[toolGroupId];\n\n      for (var i = 0; i < childToolTypes.length; i++) {\n        var childToolType = childToolTypes[i];\n        var toolCollection = this.tools[childToolType];\n        var item = toolCollection.find(filter);\n\n        if (item) {\n          return item;\n        }\n      }\n    }\n  }, {\n    key: \"hasDuplicateMeasurementNumber\",\n    value: function hasDuplicateMeasurementNumber(measurementData) {\n      var _this8 = this;\n\n      if (!measurementData) {\n        return;\n      }\n\n      var toolType = measurementData.toolType,\n          measurementNumber = measurementData.measurementNumber;\n\n      if (!toolType || !measurementNumber) {\n        return;\n      }\n\n      var filter = function filter(tool) {\n        return tool._id !== measurementData._id && tool.measurementNumber === measurementData.measurementNumber;\n      };\n\n      return configuration$1.measurementTools.filter(function (toolGroup) {\n        return toolGroup.id !== 'temp';\n      }).some(function (toolGroup) {\n        if (_this8.toolGroups[toolGroup.id].find(filter)) {\n          return true;\n        }\n\n        return toolGroup.childTools.some(function (tool) {\n          if (_this8.tools[tool.id].find(filter)) {\n            return true;\n          }\n        });\n      });\n    }\n  }, {\n    key: \"updateNumbering\",\n    value: function updateNumbering(collectionToUpdate, propertyFilter, propertyName, increment) {\n      collectionToUpdate.filter(propertyFilter).forEach(function (item) {\n        item[propertyName] += increment;\n      });\n    }\n  }, {\n    key: \"updateMeasurementNumberForAllMeasurements\",\n    value: function updateMeasurementNumberForAllMeasurements(measurement, increment) {\n      var _this9 = this;\n\n      var filter = function filter(tool) {\n        return tool._id !== measurement._id && tool.measurementNumber >= measurement.measurementNumber;\n      };\n\n      configuration$1.measurementTools.filter(function (toolGroup) {\n        return toolGroup.id !== 'temp';\n      }).forEach(function (toolGroup) {\n        _this9.updateNumbering(_this9.toolGroups[toolGroup.id], filter, 'measurementNumber', increment);\n\n        toolGroup.childTools.forEach(function (tool) {\n          _this9.updateNumbering(_this9.tools[tool.id], filter, 'measurementNumber', increment);\n        });\n      });\n    }\n  }, {\n    key: \"addMeasurement\",\n    value: function addMeasurement(toolType, measurement) {\n      var toolGroup = this.toolsGroupsMap[toolType];\n      var groupCollection = this.toolGroups[toolGroup];\n      var collection = this.tools[toolType]; // Get the related measurement by the measurement number and use its location if defined\n\n      var relatedMeasurement = collection.find(function (t) {\n        return t.lesionNamingNumber === measurement.lesionNamingNumber && t.toolType === measurement.toolType;\n      }); // Use the related measurement location if found and defined\n\n      if (relatedMeasurement && relatedMeasurement.location) {\n        measurement.location = relatedMeasurement.location;\n      } // Use the related measurement description if found and defined\n\n\n      if (relatedMeasurement && relatedMeasurement.description) {\n        measurement.description = relatedMeasurement.description;\n      }\n\n      measurement._id = guid(); // Get the timepoint\n\n      var timepoint;\n\n      if (measurement.studyInstanceUid) {\n        timepoint = this.timepointApi.study(measurement.studyInstanceUid)[0];\n      } else {\n        var timepointId = measurement.timepointId;\n        timepoint = this.timepointApi.timepoints.find(function (t) {\n          return t.timepointId === timepointId;\n        });\n      } // Preventing errors thrown when non-associated (standalone) study is opened...\n      // @TODO: Make sure this logic is correct.\n\n\n      if (!timepoint) return; // Empty Item is the lesion just added in cornerstoneTools, but does not have measurement data yet\n\n      var emptyItem = groupCollection.find(function (groupTool) {\n        return !groupTool.toolId && groupTool.timepointId === timepoint.timepointId;\n      }); // Set the timepointId attribute to measurement to make it easier to filter measurements by timepoint\n\n      measurement.timepointId = timepoint.timepointId; // Check if the measurement data is just added by a cornerstone tool and is still empty\n\n      if (emptyItem) {\n        // Set relevant initial data and measurement number to the measurement\n        measurement.lesionNamingNumber = emptyItem.lesionNamingNumber;\n        measurement.measurementNumber = emptyItem.measurementNumber;\n        groupCollection.filter(function (groupTool) {\n          return groupTool.timepointId === timepoint.timepointId && groupTool.lesionNamingNumber === measurement.lesionNamingNumber;\n        }).forEach(function (groupTool) {\n          groupTool.toolId = tool.id;\n          groupTool.toolItemId = measurement._id;\n          groupTool.createdAt = measurement.createdAt;\n          groupTool.measurementNumber = measurement.measurementNumber;\n        });\n      } else {\n        // Handle measurements not added by cornerstone tools and update its number\n        var measurementsInTimepoint = groupCollection.filter(function (groupTool) {\n          return groupTool.timepointId === timepoint.timepointId;\n        });\n        measurement.lesionNamingNumber = this.calculateLesionNamingNumber(measurementsInTimepoint);\n        measurement.measurementNumber = measurement.measurementNumber || this.calculateMeasurementNumber(measurement) + 1;\n      } // Define an update object to reflect the changes in the collection\n\n\n      var updateObject = {\n        timepointId: timepoint.timepointId,\n        lesionNamingNumber: measurement.lesionNamingNumber,\n        measurementNumber: measurement.measurementNumber\n      }; // Find the matched measurement from other timepoints\n\n      var found = this.getPreviousMeasurement(measurement); // Check if a previous related meausurement was found on other timepoints\n\n      if (found) {\n        // Use the same number as the previous measurement\n        measurement.lesionNamingNumber = found.lesionNamingNumber;\n        measurement.measurementNumber = found.measurementNumber; // TODO: Remove TrialPatientLocationUid from here and override it somehow\n        // by dependant applications\n        // Change the update object to set the same number, additionalData,\n        // location, label and description to the current measurement\n\n        updateObject.lesionNamingNumber = found.lesionNamingNumber;\n        updateObject.measurementNumber = found.measurementNumber;\n        updateObject.additionalData = measurement.additionalData || {};\n        updateObject.additionalData.TrialPatientLocationUid = found.additionalData && found.additionalData.TrialPatientLocationUid;\n        updateObject.location = found.location;\n        updateObject.label = found.label;\n        updateObject.description = found.description;\n        updateObject.isSplitLesion = found.isSplitLesion;\n        updateObject.isNodal = found.isNodal;\n        var description = getDescription(found, measurement);\n\n        if (description) {\n          updateObject.description = description;\n        }\n      } else if (this.hasDuplicateMeasurementNumber(measurement)) {\n        // Update measurementNumber for the measurements with masurementNumber greater or equal than\n        //  measurementNumber of the added measurement (except the added one)\n        //   only if there is another measurement with the same measurementNumber\n        this.updateMeasurementNumberForAllMeasurements(measurement, 1);\n      }\n\n      var addedMeasurement; // Upsert the measurement in collection\n\n      var toolIndex = collection.findIndex(function (tool) {\n        return tool._id === measurement._id;\n      });\n\n      if (toolIndex > -1) {\n        addedMeasurement = Object.assign({}, collection[toolIndex], updateObject);\n        collection[toolIndex] = addedMeasurement;\n      } else {\n        addedMeasurement = Object.assign({}, measurement, updateObject);\n        collection.push(addedMeasurement);\n      }\n\n      if (!emptyItem) {\n        // Reflect the entry in the tool group collection\n        groupCollection.push({\n          toolId: toolType,\n          toolItemId: addedMeasurement._id,\n          timepointId: timepoint.timepointId,\n          studyInstanceUid: addedMeasurement.studyInstanceUid,\n          createdAt: addedMeasurement.createdAt,\n          lesionNamingNumber: addedMeasurement.lesionNamingNumber,\n          measurementNumber: addedMeasurement.measurementNumber\n        });\n      } // Let others know that the measurements are updated\n\n\n      this.onMeasurementsUpdated(); // TODO: Enable reactivity\n      // this.timepointChanged.set(timepoint.timepointId);\n\n      return addedMeasurement;\n    }\n  }, {\n    key: \"updateMeasurement\",\n    value: function updateMeasurement(toolType, measurement) {\n      var collection = this.tools[toolType];\n      var toolIndex = collection.findIndex(function (tool) {\n        return tool._id === measurement._id;\n      });\n\n      if (toolIndex < 0) {\n        return;\n      }\n\n      collection[toolIndex] = Object.assign({}, measurement); // Let others know that the measurements are updated\n\n      this.onMeasurementsUpdated(); // TODO: Enable reactivity\n      // this.timepointChanged.set(timepoint.timepointId);\n    }\n  }, {\n    key: \"onMeasurementRemoved\",\n    value: function onMeasurementRemoved(toolType, measurement) {\n      var _this10 = this;\n\n      var lesionNamingNumber = measurement.lesionNamingNumber,\n          measurementNumber = measurement.measurementNumber;\n      var toolGroupId = this.toolsGroupsMap[toolType];\n      var groupCollection = this.toolGroups[toolGroupId];\n      var groupIndex = groupCollection.findIndex(function (group) {\n        return group.toolItemId === measurement._id;\n      });\n\n      if (groupIndex < 0) {\n        return;\n      } //  Remove the deleted measurement only in its timepoint from the collection\n\n\n      groupCollection.splice(groupIndex, 1); //  Check which timepoints have the deleted measurement\n\n      var timepointsWithDeletedMeasurement = groupCollection.filter(function (tool) {\n        return tool.measurementNumber === measurementNumber;\n      }).map(function (tool) {\n        return tool.timepointId;\n      }); //  Update lesionNamingNumber and measurementNumber only if there is no timepoint with that measurement\n\n      if (timepointsWithDeletedMeasurement.length < 1) {\n        //  Decrease lesionNamingNumber of all measurements with lesionNamingNumber greater than lesionNamingNumber of the deleted measurement by 1\n        var lesionNamingNumberFilter = function lesionNamingNumberFilter(tool) {\n          return tool.lesionNamingNumber >= lesionNamingNumber;\n        };\n\n        this.updateNumbering(groupCollection, lesionNamingNumberFilter, 'lesionNamingNumber', -1);\n        var toolGroup = configuration$1.measurementTools.find(function (tGroup) {\n          return tGroup.id === toolGroupId;\n        });\n\n        if (toolGroup && toolGroup.childTools) {\n          toolGroup.childTools.forEach(function (childTool) {\n            var collection = _this10.tools[childTool.id];\n\n            _this10.updateNumbering(collection, lesionNamingNumberFilter, 'lesionNamingNumber', -1);\n          });\n        } //  Decrease measurementNumber of all measurements with measurementNumber greater than measurementNumber of the deleted measurement by 1\n\n\n        this.updateMeasurementNumberForAllMeasurements(measurement, -1);\n      } // Synchronize the new tool data\n\n\n      this.syncMeasurementsAndToolData(); // Let others know that the measurements are updated\n\n      this.onMeasurementsUpdated(); // TODO: Enable reactivity\n      // this.timepointChanged.set(timepoint.timepointId);\n    }\n  }, {\n    key: \"syncMeasurementsAndToolData\",\n    value: function syncMeasurementsAndToolData() {\n      var _this11 = this;\n\n      configuration$1.measurementTools.forEach(function (toolGroup) {\n        // Skip the tool groups excluded from case progress\n        if (!MeasurementApi.isToolIncluded(toolGroup)) {\n          return;\n        }\n\n        toolGroup.childTools.forEach(function (tool) {\n          // Skip the tools excluded from case progress\n          if (!MeasurementApi.isToolIncluded(tool)) {\n            return;\n          }\n\n          var measurements = _this11.tools[tool.id];\n          measurements.forEach(function (measurement) {\n            MeasurementApi.syncMeasurementAndToolData(measurement);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"deleteMeasurements\",\n    value: function deleteMeasurements(toolType, measurementTypeId, filter) {\n      var _this12 = this;\n\n      var filterKeys = Object.keys(filter);\n      var groupCollection = this.toolGroups[measurementTypeId]; // Stop here if it is a temporary toolGroups\n\n      if (!groupCollection) return; // Get the entries information before removing them\n\n      var groupItems = groupCollection.filter(function (toolGroup) {\n        return filterKeys.every(function (filterKey) {\n          return toolGroup[filterKey] === filter[filterKey];\n        });\n      });\n      var entries = [];\n      groupItems.forEach(function (groupItem) {\n        if (!groupItem.toolId) {\n          return;\n        }\n\n        var collection = _this12.tools[groupItem.toolId];\n        var toolIndex = collection.findIndex(function (tool) {\n          return tool._id === groupItem.toolItemId;\n        });\n\n        if (toolIndex > -1) {\n          entries.push(collection[toolIndex]);\n          collection.splice(toolIndex, 1);\n        }\n      }); // Stop here if no entries were found\n\n      if (!entries.length) {\n        return;\n      } // If the filter doesn't have the measurement number, get it from the first entry\n\n\n      var lesionNamingNumber = filter.lesionNamingNumber || entries[0].lesionNamingNumber; // Synchronize the new data with cornerstone tools\n\n      var toolState = cornerstoneTools.globalImageIdSpecificToolStateManager.saveToolState();\n      entries.forEach(function (entry) {\n        var measurementsData = [];\n\n        var _MeasurementApi$getTo2 = MeasurementApi.getToolConfiguration(entry.toolType),\n            tool = _MeasurementApi$getTo2.tool;\n\n        if (Array.isArray(tool.childTools)) {\n          tool.childTools.forEach(function (key) {\n            var childMeasurement = entry[key];\n            if (!childMeasurement) return;\n            measurementsData.push(childMeasurement);\n          });\n        } else {\n          measurementsData.push(entry);\n        }\n\n        measurementsData.forEach(function (measurementData) {\n          var imagePath = measurementData.imagePath,\n              toolType = measurementData.toolType;\n          var imageId = getImageIdForImagePath(imagePath);\n\n          if (imageId && toolState[imageId]) {\n            var toolData = toolState[imageId][toolType];\n            var measurementEntries = toolData && toolData.data;\n            var measurementEntry = measurementEntries.find(function (mEntry) {\n              return mEntry._id === entry._id;\n            });\n\n            if (measurementEntry) {\n              var index = measurementEntries.indexOf(measurementEntry);\n              measurementEntries.splice(index, 1);\n            }\n          }\n        });\n\n        _this12.onMeasurementRemoved(toolType, entry);\n      });\n      cornerstoneTools.globalImageIdSpecificToolStateManager.restoreToolState(toolState); // Synchronize the updated measurements with Cornerstone Tools\n      // toolData to make sure the displayed measurements show 'Target X' correctly\n\n      var syncFilter = Object.assign({}, filter);\n      delete syncFilter.timepointId;\n      delete syncFilter.lesionNamingNumber;\n      var syncFilterKeys = Object.keys(syncFilter);\n      var toolTypes = toConsumableArray(new Set(entries.map(function (entry) {\n        return entry.toolType;\n      })));\n      toolTypes.forEach(function (toolType) {\n        var collection = _this12.tools[toolType];\n        collection.filter(function (tool) {\n          return tool.lesionNamingNumber > lesionNamingNumber - 1 && syncFilterKeys.every(function (syncFilterKey) {\n            return tool[syncFilterKey] === filter[syncFilterKey];\n          });\n        }).forEach(function (measurement) {\n          MeasurementApi.syncMeasurementAndToolData(measurement);\n        });\n      });\n    }\n  }]);\n  return MeasurementApi;\n}();\n\ndefineProperty(MeasurementApi, \"Instance\", void 0);\nvar configuration$2 = {};\nvar TIMEPOINT_TYPE_NAMES = {\n  prebaseline: 'Pre-Baseline',\n  baseline: 'Baseline',\n  followup: 'Follow-up'\n};\n\nvar TimepointApi =\n/*#__PURE__*/\nfunction () {\n  createClass(TimepointApi, null, [{\n    key: \"setConfiguration\",\n    value: function setConfiguration(config) {\n      Object.assign(configuration$2, config);\n    }\n  }, {\n    key: \"getConfiguration\",\n    value: function getConfiguration() {\n      return configuration$2;\n    }\n  }]);\n\n  function TimepointApi(currentTimepointId) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, TimepointApi);\n\n    if (TimepointApi.Instance) {\n      TimepointApi.Instance.initialize(currentTimepointId, options);\n      return TimepointApi.Instance;\n    }\n\n    this.initialize(currentTimepointId, options);\n    TimepointApi.Instance = this;\n  }\n\n  createClass(TimepointApi, [{\n    key: \"initialize\",\n    value: function initialize(currentTimepointId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.currentTimepointId = currentTimepointId;\n      this.comparisonTimepointKey = options.comparisonTimepointKey || 'baseline';\n      this.options = options;\n      this.timepoints = [];\n    }\n  }, {\n    key: \"onTimepointsUpdated\",\n    value: function onTimepointsUpdated() {\n      if (typeof this.options.onTimepointsUpdated !== 'function') {\n        log$1.warn('Timepoints update callback is not defined');\n        return;\n      }\n\n      this.options.onTimepointsUpdated(Object.assign([], this.timepoints));\n    }\n  }, {\n    key: \"calculateVisitNumber\",\n    value: function calculateVisitNumber(timepoint) {\n      // Retrieve all of the relevant follow-up timepoints for this patient\n      var sortedTimepoints = this.timepoints.sort(function (tp1, tp2) {\n        return tp1.visitDate > tp2.visitDate ? 1 : -1;\n      });\n      var filteredTimepoints = sortedTimepoints.find(function (tp) {\n        return tp.patientId === timepoint.patientId && tp.timepointType === timepoint.timepointType;\n      }); // Create an array of just timepointIds, so we can use indexOf\n      // on it to find the current timepoint's relative position\n\n      var timepointIds = filteredTimepoints.map(function (timepoint) {\n        return timepoint.timepointId;\n      }); // Calculate the index of the current timepoint in the array of all\n      // relevant follow-up timepoints\n\n      var visitNumber = timepointIds.indexOf(timepoint.timepointId) + 1; // If visitNumber is 0, it means that the current timepoint was not in the list\n\n      if (!visitNumber) {\n        throw new Error('Current timepoint was not in the list of relevant timepoints?');\n      }\n\n      return visitNumber;\n    }\n  }, {\n    key: \"retrieveTimepoints\",\n    value: function retrieveTimepoints(filter) {\n      var _this = this;\n\n      var retrievalFn = configuration$2.dataExchange.retrieve;\n\n      if (typeof retrievalFn !== 'function') {\n        log$1.error('Timepoint retrieval function has not been configured.');\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        retrievalFn(filter).then(function (timepointData) {\n          log$1.info('Timepoint data retrieval');\n          timepointData.forEach(function (timepoint) {\n            var timepointIndex = _this.timepoints.findIndex(function (tp) {\n              return tp.timepointId === timepoint.timepointId;\n            });\n\n            if (timepointIndex < 0) {\n              _this.timepoints.push(timepoint);\n            } else {\n              _this.timepoints[timepointIndex] = timepoint;\n            }\n          }); // Let others know that the timepoints are updated\n\n          _this.onTimepointsUpdated();\n\n          resolve();\n        }).catch(function (reason) {\n          log$1.error(\"Timepoint retrieval function failed: \".concat(reason));\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"storeTimepoints\",\n    value: function storeTimepoints() {\n      var storeFn = configuration$2.dataExchange.store;\n\n      if (typeof storeFn !== 'function') {\n        log$1.error('Timepoint store function has not been configured.');\n        return;\n      }\n\n      log$1.info('Preparing to store timepoints');\n      log$1.info(JSON.stringify(this.timepoints, null, 2));\n      storeFn(this.timepoints).then(function () {\n        return log$1.info('Timepoint storage completed');\n      });\n    }\n  }, {\n    key: \"disassociateStudy\",\n    value: function disassociateStudy(timepointIds, studyInstanceUid) {\n      var _this2 = this;\n\n      var disassociateFn = configuration$2.dataExchange.disassociate;\n\n      if (typeof disassociateFn !== 'function') {\n        log$1.error('Study disassociate function has not been configured.');\n        return;\n      }\n\n      disassociateFn(timepointIds, studyInstanceUid).then(function () {\n        log$1.info('Disassociation completed');\n        _this2.timepoints = [];\n\n        _this2.retrieveTimepoints({});\n      });\n    }\n  }, {\n    key: \"removeTimepoint\",\n    value: function removeTimepoint(timepointId) {\n      var _this3 = this;\n\n      var removeFn = configuration$2.dataExchange.remove;\n\n      if (typeof removeFn !== 'function') {\n        log$1.error('Timepoint remove function has not been configured.');\n        return;\n      }\n\n      var timepointData = {\n        timepointId: timepointId\n      };\n      log$1.info('Preparing to remove timepoint');\n      log$1.info(JSON.stringify(timepointData, null, 2));\n      removeFn(timepointData).then(function () {\n        log$1.info('Timepoint removal completed');\n\n        var tpIndex = _this3.timepoints.findIndex(function (tp) {\n          return tp.timepointId === timepointId;\n        });\n\n        if (tpIndex > -1) {\n          _this3.timepoints.splice(tpIndex, 1);\n        } // Let others know that the timepoints are updated\n\n\n        _this3.onTimepointsUpdated();\n      });\n    }\n  }, {\n    key: \"updateTimepoint\",\n    value: function updateTimepoint(timepointId, query) {\n      var _this4 = this;\n\n      var updateFn = configuration$2.dataExchange.update;\n\n      if (typeof updateFn !== 'function') {\n        log$1.error('Timepoint update function has not been configured.');\n        return;\n      }\n\n      var timepointData = {\n        timepointId: timepointId\n      };\n      log$1.info('Preparing to update timepoint');\n      log$1.info(JSON.stringify(timepointData, null, 2));\n      log$1.info(JSON.stringify(query, null, 2));\n      updateFn(timepointData, query).then(function () {\n        log$1.info('Timepoint updated completed');\n\n        var tpIndex = _this4.timepoints.findIndex(function (tp) {\n          return tp.timepointId === timepointId;\n        });\n\n        if (tpIndex > -1) {\n          _this4.timepoints[tpIndex] = Object.assign({}, _this4.timepoints[tpIndex], query);\n        } // Let others know that the timepoints are updated\n\n\n        _this4.onTimepointsUpdated();\n      });\n    } // Return all timepoints\n\n  }, {\n    key: \"all\",\n    value: function all(filter) {\n      var timepointsToReturn;\n\n      if (filter) {\n        timepointsToReturn = this.timepoints.filter(filter);\n      } else {\n        timepointsToReturn = this.timepoints;\n      }\n\n      return timepointsToReturn.sort(function (tp1, tp2) {\n        return tp1.visitDate < tp2.visitDate ? 1 : -1;\n      });\n    } // Return only the current timepoint\n\n  }, {\n    key: \"current\",\n    value: function current() {\n      var _this5 = this;\n\n      return this.timepoints.find(function (tp) {\n        return tp.timepointId === _this5.currentTimepointId;\n      });\n    }\n  }, {\n    key: \"lock\",\n    value: function lock() {\n      var _this6 = this;\n\n      var tpIndex = this.timepoints.findIndex(function (tp) {\n        return tp.timepointId === _this6.currentTimepointId;\n      });\n\n      if (tpIndex < 0) {\n        return;\n      }\n\n      this.timepoints[tpIndex] = Object.assign({}, this.timepoints[tpIndex], {\n        locked: true\n      });\n    } // Return the prior timepoint\n\n  }, {\n    key: \"prior\",\n    value: function prior() {\n      var current = this.current();\n\n      if (!current) {\n        return;\n      }\n\n      return this.all().find(function (tp) {\n        return tp.visitDate < current.visitDate;\n      });\n    } // Return only the current and prior timepoints\n\n  }, {\n    key: \"currentAndPrior\",\n    value: function currentAndPrior() {\n      var timepoints = [];\n      var current = this.current();\n\n      if (current) {\n        timepoints.push(current);\n      }\n\n      var prior = this.prior();\n\n      if (current && prior && prior.timepointId !== current.timepointId) {\n        timepoints.push(prior);\n      }\n\n      return timepoints;\n    } // Return the current and the comparison timepoints\n\n  }, {\n    key: \"currentAndComparison\",\n    value: function currentAndComparison() {\n      var comparisonTimepointKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.comparisonTimepointKey;\n      var current = this.current();\n      var comparisonTimepoint = this.comparison(comparisonTimepointKey);\n      var timepoints = [current];\n\n      if (comparisonTimepoint && !timepoints.find(function (tp) {\n        return tp.timepointId === comparisonTimepoint.timepointId;\n      })) {\n        timepoints.push(comparisonTimepoint);\n      }\n\n      return timepoints;\n    }\n    /**\n     * Return true if there are 2 or more baseline timepoints before and at the current timepoint, otherwise false\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isRebaseline\",\n    value: function isRebaseline(timepointId) {\n      var current = timepointId ? this.timepoints.find(function (tp) {\n        return tp.timepointId === timepointId;\n      }) : this.current();\n\n      if (!current) {\n        return false;\n      }\n\n      var baselines = this.timepoints.filter(function (tp) {\n        return tp.timepointType === 'baseline' && tp.visitDate <= current.visitDate;\n      });\n      return baselines.length > 1;\n    }\n    /**\n     * Return the next (closest future) baseline after current timepoint\n     * @returns {*}\n     */\n\n  }, {\n    key: \"nextBaselineAfterCurrent\",\n    value: function nextBaselineAfterCurrent() {\n      var current = this.current(); //  Get all next timepoints newer than the current timepoint sorted by visitDate ascending\n\n      var sortedTimepoints = this.timepoints.sort(function (tp1, tp2) {\n        return tp1.visitDate > tp2.visitDate ? 1 : -1;\n      });\n      return sortedTimepoints.find(function (tp) {\n        return tp.visitDate > current.visitDate && tp.timepointType === 'baseline';\n      });\n    }\n    /**\n     * Set the current timepoint id\n     * @param timepointId\n     */\n\n  }, {\n    key: \"setCurrentTimepointId\",\n    value: function setCurrentTimepointId(timepointId) {\n      this.currentTimepointId = timepointId;\n    }\n    /**\n     * Set the comparison timepoint that overrides the default comparison timepoint (called based on user selection in a viewport)\n     * @param timepoint\n     */\n\n  }, {\n    key: \"setUserComparison\",\n    value: function setUserComparison(timepoint) {\n      this.userComparison = timepoint;\n    }\n    /**\n     * Return only the comparison timepoint\n     * @param {String} [comparisonTimepointKey]\n     * @return {*}\n     */\n\n  }, {\n    key: \"comparison\",\n    value: function comparison() {\n      var comparisonTimepointKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.comparisonTimepointKey; // Return the comparison timepoint set by user if exists\n\n      if (this.userComparison) {\n        return this.userComparison;\n      }\n\n      var current = this.current();\n\n      if (!current) {\n        return;\n      } // If current timepoint is prebaseline, the first (closest future) BL after current is comparison regardless of default comparison timepoint\n\n\n      if (current.timepointType === 'prebaseline') {\n        var nextBaselineAfterCurrent = this.nextBaselineAfterCurrent(); // If there is a next baseline, make it comparison, otherwise comparison is done by default comparison timepoint\n\n        if (nextBaselineAfterCurrent) {\n          return nextBaselineAfterCurrent;\n        }\n      } // If current timepoint is baseline, the prior is comparison if exists regardless of default comparison timepoint\n\n\n      if (current.timepointType === 'baseline') {\n        var prior = this.prior();\n\n        if (prior) {\n          return prior;\n        }\n      }\n\n      var comparison = this[comparisonTimepointKey](); // Do not return a comparison if it would be identical to\n      // the current.\n\n      if (comparison && comparison.timepointId === current.timepointId) {\n        return;\n      }\n\n      return comparison;\n    }\n    /**\n     * Return the latest initial (prebaseline or baseline) timepoint after current and before the next followup timepoint\n     * @returns {*}\n     */\n\n  }, {\n    key: \"latestInitialTimepointAfterCurrent\",\n    value: function latestInitialTimepointAfterCurrent() {\n      var currentTimepoint = this.current(); //  Skip if the current timepoint is FU since there is no initial timepoint after follow-up\n\n      if (currentTimepoint.timepointType === 'followup') {\n        return;\n      } //  Get all next timepoints newer than the current timepoint sorted by visitDate ascending\n\n\n      var sortedTimepoints = this.timepoints.sort(function (tp1, tp2) {\n        return tp1.visitDate > tp2.visitDate ? 1 : -1;\n      });\n      var allNextTimepoints = sortedTimepoints.filter(function (tp) {\n        return tp.visitDate > currentTimepoint.visitDate;\n      });\n      var nextFollowupIndex = allNextTimepoints.findIndex(function (tp) {\n        return tp.timepointType === 'followup';\n      });\n      var latestInitialBeforeNextFUIndex = nextFollowupIndex - 1;\n\n      if (latestInitialBeforeNextFUIndex < 0) {\n        //  There is no FU and all next timepoints are initial, so return the last one\n        return allNextTimepoints[allNextTimepoints.length - 1];\n      } //  Return the latest initial timepoint before the next FU\n\n\n      return allNextTimepoints[latestInitialBeforeNextFUIndex];\n    }\n    /**\n     * Return timepoint ids of initial timepoints which are prebaseline and baseline\n     * @returns {*}\n     */\n\n  }, {\n    key: \"initialTimepointIds\",\n    value: function initialTimepointIds() {\n      var timepointToCheck = this.current(); //  If the current timepoint is PBL or BL, then get the recent PBL/BL of the current timepoint by its first FU\n      //      If it does not exist, then there is no newer initial timepoint, so the current timepoint is used to determine initial timepoint ids\n\n      if (timepointToCheck.timepointType === 'prebaseline' || timepointToCheck.timepointType === 'baseline') {\n        timepointToCheck = this.latestInitialTimepointAfterCurrent() || timepointToCheck;\n      }\n\n      var visitDateToCheck = timepointToCheck.visitDate;\n      var preBaselineTimepoints = this.timepoints.filter(function (tp) {\n        return tp.timepointType === 'prebaseline' && tp.visitDate <= visitDateToCheck;\n      }) || [];\n      var preBaselineTimepointIds = preBaselineTimepoints.map(function (timepoint) {\n        return timepoint.timepointId;\n      });\n      var baselineTimepoints = this.timepoints.filter(function (tp) {\n        return tp.timepointType === 'baseline' && tp.visitDate <= visitDateToCheck;\n      }) || [];\n      var baselineTimepointIds = baselineTimepoints.map(function (timepoint) {\n        return timepoint.timepointId;\n      });\n      return preBaselineTimepointIds.concat(baselineTimepointIds);\n    } // Return only the baseline timepoint\n\n  }, {\n    key: \"baseline\",\n    value: function baseline() {\n      var currentVisitDate = this.current().visitDate;\n      return this.all().find(function (tp) {\n        return tp.timepointType === 'baseline' && tp.visitDate <= currentVisitDate;\n      });\n    }\n    /**\n     * Return only the nadir timepoint. Must be prior to the current timepoint\n     * @return {any}\n     */\n\n  }, {\n    key: \"nadir\",\n    value: function nadir() {\n      var current = this.current();\n      var nadir = this.all().find(function (tp) {\n        return tp.timepointId !== current.timepointId && tp.timepointKey === 'nadir' && tp.visitDate <= current.visitDate;\n      }); // If we have found a nadir, return that\n\n      if (nadir) {\n        return nadir;\n      } // Otherwise, return the most recent baseline\n      // This should only happen if we are only at FU1,\n      // so the baseline is the nadir.\n\n\n      return this.baseline();\n    } // Return only the key timepoints (current, prior, nadir and baseline)\n\n  }, {\n    key: \"key\",\n    value: function key() {\n      var result = [this.current()];\n      var prior = this.prior();\n      var nadir = this.nadir();\n      var baseline = this.baseline();\n\n      var resultIncludes = function resultIncludes(timepoint) {\n        return !!result.find(function (x) {\n          return x.timepointId === timepoint.timepointId;\n        });\n      };\n\n      if (prior && resultIncludes(prior) === false) {\n        result.push(prior);\n      }\n\n      if (nadir && resultIncludes(nadir) === false) {\n        result.push(nadir);\n      }\n\n      if (baseline && resultIncludes(baseline) === false) {\n        result.push(baseline);\n      }\n\n      return result;\n    } // Return only the timepoints for the given study\n\n  }, {\n    key: \"study\",\n    value: function study(studyInstanceUid) {\n      return this.all().filter(function (timepoint) {\n        return timepoint.studyInstanceUids.includes(studyInstanceUid);\n      });\n    } // Return the timepoint's name\n\n  }, {\n    key: \"name\",\n    value: function name(timepoint) {\n      var timepointTypeName = TIMEPOINT_TYPE_NAMES[timepoint.timepointType]; // Check if this is a Baseline timepoint, if it is, return 'Baseline'\n\n      if (timepoint.timepointType === 'baseline') {\n        return 'Baseline';\n      } else if (timepoint.visitNumber) {\n        return \"\".concat(timepointTypeName, \" \").concat(timepoint.visitNumber);\n      }\n\n      var visitNumber = this.calculateVisitNumber(timepoint); // Return the timepoint name as 'Follow-up N'\n\n      return \"\".concat(timepointTypeName, \" \").concat(visitNumber);\n    } // Build the timepoint title based on its date\n\n  }, {\n    key: \"title\",\n    value: function title(timepoint) {\n      var timepointName = this.name(timepoint);\n      var all = this.all();\n      var index = -1;\n      var currentIndex = null;\n\n      for (var i = 0; i < all.length; i++) {\n        var currentTimepoint = all[i]; // Skip the iterations until we can't find the selected timepoint on study list\n\n        if (this.currentTimepointId === currentTimepoint.timepointId) {\n          currentIndex = 0;\n        }\n\n        if (currentIndex !== null) {\n          index = currentIndex++;\n        } // Break the loop if reached the timepoint to get the title\n\n\n        if (currentTimepoint.timepointId === timepoint.timepointId) {\n          break;\n        }\n      }\n\n      var states = {\n        0: ['Current'],\n        1: ['Prior']\n      };\n      var parenthesis = states[index] || [];\n      var nadir = this.nadir();\n\n      if (nadir && nadir.timepointId === timepoint.timepointId) {\n        parenthesis.push('Nadir');\n      }\n\n      var parenthesisText = '';\n\n      if (parenthesis.length) {\n        parenthesisText = \"(\".concat(parenthesis.join(', '), \")\");\n      }\n\n      return \"\".concat(timepointName, \" \").concat(parenthesisText);\n    }\n  }]);\n  return TimepointApi;\n}();\n\ndefineProperty(TimepointApi, \"Instance\", void 0);\n\nvar displayFunction = function displayFunction(data) {\n  return data.text || '';\n};\n\nvar arrowAnnotate = {\n  id: 'ArrowAnnotate',\n  name: 'ArrowAnnotate',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'ArrowAnnotate',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$1 = function displayFunction(data) {\n  if (data.shortestDiameter) {\n    // TODO: Make this check criteria again to see if we should display shortest x longest\n    return data.longestDiameter + ' x ' + data.shortestDiameter;\n  }\n\n  return data.longestDiameter;\n};\n\nvar bidirectional = {\n  id: 'Bidirectional',\n  name: 'Target',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'Bidirectional',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$1\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$2 = function displayFunction(data) {\n  var meanValue = '';\n  var cachedStats = data.cachedStats;\n\n  if (cachedStats && cachedStats.mean) {\n    meanValue = cachedStats.mean.toFixed(2) + ' HU';\n  }\n\n  return meanValue;\n};\n\nvar ellipticalRoi = {\n  id: 'EllipticalRoi',\n  name: 'Ellipse',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'EllipticalRoi',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$2\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$3 = function displayFunction(data) {\n  var meanValue = '';\n  var cachedStats = data.cachedStats;\n\n  if (cachedStats && cachedStats.mean) {\n    meanValue = cachedStats.mean.toFixed(2) + ' HU';\n  }\n\n  return meanValue;\n};\n\nvar circleRoi = {\n  id: 'CircleRoi',\n  name: 'Circle',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'CircleRoi',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$3\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$4 = function displayFunction(data) {\n  var meanValue = '';\n\n  if (data.meanStdDev && data.meanStdDev.mean) {\n    meanValue = data.meanStdDev.mean.toFixed(2) + ' HU';\n  }\n\n  return meanValue;\n};\n\nvar freehandMouse = {\n  id: 'FreehandMouse',\n  name: 'Freehand',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'FreehandMouse',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$4\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$5 = function displayFunction(data) {\n  var lengthValue = '';\n\n  if (data.length) {\n    lengthValue = data.length.toFixed(2) + ' mm';\n  }\n\n  return lengthValue;\n};\n\nvar length = {\n  id: 'Length',\n  name: 'Length',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'Length',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$5\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar nonTarget = {\n  id: 'NonTarget',\n  name: 'Non-Target',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'NonTarget',\n  options: {\n    measurementTable: {\n      displayFunction: function displayFunction(data) {\n        return data.response;\n      }\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$6 = function displayFunction(data) {\n  var meanValue = '';\n  var cachedStats = data.cachedStats;\n\n  if (cachedStats && cachedStats.mean) {\n    meanValue = cachedStats.mean.toFixed(2) + ' HU';\n  }\n\n  return meanValue;\n};\n\nvar rectangleRoi = {\n  id: 'RectangleRoi',\n  name: 'Rectangle',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'RectangleRoi',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$6\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar displayFunction$7 = function displayFunction(data) {\n  var text = '';\n\n  if (data.rAngle) {\n    text = data.rAngle.toFixed(2) + String.fromCharCode(parseInt('00B0', 16));\n  }\n\n  return text;\n};\n\nvar angle = {\n  id: 'Angle',\n  name: 'Angle',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'Angle',\n  options: {\n    measurementTable: {\n      displayFunction: displayFunction$7\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar targetCR = {\n  id: 'TargetCR',\n  name: 'CR Target',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'TargetCR',\n  options: {\n    measurementTable: {\n      displayFunction: function displayFunction(data) {\n        return data.response;\n      }\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar targetNE = {\n  id: 'TargetNE',\n  name: 'NE Target',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'TargetNE',\n  options: {\n    measurementTable: {\n      displayFunction: function displayFunction(data) {\n        return data.response;\n      }\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar targetUN = {\n  id: 'TargetUN',\n  name: 'UN Target',\n  toolGroup: 'allTools',\n  cornerstoneToolType: 'TargetUN',\n  options: {\n    measurementTable: {\n      displayFunction: function displayFunction(data) {\n        return data.response;\n      }\n    },\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar tools =\n/*#__PURE__*/\nObject.freeze({\n  arrowAnnotate: arrowAnnotate,\n  bidirectional: bidirectional,\n  ellipticalRoi: ellipticalRoi,\n  circleRoi: circleRoi,\n  freehandMouse: freehandMouse,\n  length: length,\n  nonTarget: nonTarget,\n  rectangleRoi: rectangleRoi,\n  angle: angle,\n  targetCR: targetCR,\n  targetNE: targetNE,\n  targetUN: targetUN\n});\nvar childTools = [];\nObject.keys(tools).forEach(function (key) {\n  return childTools.push(tools[key]);\n});\nvar allTools = {\n  id: 'allTools',\n  name: 'Measurements',\n  childTools: childTools,\n  options: {\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\n\nvar retrieveMeasurements = function retrieveMeasurements(patientId, timepointIds) {\n  log$1.error('retrieveMeasurements');\n  return Promise.resolve();\n};\n\nvar storeMeasurements = function storeMeasurements(measurementData, timepointIds) {\n  log$1.error('storeMeasurements');\n  return Promise.resolve();\n};\n\nvar retrieveTimepoints = function retrieveTimepoints(filter) {\n  log$1.error('retrieveTimepoints');\n  return Promise.resolve();\n};\n\nvar storeTimepoints = function storeTimepoints(timepointData) {\n  log$1.error('storeTimepoints');\n  return Promise.resolve();\n};\n\nvar updateTimepoint = function updateTimepoint(timepointData, query) {\n  log$1.error('updateTimepoint');\n  return Promise.resolve();\n};\n\nvar removeTimepoint = function removeTimepoint(timepointId) {\n  log$1.error('removeTimepoint');\n  return Promise.resolve();\n};\n\nvar disassociateStudy = function disassociateStudy(timepointIds, studyInstanceUid) {\n  log$1.error('disassociateStudy');\n  return Promise.resolve();\n};\n\nMeasurementApi.setConfiguration({\n  measurementTools: [allTools],\n  newLesions: [{\n    id: 'newTargets',\n    name: 'New Targets',\n    toolGroupId: 'targets'\n  }, {\n    id: 'newNonTargets',\n    name: 'New Non-Targets',\n    toolGroupId: 'nonTargets'\n  }],\n  dataExchange: {\n    retrieve: retrieveMeasurements,\n    store: storeMeasurements\n  }\n});\nTimepointApi.setConfiguration({\n  dataExchange: {\n    retrieve: retrieveTimepoints,\n    store: storeTimepoints,\n    remove: removeTimepoint,\n    update: updateTimepoint,\n    disassociate: disassociateStudy\n  }\n});\n\nvar BaseCriterion =\n/*#__PURE__*/\nfunction () {\n  function BaseCriterion(options, criterionName) {\n    classCallCheck(this, BaseCriterion);\n    this.options = options;\n    this.criterionName = criterionName;\n  }\n\n  createClass(BaseCriterion, [{\n    key: \"generateResponse\",\n    value: function generateResponse(message, measurements) {\n      var passed = !message;\n      var isGlobal = !measurements || !measurements.length;\n      return {\n        passed: passed,\n        isGlobal: isGlobal,\n        message: message,\n        measurements: measurements,\n        criterionName: this.criterionName\n      };\n    }\n  }, {\n    key: \"getNewTargetNumbers\",\n    value: function getNewTargetNumbers(data) {\n      var options = this.options;\n      var baselineMeasurementNumbers = [];\n      var newTargetNumbers = new Set();\n\n      if (options.newTarget) {\n        data.targets.forEach(function (target) {\n          var measurementNumber = target.measurement.measurementNumber;\n\n          if (target.timepoint.timepointType === 'baseline') {\n            baselineMeasurementNumbers.push(measurementNumber);\n          }\n        });\n        data.targets.forEach(function (target) {\n          var measurementNumber = target.measurement.measurementNumber;\n\n          if (target.timepoint.timepointType === 'followup') {\n            if (!baselineMeasurementNumbers.includes(measurementNumber)) {\n              newTargetNumbers.add(measurementNumber);\n            }\n          }\n        });\n      }\n\n      return newTargetNumbers;\n    }\n  }]);\n  return BaseCriterion;\n}();\n\nvar LocationSchema = {\n  type: 'object'\n};\n/* LocationCriterion\n *   Check if the there are non-target measurements with response different than \"present\" on baseline\n */\n\nvar LocationCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(LocationCriterion, _BaseCriterion);\n\n  function LocationCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, LocationCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(LocationCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(LocationCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var items = data.targets.concat(data.nonTargets);\n      var measurements = [];\n      var message;\n      items.forEach(function (item) {\n        var measurement = item.measurement;\n\n        if (!measurement.location) {\n          measurements.push(measurement);\n        }\n      });\n\n      if (measurements.length) {\n        message = 'All measurements should have a location';\n      }\n\n      return this.generateResponse(message, measurements);\n    }\n  }]);\n  return LocationCriterion;\n}(BaseCriterion);\n\nvar MaxTargetsPerOrganSchema = {\n  type: 'object',\n  properties: {\n    limit: {\n      label: 'Max targets allowed per organ',\n      type: 'integer',\n      minimum: 1\n    },\n    newTarget: {\n      label: 'Flag to evaluate only new targets',\n      type: 'boolean'\n    }\n  },\n  required: ['limit']\n};\n/*\n * MaxTargetsPerOrganCriterion\n *   Check if the number of target measurements per organ exceeded the limit allowed\n * Options:\n *   limit: Max targets allowed in study\n *   newTarget: Flag to evaluate only new targets (must be evaluated on both)\n */\n\nvar MaxTargetsPerOrganCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(MaxTargetsPerOrganCriterion, _BaseCriterion);\n\n  function MaxTargetsPerOrganCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, MaxTargetsPerOrganCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(MaxTargetsPerOrganCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(MaxTargetsPerOrganCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var options = this.options;\n      var targetsPerOrgan = {};\n      var measurements = [];\n      var newTargetNumbers = this.getNewTargetNumbers(data);\n      data.targets.forEach(function (target) {\n        var measurement = target.measurement;\n        var location = measurement.location,\n            measurementNumber = measurement.measurementNumber,\n            isSplitLesion = measurement.isSplitLesion;\n        if (isSplitLesion) return;\n\n        if (!targetsPerOrgan[location]) {\n          targetsPerOrgan[location] = new Set();\n        }\n\n        if (!options.newTarget || newTargetNumbers.has(measurementNumber)) {\n          targetsPerOrgan[location].add(measurementNumber);\n        }\n\n        if (targetsPerOrgan[location].size > options.limit) {\n          measurements.push(measurement);\n        }\n      });\n      var message;\n\n      if (measurements.length) {\n        var increment = options.newTarget ? 'new ' : '';\n        message = options.message || \"Each organ should not have more than \".concat(options.limit, \" \").concat(increment, \"targets.\");\n      }\n\n      return this.generateResponse(message, measurements);\n    }\n  }]);\n  return MaxTargetsPerOrganCriterion;\n}(BaseCriterion);\n\nvar MaxTargetsSchema = {\n  type: 'object',\n  properties: {\n    limit: {\n      label: 'Max targets allowed in study',\n      type: 'integer',\n      minimum: 0\n    },\n    newTarget: {\n      label: 'Flag to evaluate only new targets',\n      type: 'boolean'\n    },\n    locationIn: {\n      label: 'Filter to evaluate only measurements with the specified locations',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    },\n    locationNotIn: {\n      label: 'Filter to evaluate only measurements without the specified locations',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    }\n  },\n  required: ['limit']\n};\n/* MaxTargetsCriterion\n *   Check if the number of target measurements exceeded the limit allowed\n * Options:\n *   limit: Max targets allowed in study\n *   newTarget: Flag to evaluate only new targets (must be evaluated on both)\n *   locationIn: Filter to evaluate only measurements with the specified locations\n *   locationNotIn: Filter to evaluate only measurements without the specified locations\n *   message: Message to be displayed in case of nonconformity\n */\n\nvar MaxTargetsCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(MaxTargetsCriterion, _BaseCriterion);\n\n  function MaxTargetsCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, MaxTargetsCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(MaxTargetsCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(MaxTargetsCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var options = this.options;\n      var newTargetNumbers = this.getNewTargetNumbers(data);\n      var measurementNumbers = [];\n      data.targets.forEach(function (target) {\n        var _target$measurement = target.measurement,\n            location = _target$measurement.location,\n            measurementNumber = _target$measurement.measurementNumber,\n            isSplitLesion = _target$measurement.isSplitLesion;\n        if (isSplitLesion) return;\n        if (options.newTarget && !newTargetNumbers.has(measurementNumber)) return;\n        if (options.locationIn && options.locationIn.indexOf(location) === -1) return;\n        if (options.locationNotIn && options.locationNotIn.indexOf(location) > -1) return;\n        measurementNumbers.push(measurementNumber);\n      });\n      var message;\n\n      if (measurementNumbers.length > options.limit) {\n        var increment = options.newTarget ? 'new ' : '';\n        var plural = options.limit === 1 ? '' : 's';\n        var amount = options.limit === 0 ? '' : \"more than \".concat(options.limit);\n        message = options.message || \"The study should not have \".concat(amount, \" \").concat(increment, \"target\").concat(plural, \".\");\n      }\n\n      return this.generateResponse(message);\n    }\n  }]);\n  return MaxTargetsCriterion;\n}(BaseCriterion);\n\nvar MeasurementsLengthSchema = {\n  type: 'object',\n  properties: {\n    longAxis: {\n      label: 'Minimum length of long axis',\n      type: 'number',\n      minimum: 0\n    },\n    shortAxis: {\n      label: 'Minimum length of short axis',\n      type: 'number',\n      minimum: 0\n    },\n    longAxisSliceThicknessMultiplier: {\n      label: 'Length of long axis multiplier',\n      type: 'number',\n      minimum: 0\n    },\n    shortAxisSliceThicknessMultiplier: {\n      label: 'Length of short axis multiplier',\n      type: 'number',\n      minimum: 0\n    },\n    modalityIn: {\n      label: 'Filter to evaluate only measurements with the specified modalities',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    },\n    modalityNotIn: {\n      label: 'Filter to evaluate only measurements without the specified modalities',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    },\n    locationIn: {\n      label: 'Filter to evaluate only measurements with the specified locations',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    },\n    locationNotIn: {\n      label: 'Filter to evaluate only measurements without the specified locations',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    },\n    message: {\n      label: 'Message to be displayed in case of nonconformity',\n      type: 'string'\n    }\n  },\n  anyOf: [{\n    required: ['message', 'longAxis']\n  }, {\n    required: ['message', 'shortAxis']\n  }, {\n    required: ['message', 'longAxisSliceThicknessMultiplier']\n  }, {\n    required: ['message', 'shortAxisSliceThicknessMultiplier']\n  }]\n};\n/*\n * MeasurementsLengthCriterion\n *   Check the measurements of all bidirectional tools based on\n *   short axis, long axis, modalities, location and slice thickness\n * Options:\n *   longAxis: Minimum length of long axis\n *   shortAxis: Minimum length of short axis\n *   longAxisSliceThicknessMultiplier: Length of long axis multiplier\n *   shortAxisSliceThicknessMultiplier: Length of short axis multiplier\n *   modalityIn: Filter to evaluate only measurements with the specified modalities\n *   modalityNotIn: Filter to evaluate only measurements without the specified modalities\n *   locationIn: Filter to evaluate only measurements with the specified locations\n *   locationNotIn: Filter to evaluate only measurements without the specified locations\n *   message: Message to be displayed in case of nonconformity\n */\n\nvar MeasurementsLengthCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(MeasurementsLengthCriterion, _BaseCriterion);\n\n  function MeasurementsLengthCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, MeasurementsLengthCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(MeasurementsLengthCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(MeasurementsLengthCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var message;\n      var measurements = [];\n      var options = this.options;\n      var longMultiplier = options.longAxisSliceThicknessMultiplier;\n      var shortMultiplier = options.shortAxisSliceThicknessMultiplier;\n      data.targets.forEach(function (item) {\n        var metadata = item.metadata,\n            measurement = item.measurement;\n        var location = measurement.location;\n        var longestDiameter = measurement.longestDiameter,\n            shortestDiameter = measurement.shortestDiameter;\n\n        if (measurement.childToolsCount) {\n          var child = measurement.bidirectional;\n          longestDiameter = child && child.longestDiameter || 0;\n          shortestDiameter = child && child.shortestDiameter || 0;\n        }\n\n        var sliceThickness = metadata.sliceThickness;\n        var modality = (metadata.getRawValue('x00080060') || '').toUpperCase(); // Stop here if the measurement does not match the modality and location filters\n\n        if (options.locationIn && options.locationIn.indexOf(location) === -1) return;\n        if (options.modalityIn && options.modalityIn.indexOf(modality) === -1) return;\n        if (options.locationNotIn && options.locationNotIn.indexOf(location) > -1) return;\n        if (options.modalityNotIn && options.modalityNotIn.indexOf(modality) > -1) return; // Check the measurement length\n\n        var failed = options.longAxis && longestDiameter < options.longAxis || options.shortAxis && shortestDiameter < options.shortAxis || longMultiplier && !isNaN(sliceThickness) && longestDiameter < longMultiplier * sliceThickness || shortMultiplier && !isNaN(sliceThickness) && shortestDiameter < shortMultiplier * sliceThickness; // Mark this measurement as invalid if some of the checks have failed\n\n        if (failed) {\n          measurements.push(measurement);\n        }\n      }); // Use the options' message if some measurement is invalid\n\n      if (measurements.length) {\n        message = options.message;\n      }\n\n      return this.generateResponse(message, measurements);\n    }\n  }]);\n  return MeasurementsLengthCriterion;\n}(BaseCriterion);\n\nvar ModalitySchema = {\n  type: 'object',\n  properties: {\n    method: {\n      label: 'Specify if it\\'s goinig to \"allow\" or \"deny\" the modalities',\n      type: 'string',\n      enum: ['allow', 'deny']\n    },\n    measurementTypes: {\n      label: 'List of measurement types that will be evaluated',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    },\n    modalities: {\n      label: 'List of allowed/denied modalities',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      minItems: 1,\n      uniqueItems: true\n    }\n  },\n  required: ['method', 'modalities']\n};\n/*\n * ModalityCriteria\n *   Check if a modality is allowed or denied\n * Options:\n *   method (string): Specify if it\\'s goinig to \"allow\" or \"deny\" the modalities\n *   measurementTypes (string[]): List of measurement types that will be evaluated\n *   modalities (string[]): List of allowed/denied modalities\n */\n\nvar ModalityCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(ModalityCriterion, _BaseCriterion);\n\n  function ModalityCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, ModalityCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ModalityCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(ModalityCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var measurementTypes = this.options.measurementTypes || ['targets'];\n      var modalitiesSet = new Set(this.options.modalities);\n      var validationMethod = this.options.method;\n      var measurements = [];\n      var invalidModalities = new Set();\n      var message;\n      measurementTypes.forEach(function (measurementType) {\n        var items = data[measurementType];\n        items.forEach(function (item) {\n          var measurement = item.measurement,\n              metadata = item.metadata;\n          var modality = (metadata.getRawValue('x00080060') || '').toUpperCase();\n\n          if (validationMethod === 'allow' && !modalitiesSet.has(modality) || validationMethod === 'deny' && modalitiesSet.has(modality)) {\n            measurements.push(measurement);\n            invalidModalities.add(modality);\n          }\n        });\n      });\n\n      if (measurements.length) {\n        var uniqueModalities = Array.from(invalidModalities);\n        var uniqueModalitiesText = uniqueModalities.join(', ');\n        var modalityText = uniqueModalities.length > 1 ? 'modalities' : 'modality';\n        message = \"The \".concat(modalityText, \" \").concat(uniqueModalitiesText, \" should not be used as a method of measurement\");\n      }\n\n      return this.generateResponse(message, measurements);\n    }\n  }]);\n  return ModalityCriterion;\n}(BaseCriterion);\n\nvar NonTargetResponseSchema = {\n  type: 'object'\n};\n/* NonTargetResponseCriterion\n *   Check if the there are non-target measurements with response different than \"present\" on baseline\n */\n\nvar NonTargetResponseCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(NonTargetResponseCriterion, _BaseCriterion);\n\n  function NonTargetResponseCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, NonTargetResponseCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(NonTargetResponseCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(NonTargetResponseCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var items = data.nonTargets;\n      var measurements = [];\n      var message;\n      items.forEach(function (item) {\n        var measurement = item.measurement;\n        var response = (measurement.response || '').toLowerCase();\n\n        if (response !== 'present') {\n          measurements.push(measurement);\n        }\n      });\n\n      if (measurements.length) {\n        message = 'Non-targets can only be assessed as \"present\"';\n      }\n\n      return this.generateResponse(message, measurements);\n    }\n  }]);\n  return NonTargetResponseCriterion;\n}(BaseCriterion);\n\nvar TargetTypeSchema = {\n  type: 'object'\n};\n/* TargetTypeCriterion\n *   Check if the there are non-bidirectional target measurements on baseline\n */\n\nvar TargetTypeCriterion =\n/*#__PURE__*/\nfunction (_BaseCriterion) {\n  inherits(TargetTypeCriterion, _BaseCriterion);\n\n  function TargetTypeCriterion() {\n    var _getPrototypeOf2;\n\n    classCallCheck(this, TargetTypeCriterion);\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TargetTypeCriterion)).call.apply(_getPrototypeOf2, [this].concat(props)));\n  }\n\n  createClass(TargetTypeCriterion, [{\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var items = data.targets;\n      var measurements = [];\n      var message;\n      items.forEach(function (item) {\n        var measurement = item.measurement;\n\n        if (measurement.toolType !== 'Bidirectional' && !measurement.bidirectional) {\n          measurements.push(measurement);\n        }\n      });\n\n      if (measurements.length) {\n        message = 'Target lesions must have measurements (cannot be assessed as CR, UN/NE, EX)';\n      }\n\n      return this.generateResponse(message, measurements);\n    }\n  }]);\n  return TargetTypeCriterion;\n}(BaseCriterion);\n\nvar initialCriteria =\n/*#__PURE__*/\nObject.freeze({\n  LocationSchema: LocationSchema,\n  LocationCriterion: LocationCriterion,\n  MaxTargetsPerOrganSchema: MaxTargetsPerOrganSchema,\n  MaxTargetsPerOrganCriterion: MaxTargetsPerOrganCriterion,\n  MaxTargetsSchema: MaxTargetsSchema,\n  MaxTargetsCriterion: MaxTargetsCriterion,\n  MeasurementsLengthSchema: MeasurementsLengthSchema,\n  MeasurementsLengthCriterion: MeasurementsLengthCriterion,\n  ModalitySchema: ModalitySchema,\n  ModalityCriterion: ModalityCriterion,\n  NonTargetResponseSchema: NonTargetResponseSchema,\n  NonTargetResponseCriterion: NonTargetResponseCriterion,\n  TargetTypeSchema: TargetTypeSchema,\n  TargetTypeCriterion: TargetTypeCriterion\n});\nvar uri_all = createCommonjsModule(function (module, exports) {\n  /** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n  (function (global, factory) {\n    factory(exports);\n  })(commonjsGlobal, function (exports) {\n    function merge() {\n      for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {\n        sets[_key] = arguments[_key];\n      }\n\n      if (sets.length > 1) {\n        sets[0] = sets[0].slice(0, -1);\n        var xl = sets.length - 1;\n\n        for (var x = 1; x < xl; ++x) {\n          sets[x] = sets[x].slice(1, -1);\n        }\n\n        sets[xl] = sets[xl].slice(1);\n        return sets.join('');\n      } else {\n        return sets[0];\n      }\n    }\n\n    function subexp(str) {\n      return \"(?:\" + str + \")\";\n    }\n\n    function typeOf(o) {\n      return o === undefined ? \"undefined\" : o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase();\n    }\n\n    function toUpperCase(str) {\n      return str.toUpperCase();\n    }\n\n    function toArray(obj) {\n      return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];\n    }\n\n    function assign(target, source) {\n      var obj = target;\n\n      if (source) {\n        for (var key in source) {\n          obj[key] = source[key];\n        }\n      }\n\n      return obj;\n    }\n\n    function buildExps(isIRI) {\n      var ALPHA$$ = \"[A-Za-z]\",\n          DIGIT$$ = \"[0-9]\",\n          HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),\n          PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),\n          //expanded\n      GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n          SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n          RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n          UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n          //subset, excludes bidi control characters\n      IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n          //subset\n      UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n          SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n          USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n          DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),\n          //relaxed parsing rules\n      IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n          H16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n          LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n          IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$),\n          //                           6( h16 \":\" ) ls32\n      IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$),\n          //                      \"::\" 5( h16 \":\" ) ls32\n      IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$),\n          //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n      IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$),\n          //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n      IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$),\n          //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n      IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$),\n          //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n      IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$),\n          //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n      IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$),\n          //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n      IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"),\n          //[ *6( h16 \":\" ) h16 ] \"::\"\n      IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n          ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),\n          //RFC 6874, with relaxed parsing rules\n      IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n          //RFC 6874\n      REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n          PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n          SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n          QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\");\n      return {\n        NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n        NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n        NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n        ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\n        OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n        PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\n        IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n        IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\n\n      };\n    }\n\n    var URI_PROTOCOL = buildExps(false);\n    var IRI_PROTOCOL = buildExps(true);\n\n    var slicedToArray = function () {\n      function sliceIterator(arr, i) {\n        var _arr = [];\n        var _n = true;\n        var _d = false;\n        var _e = undefined;\n\n        try {\n          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n\n            if (i && _arr.length === i) break;\n          }\n        } catch (err) {\n          _d = true;\n          _e = err;\n        } finally {\n          try {\n            if (!_n && _i[\"return\"]) _i[\"return\"]();\n          } finally {\n            if (_d) throw _e;\n          }\n        }\n\n        return _arr;\n      }\n\n      return function (arr, i) {\n        if (Array.isArray(arr)) {\n          return arr;\n        } else if (Symbol.iterator in Object(arr)) {\n          return sliceIterator(arr, i);\n        } else {\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }\n      };\n    }();\n\n    var toConsumableArray = function toConsumableArray(arr) {\n      if (Array.isArray(arr)) {\n        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n          arr2[i] = arr[i];\n        }\n\n        return arr2;\n      } else {\n        return Array.from(arr);\n      }\n    };\n    /** Highest positive signed 32-bit float value */\n\n\n    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n    /** Bootstring parameters */\n\n    var base = 36;\n    var tMin = 1;\n    var tMax = 26;\n    var skew = 38;\n    var damp = 700;\n    var initialBias = 72;\n    var initialN = 128; // 0x80\n\n    var delimiter = '-'; // '\\x2D'\n\n    /** Regular expressions */\n\n    var regexPunycode = /^xn--/;\n    var regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\n\n    var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n    /** Error messages */\n\n    var errors = {\n      'overflow': 'Overflow: input needs wider integers to process',\n      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n      'invalid-input': 'Invalid input'\n    };\n    /** Convenience shortcuts */\n\n    var baseMinusTMin = base - tMin;\n    var floor = Math.floor;\n    var stringFromCharCode = String.fromCharCode;\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * A generic error utility function.\n     * @private\n     * @param {String} type The error type.\n     * @returns {Error} Throws a `RangeError` with the applicable error message.\n     */\n\n    function error$1(type) {\n      throw new RangeError(errors[type]);\n    }\n    /**\n     * A generic `Array#map` utility function.\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} callback The function that gets called for every array\n     * item.\n     * @returns {Array} A new array of values returned by the callback function.\n     */\n\n\n    function map(array, fn) {\n      var result = [];\n      var length = array.length;\n\n      while (length--) {\n        result[length] = fn(array[length]);\n      }\n\n      return result;\n    }\n    /**\n     * A simple `Array#map`-like wrapper to work with domain name strings or email\n     * addresses.\n     * @private\n     * @param {String} domain The domain name or email address.\n     * @param {Function} callback The function that gets called for every\n     * character.\n     * @returns {Array} A new string of characters returned by the callback\n     * function.\n     */\n\n\n    function mapDomain(string, fn) {\n      var parts = string.split('@');\n      var result = '';\n\n      if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + '@';\n        string = parts[1];\n      } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n      string = string.replace(regexSeparators, '\\x2E');\n      var labels = string.split('.');\n      var encoded = map(labels, fn).join('.');\n      return result + encoded;\n    }\n    /**\n     * Creates an array containing the numeric code points of each Unicode\n     * character in the string. While JavaScript uses UCS-2 internally,\n     * this function will convert a pair of surrogate halves (each of which\n     * UCS-2 exposes as separate characters) into a single code point,\n     * matching UTF-16.\n     * @see `punycode.ucs2.encode`\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode.ucs2\n     * @name decode\n     * @param {String} string The Unicode input string (UCS-2).\n     * @returns {Array} The new array of code points.\n     */\n\n\n    function ucs2decode(string) {\n      var output = [];\n      var counter = 0;\n      var length = string.length;\n\n      while (counter < length) {\n        var value = string.charCodeAt(counter++);\n\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n          // It's a high surrogate, and there is a next character.\n          var extra = string.charCodeAt(counter++);\n\n          if ((extra & 0xFC00) == 0xDC00) {\n            // Low surrogate.\n            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n          } else {\n            // It's an unmatched surrogate; only append this code unit, in case the\n            // next code unit is the high surrogate of a surrogate pair.\n            output.push(value);\n            counter--;\n          }\n        } else {\n          output.push(value);\n        }\n      }\n\n      return output;\n    }\n    /**\n     * Creates a string based on an array of numeric code points.\n     * @see `punycode.ucs2.decode`\n     * @memberOf punycode.ucs2\n     * @name encode\n     * @param {Array} codePoints The array of numeric code points.\n     * @returns {String} The new Unicode string (UCS-2).\n     */\n\n\n    var ucs2encode = function ucs2encode(array) {\n      return String.fromCodePoint.apply(String, toConsumableArray(array));\n    };\n    /**\n     * Converts a basic code point into a digit/integer.\n     * @see `digitToBasic()`\n     * @private\n     * @param {Number} codePoint The basic numeric code point value.\n     * @returns {Number} The numeric value of a basic code point (for use in\n     * representing integers) in the range `0` to `base - 1`, or `base` if\n     * the code point does not represent a value.\n     */\n\n\n    var basicToDigit = function basicToDigit(codePoint) {\n      if (codePoint - 0x30 < 0x0A) {\n        return codePoint - 0x16;\n      }\n\n      if (codePoint - 0x41 < 0x1A) {\n        return codePoint - 0x41;\n      }\n\n      if (codePoint - 0x61 < 0x1A) {\n        return codePoint - 0x61;\n      }\n\n      return base;\n    };\n    /**\n     * Converts a digit/integer into a basic code point.\n     * @see `basicToDigit()`\n     * @private\n     * @param {Number} digit The numeric value of a basic code point.\n     * @returns {Number} The basic code point whose value (when used for\n     * representing integers) is `digit`, which needs to be in the range\n     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n     * used; else, the lowercase form is used. The behavior is undefined\n     * if `flag` is non-zero and `digit` has no uppercase form.\n     */\n\n\n    var digitToBasic = function digitToBasic(digit, flag) {\n      //  0..25 map to ASCII a..z or A..Z\n      // 26..35 map to ASCII 0..9\n      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n    };\n    /**\n     * Bias adaptation function as per section 3.4 of RFC 3492.\n     * https://tools.ietf.org/html/rfc3492#section-3.4\n     * @private\n     */\n\n\n    var adapt = function adapt(delta, numPoints, firstTime) {\n      var k = 0;\n      delta = firstTime ? floor(delta / damp) : delta >> 1;\n      delta += floor(delta / numPoints);\n\n      for (;\n      /* no initialization */\n      delta > baseMinusTMin * tMax >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n      }\n\n      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n    };\n    /**\n     * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n     * symbols.\n     * @memberOf punycode\n     * @param {String} input The Punycode string of ASCII-only symbols.\n     * @returns {String} The resulting string of Unicode symbols.\n     */\n\n\n    var decode = function decode(input) {\n      // Don't use UCS-2.\n      var output = [];\n      var inputLength = input.length;\n      var i = 0;\n      var n = initialN;\n      var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code\n      // points before the last delimiter, or `0` if there is none, then copy\n      // the first basic code points to the output.\n\n      var basic = input.lastIndexOf(delimiter);\n\n      if (basic < 0) {\n        basic = 0;\n      }\n\n      for (var j = 0; j < basic; ++j) {\n        // if it's not a basic code point\n        if (input.charCodeAt(j) >= 0x80) {\n          error$1('not-basic');\n        }\n\n        output.push(input.charCodeAt(j));\n      } // Main decoding loop: start just after the last delimiter if any basic code\n      // points were copied; start at the beginning otherwise.\n\n\n      for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n      /* no final expression */\n      {\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        var oldi = i;\n\n        for (var w = 1, k = base;;\n        /* no condition */\n        k += base) {\n          if (index >= inputLength) {\n            error$1('invalid-input');\n          }\n\n          var digit = basicToDigit(input.charCodeAt(index++));\n\n          if (digit >= base || digit > floor((maxInt - i) / w)) {\n            error$1('overflow');\n          }\n\n          i += digit * w;\n          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n          if (digit < t) {\n            break;\n          }\n\n          var baseMinusT = base - t;\n\n          if (w > floor(maxInt / baseMinusT)) {\n            error$1('overflow');\n          }\n\n          w *= baseMinusT;\n        }\n\n        var out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we'll fix that now:\n\n        if (floor(i / out) > maxInt - n) {\n          error$1('overflow');\n        }\n\n        n += floor(i / out);\n        i %= out; // Insert `n` at position `i` of the output.\n\n        output.splice(i++, 0, n);\n      }\n\n      return String.fromCodePoint.apply(String, output);\n    };\n    /**\n     * Converts a string of Unicode symbols (e.g. a domain name label) to a\n     * Punycode string of ASCII-only symbols.\n     * @memberOf punycode\n     * @param {String} input The string of Unicode symbols.\n     * @returns {String} The resulting Punycode string of ASCII-only symbols.\n     */\n\n\n    var encode = function encode(input) {\n      var output = []; // Convert the input in UCS-2 to an array of Unicode code points.\n\n      input = ucs2decode(input); // Cache the length.\n\n      var inputLength = input.length; // Initialize the state.\n\n      var n = initialN;\n      var delta = 0;\n      var bias = initialBias; // Handle the basic code points.\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _currentValue2 = _step.value;\n\n          if (_currentValue2 < 0x80) {\n            output.push(stringFromCharCode(_currentValue2));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var basicLength = output.length;\n      var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;\n      // `basicLength` is the number of basic code points.\n      // Finish the basic string with a delimiter unless it's empty.\n\n      if (basicLength) {\n        output.push(delimiter);\n      } // Main encoding loop:\n\n\n      while (handledCPCount < inputLength) {\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        var m = maxInt;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var currentValue = _step2.value;\n\n            if (currentValue >= n && currentValue < m) {\n              m = currentValue;\n            }\n          } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n          // but guard against overflow.\n\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var handledCPCountPlusOne = handledCPCount + 1;\n\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n          error$1('overflow');\n        }\n\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _currentValue = _step3.value;\n\n            if (_currentValue < n && ++delta > maxInt) {\n              error$1('overflow');\n            }\n\n            if (_currentValue == n) {\n              // Represent delta as a generalized variable-length integer.\n              var q = delta;\n\n              for (var k = base;;\n              /* no condition */\n              k += base) {\n                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n                if (q < t) {\n                  break;\n                }\n\n                var qMinusT = q - t;\n                var baseMinusT = base - t;\n                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                q = floor(qMinusT / baseMinusT);\n              }\n\n              output.push(stringFromCharCode(digitToBasic(q, 0)));\n              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n              delta = 0;\n              ++handledCPCount;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        ++delta;\n        ++n;\n      }\n\n      return output.join('');\n    };\n    /**\n     * Converts a Punycode string representing a domain name or an email address\n     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n     * it doesn't matter if you call it on a string that has already been\n     * converted to Unicode.\n     * @memberOf punycode\n     * @param {String} input The Punycoded domain name or email address to\n     * convert to Unicode.\n     * @returns {String} The Unicode representation of the given Punycode\n     * string.\n     */\n\n\n    var toUnicode = function toUnicode(input) {\n      return mapDomain(input, function (string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n      });\n    };\n    /**\n     * Converts a Unicode string representing a domain name or an email address to\n     * Punycode. Only the non-ASCII parts of the domain name will be converted,\n     * i.e. it doesn't matter if you call it with a domain that's already in\n     * ASCII.\n     * @memberOf punycode\n     * @param {String} input The domain name or email address to convert, as a\n     * Unicode string.\n     * @returns {String} The Punycode representation of the given domain name or\n     * email address.\n     */\n\n\n    var toASCII = function toASCII(input) {\n      return mapDomain(input, function (string) {\n        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n      });\n    };\n    /*--------------------------------------------------------------------------*/\n\n    /** Define the public API */\n\n\n    var punycode = {\n      /**\n       * A string representing the current Punycode.js version number.\n       * @memberOf punycode\n       * @type String\n       */\n      'version': '2.1.0',\n\n      /**\n       * An object of methods to convert from JavaScript's internal character\n       * representation (UCS-2) to Unicode code points, and back.\n       * @see <https://mathiasbynens.be/notes/javascript-encoding>\n       * @memberOf punycode\n       * @type Object\n       */\n      'ucs2': {\n        'decode': ucs2decode,\n        'encode': ucs2encode\n      },\n      'decode': decode,\n      'encode': encode,\n      'toASCII': toASCII,\n      'toUnicode': toUnicode\n    };\n    /**\n     * URI.js\n     *\n     * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n     * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n     * @see http://github.com/garycourt/uri-js\n     */\n\n    /**\n     * Copyright 2011 Gary Court. All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without modification, are\n     * permitted provided that the following conditions are met:\n     *\n     *    1. Redistributions of source code must retain the above copyright notice, this list of\n     *       conditions and the following disclaimer.\n     *\n     *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n     *       of conditions and the following disclaimer in the documentation and/or other materials\n     *       provided with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * The views and conclusions contained in the software and documentation are those of the\n     * authors and should not be interpreted as representing official policies, either expressed\n     * or implied, of Gary Court.\n     */\n\n    var SCHEMES = {};\n\n    function pctEncChar(chr) {\n      var c = chr.charCodeAt(0);\n      var e = void 0;\n      if (c < 16) e = \"%0\" + c.toString(16).toUpperCase();else if (c < 128) e = \"%\" + c.toString(16).toUpperCase();else if (c < 2048) e = \"%\" + (c >> 6 | 192).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();else e = \"%\" + (c >> 12 | 224).toString(16).toUpperCase() + \"%\" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n      return e;\n    }\n\n    function pctDecChars(str) {\n      var newStr = \"\";\n      var i = 0;\n      var il = str.length;\n\n      while (i < il) {\n        var c = parseInt(str.substr(i + 1, 2), 16);\n\n        if (c < 128) {\n          newStr += String.fromCharCode(c);\n          i += 3;\n        } else if (c >= 194 && c < 224) {\n          if (il - i >= 6) {\n            var c2 = parseInt(str.substr(i + 4, 2), 16);\n            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);\n          } else {\n            newStr += str.substr(i, 6);\n          }\n\n          i += 6;\n        } else if (c >= 224) {\n          if (il - i >= 9) {\n            var _c = parseInt(str.substr(i + 4, 2), 16);\n\n            var c3 = parseInt(str.substr(i + 7, 2), 16);\n            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);\n          } else {\n            newStr += str.substr(i, 9);\n          }\n\n          i += 9;\n        } else {\n          newStr += str.substr(i, 3);\n          i += 3;\n        }\n      }\n\n      return newStr;\n    }\n\n    function _normalizeComponentEncoding(components, protocol) {\n      function decodeUnreserved(str) {\n        var decStr = pctDecChars(str);\n        return !decStr.match(protocol.UNRESERVED) ? str : decStr;\n      }\n\n      if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n      if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      return components;\n    }\n\n    function _stripLeadingZeros(str) {\n      return str.replace(/^0*(.*)/, \"$1\") || \"0\";\n    }\n\n    function _normalizeIPv4(host, protocol) {\n      var matches = host.match(protocol.IPV4ADDRESS) || [];\n\n      var _matches = slicedToArray(matches, 2),\n          address = _matches[1];\n\n      if (address) {\n        return address.split(\".\").map(_stripLeadingZeros).join(\".\");\n      } else {\n        return host;\n      }\n    }\n\n    function _normalizeIPv6(host, protocol) {\n      var matches = host.match(protocol.IPV6ADDRESS) || [];\n\n      var _matches2 = slicedToArray(matches, 3),\n          address = _matches2[1],\n          zone = _matches2[2];\n\n      if (address) {\n        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),\n            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),\n            last = _address$toLowerCase$2[0],\n            first = _address$toLowerCase$2[1];\n\n        var firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n        var lastFields = last.split(\":\").map(_stripLeadingZeros);\n        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n        var fieldCount = isLastFieldIPv4Address ? 7 : 8;\n        var lastFieldsStart = lastFields.length - fieldCount;\n        var fields = Array(fieldCount);\n\n        for (var x = 0; x < fieldCount; ++x) {\n          fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n        }\n\n        if (isLastFieldIPv4Address) {\n          fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n        }\n\n        var allZeroFields = fields.reduce(function (acc, field, index) {\n          if (!field || field === \"0\") {\n            var lastLongest = acc[acc.length - 1];\n\n            if (lastLongest && lastLongest.index + lastLongest.length === index) {\n              lastLongest.length++;\n            } else {\n              acc.push({\n                index: index,\n                length: 1\n              });\n            }\n          }\n\n          return acc;\n        }, []);\n        var longestZeroFields = allZeroFields.sort(function (a, b) {\n          return b.length - a.length;\n        })[0];\n        var newHost = void 0;\n\n        if (longestZeroFields && longestZeroFields.length > 1) {\n          var newFirst = fields.slice(0, longestZeroFields.index);\n          var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n          newHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n        } else {\n          newHost = fields.join(\":\");\n        }\n\n        if (zone) {\n          newHost += \"%\" + zone;\n        }\n\n        return newHost;\n      } else {\n        return host;\n      }\n    }\n\n    var URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\n    var NO_MATCH_IS_UNDEFINED = \"\".match(/(){0}/)[1] === undefined;\n\n    function parse(uriString) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var components = {};\n      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n      if (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n      var matches = uriString.match(URI_PARSE);\n\n      if (matches) {\n        if (NO_MATCH_IS_UNDEFINED) {\n          //store each component\n          components.scheme = matches[1];\n          components.userinfo = matches[3];\n          components.host = matches[4];\n          components.port = parseInt(matches[5], 10);\n          components.path = matches[6] || \"\";\n          components.query = matches[7];\n          components.fragment = matches[8]; //fix port number\n\n          if (isNaN(components.port)) {\n            components.port = matches[5];\n          }\n        } else {\n          //IE FIX for improper RegExp matching\n          //store each component\n          components.scheme = matches[1] || undefined;\n          components.userinfo = uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined;\n          components.host = uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined;\n          components.port = parseInt(matches[5], 10);\n          components.path = matches[6] || \"\";\n          components.query = uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined;\n          components.fragment = uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined; //fix port number\n\n          if (isNaN(components.port)) {\n            components.port = uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined;\n          }\n        }\n\n        if (components.host) {\n          //normalize IP hosts\n          components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n        } //determine reference type\n\n\n        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n          components.reference = \"same-document\";\n        } else if (components.scheme === undefined) {\n          components.reference = \"relative\";\n        } else if (components.fragment === undefined) {\n          components.reference = \"absolute\";\n        } else {\n          components.reference = \"uri\";\n        } //check for reference errors\n\n\n        if (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n          components.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n        } //find scheme handler\n\n\n        var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()]; //check if scheme can't handle IRIs\n\n        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n          //if host component is a domain name\n          if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {\n            //convert Unicode IDN -> ASCII IDN\n            try {\n              components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n            } catch (e) {\n              components.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n            }\n          } //convert IRI -> URI\n\n\n          _normalizeComponentEncoding(components, URI_PROTOCOL);\n        } else {\n          //normalize encodings\n          _normalizeComponentEncoding(components, protocol);\n        } //perform scheme specific parsing\n\n\n        if (schemeHandler && schemeHandler.parse) {\n          schemeHandler.parse(components, options);\n        }\n      } else {\n        components.error = components.error || \"URI can not be parsed.\";\n      }\n\n      return components;\n    }\n\n    function _recomposeAuthority(components, options) {\n      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n      var uriTokens = [];\n\n      if (components.userinfo !== undefined) {\n        uriTokens.push(components.userinfo);\n        uriTokens.push(\"@\");\n      }\n\n      if (components.host !== undefined) {\n        //normalize IP hosts, add brackets and escape zone separator for IPv6\n        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {\n          return \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\";\n        }));\n      }\n\n      if (typeof components.port === \"number\") {\n        uriTokens.push(\":\");\n        uriTokens.push(components.port.toString(10));\n      }\n\n      return uriTokens.length ? uriTokens.join(\"\") : undefined;\n    }\n\n    var RDS1 = /^\\.\\.?\\//;\n    var RDS2 = /^\\/\\.(\\/|$)/;\n    var RDS3 = /^\\/\\.\\.(\\/|$)/;\n    var RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\n    function removeDotSegments(input) {\n      var output = [];\n\n      while (input.length) {\n        if (input.match(RDS1)) {\n          input = input.replace(RDS1, \"\");\n        } else if (input.match(RDS2)) {\n          input = input.replace(RDS2, \"/\");\n        } else if (input.match(RDS3)) {\n          input = input.replace(RDS3, \"/\");\n          output.pop();\n        } else if (input === \".\" || input === \"..\") {\n          input = \"\";\n        } else {\n          var im = input.match(RDS5);\n\n          if (im) {\n            var s = im[0];\n            input = input.slice(s.length);\n            output.push(s);\n          } else {\n            throw new Error(\"Unexpected dot segment condition\");\n          }\n        }\n      }\n\n      return output.join(\"\");\n    }\n\n    function serialize(components) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;\n      var uriTokens = []; //find scheme handler\n\n      var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()]; //perform scheme specific serialization\n\n      if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n      if (components.host) {\n        //if host component is an IPv6 address\n        if (protocol.IPV6ADDRESS.test(components.host)) ; //TODO: normalize IPv6 address as per RFC 5952\n        //if host component is a domain name\n        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {\n            //convert IDN via punycode\n            try {\n              components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);\n            } catch (e) {\n              components.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n            }\n          }\n      } //normalize encoding\n\n\n      _normalizeComponentEncoding(components, protocol);\n\n      if (options.reference !== \"suffix\" && components.scheme) {\n        uriTokens.push(components.scheme);\n        uriTokens.push(\":\");\n      }\n\n      var authority = _recomposeAuthority(components, options);\n\n      if (authority !== undefined) {\n        if (options.reference !== \"suffix\") {\n          uriTokens.push(\"//\");\n        }\n\n        uriTokens.push(authority);\n\n        if (components.path && components.path.charAt(0) !== \"/\") {\n          uriTokens.push(\"/\");\n        }\n      }\n\n      if (components.path !== undefined) {\n        var s = components.path;\n\n        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n          s = removeDotSegments(s);\n        }\n\n        if (authority === undefined) {\n          s = s.replace(/^\\/\\//, \"/%2F\"); //don't allow the path to start with \"//\"\n        }\n\n        uriTokens.push(s);\n      }\n\n      if (components.query !== undefined) {\n        uriTokens.push(\"?\");\n        uriTokens.push(components.query);\n      }\n\n      if (components.fragment !== undefined) {\n        uriTokens.push(\"#\");\n        uriTokens.push(components.fragment);\n      }\n\n      return uriTokens.join(\"\"); //merge tokens into a string\n    }\n\n    function resolveComponents(base, relative) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var skipNormalization = arguments[3];\n      var target = {};\n\n      if (!skipNormalization) {\n        base = parse(serialize(base, options), options); //normalize base components\n\n        relative = parse(serialize(relative, options), options); //normalize relative components\n      }\n\n      options = options || {};\n\n      if (!options.tolerant && relative.scheme) {\n        target.scheme = relative.scheme; //target.authority = relative.authority;\n\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n      } else {\n        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n          //target.authority = relative.authority;\n          target.userinfo = relative.userinfo;\n          target.host = relative.host;\n          target.port = relative.port;\n          target.path = removeDotSegments(relative.path || \"\");\n          target.query = relative.query;\n        } else {\n          if (!relative.path) {\n            target.path = base.path;\n\n            if (relative.query !== undefined) {\n              target.query = relative.query;\n            } else {\n              target.query = base.query;\n            }\n          } else {\n            if (relative.path.charAt(0) === \"/\") {\n              target.path = removeDotSegments(relative.path);\n            } else {\n              if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n                target.path = \"/\" + relative.path;\n              } else if (!base.path) {\n                target.path = relative.path;\n              } else {\n                target.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n              }\n\n              target.path = removeDotSegments(target.path);\n            }\n\n            target.query = relative.query;\n          } //target.authority = base.authority;\n\n\n          target.userinfo = base.userinfo;\n          target.host = base.host;\n          target.port = base.port;\n        }\n\n        target.scheme = base.scheme;\n      }\n\n      target.fragment = relative.fragment;\n      return target;\n    }\n\n    function resolve(baseURI, relativeURI, options) {\n      var schemelessOptions = assign({\n        scheme: 'null'\n      }, options);\n      return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n    }\n\n    function normalize(uri, options) {\n      if (typeof uri === \"string\") {\n        uri = serialize(parse(uri, options), options);\n      } else if (typeOf(uri) === \"object\") {\n        uri = parse(serialize(uri, options), options);\n      }\n\n      return uri;\n    }\n\n    function equal(uriA, uriB, options) {\n      if (typeof uriA === \"string\") {\n        uriA = serialize(parse(uriA, options), options);\n      } else if (typeOf(uriA) === \"object\") {\n        uriA = serialize(uriA, options);\n      }\n\n      if (typeof uriB === \"string\") {\n        uriB = serialize(parse(uriB, options), options);\n      } else if (typeOf(uriB) === \"object\") {\n        uriB = serialize(uriB, options);\n      }\n\n      return uriA === uriB;\n    }\n\n    function escapeComponent(str, options) {\n      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);\n    }\n\n    function unescapeComponent(str, options) {\n      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);\n    }\n\n    var handler = {\n      scheme: \"http\",\n      domainHost: true,\n      parse: function parse(components, options) {\n        //report missing host\n        if (!components.host) {\n          components.error = components.error || \"HTTP URIs must have a host.\";\n        }\n\n        return components;\n      },\n      serialize: function serialize(components, options) {\n        //normalize the default port\n        if (components.port === (String(components.scheme).toLowerCase() !== \"https\" ? 80 : 443) || components.port === \"\") {\n          components.port = undefined;\n        } //normalize the empty path\n\n\n        if (!components.path) {\n          components.path = \"/\";\n        } //NOTE: We do not parse query strings for HTTP URIs\n        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n        //and not the HTTP spec.\n\n\n        return components;\n      }\n    };\n    var handler$1 = {\n      scheme: \"https\",\n      domainHost: handler.domainHost,\n      parse: handler.parse,\n      serialize: handler.serialize\n    };\n    var O = {}; //RFC 3986\n\n    var UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" + \"]\";\n    var HEXDIG$$ = \"[0-9A-Fa-f]\"; //case-insensitive\n\n    var PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)); //expanded\n    //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n    //const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n    //const WSP$$ = \"[\\\\x20\\\\x09]\";\n    //const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n    //const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n    //const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n    //const WSP$$ = \"[\\\\x20\\\\x09]\";\n    //const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n    //const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n    //const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n    //const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\n\n    var ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n    var QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\n    var VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\n    var SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\n    var UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\n    var PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\n    var NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\n    var NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\n    var NOT_HFVALUE = NOT_HFNAME;\n\n    function decodeUnreserved(str) {\n      var decStr = pctDecChars(str);\n      return !decStr.match(UNRESERVED) ? str : decStr;\n    }\n\n    var handler$2 = {\n      scheme: \"mailto\",\n      parse: function parse$$1(components, options) {\n        var mailtoComponents = components;\n        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n        mailtoComponents.path = undefined;\n\n        if (mailtoComponents.query) {\n          var unknownHeaders = false;\n          var headers = {};\n          var hfields = mailtoComponents.query.split(\"&\");\n\n          for (var x = 0, xl = hfields.length; x < xl; ++x) {\n            var hfield = hfields[x].split(\"=\");\n\n            switch (hfield[0]) {\n              case \"to\":\n                var toAddrs = hfield[1].split(\",\");\n\n                for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {\n                  to.push(toAddrs[_x]);\n                }\n\n                break;\n\n              case \"subject\":\n                mailtoComponents.subject = unescapeComponent(hfield[1], options);\n                break;\n\n              case \"body\":\n                mailtoComponents.body = unescapeComponent(hfield[1], options);\n                break;\n\n              default:\n                unknownHeaders = true;\n                headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n                break;\n            }\n          }\n\n          if (unknownHeaders) mailtoComponents.headers = headers;\n        }\n\n        mailtoComponents.query = undefined;\n\n        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {\n          var addr = to[_x2].split(\"@\");\n\n          addr[0] = unescapeComponent(addr[0]);\n\n          if (!options.unicodeSupport) {\n            //convert Unicode IDN -> ASCII IDN\n            try {\n              addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n            } catch (e) {\n              mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n            }\n          } else {\n            addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n          }\n\n          to[_x2] = addr.join(\"@\");\n        }\n\n        return mailtoComponents;\n      },\n      serialize: function serialize$$1(mailtoComponents, options) {\n        var components = mailtoComponents;\n        var to = toArray(mailtoComponents.to);\n\n        if (to) {\n          for (var x = 0, xl = to.length; x < xl; ++x) {\n            var toAddr = String(to[x]);\n            var atIdx = toAddr.lastIndexOf(\"@\");\n            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n            var domain = toAddr.slice(atIdx + 1); //convert IDN via punycode\n\n            try {\n              domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n            } catch (e) {\n              components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n            }\n\n            to[x] = localPart + \"@\" + domain;\n          }\n\n          components.path = to.join(\",\");\n        }\n\n        var headers = mailtoComponents.headers = mailtoComponents.headers || {};\n        if (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n        if (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n        var fields = [];\n\n        for (var name in headers) {\n          if (headers[name] !== O[name]) {\n            fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n          }\n        }\n\n        if (fields.length) {\n          components.query = fields.join(\"&\");\n        }\n\n        return components;\n      }\n    };\n    var URN_PARSE = /^([^\\:]+)\\:(.*)/; //RFC 2141\n\n    var handler$3 = {\n      scheme: \"urn\",\n      parse: function parse$$1(components, options) {\n        var matches = components.path && components.path.match(URN_PARSE);\n        var urnComponents = components;\n\n        if (matches) {\n          var scheme = options.scheme || urnComponents.scheme || \"urn\";\n          var nid = matches[1].toLowerCase();\n          var nss = matches[2];\n          var urnScheme = scheme + \":\" + (options.nid || nid);\n          var schemeHandler = SCHEMES[urnScheme];\n          urnComponents.nid = nid;\n          urnComponents.nss = nss;\n          urnComponents.path = undefined;\n\n          if (schemeHandler) {\n            urnComponents = schemeHandler.parse(urnComponents, options);\n          }\n        } else {\n          urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n        }\n\n        return urnComponents;\n      },\n      serialize: function serialize$$1(urnComponents, options) {\n        var scheme = options.scheme || urnComponents.scheme || \"urn\";\n        var nid = urnComponents.nid;\n        var urnScheme = scheme + \":\" + (options.nid || nid);\n        var schemeHandler = SCHEMES[urnScheme];\n\n        if (schemeHandler) {\n          urnComponents = schemeHandler.serialize(urnComponents, options);\n        }\n\n        var uriComponents = urnComponents;\n        var nss = urnComponents.nss;\n        uriComponents.path = (nid || options.nid) + \":\" + nss;\n        return uriComponents;\n      }\n    };\n    var UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/; //RFC 4122\n\n    var handler$4 = {\n      scheme: \"urn:uuid\",\n      parse: function parse(urnComponents, options) {\n        var uuidComponents = urnComponents;\n        uuidComponents.uuid = uuidComponents.nss;\n        uuidComponents.nss = undefined;\n\n        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n          uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n        }\n\n        return uuidComponents;\n      },\n      serialize: function serialize(uuidComponents, options) {\n        var urnComponents = uuidComponents; //normalize UUID\n\n        urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n        return urnComponents;\n      }\n    };\n    SCHEMES[handler.scheme] = handler;\n    SCHEMES[handler$1.scheme] = handler$1;\n    SCHEMES[handler$2.scheme] = handler$2;\n    SCHEMES[handler$3.scheme] = handler$3;\n    SCHEMES[handler$4.scheme] = handler$4;\n    exports.SCHEMES = SCHEMES;\n    exports.pctEncChar = pctEncChar;\n    exports.pctDecChars = pctDecChars;\n    exports.parse = parse;\n    exports.removeDotSegments = removeDotSegments;\n    exports.serialize = serialize;\n    exports.resolveComponents = resolveComponents;\n    exports.resolve = resolve;\n    exports.normalize = normalize;\n    exports.equal = equal;\n    exports.escapeComponent = escapeComponent;\n    exports.unescapeComponent = unescapeComponent;\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n  });\n});\nunwrapExports(uri_all);\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a),\n        arrB = isArray(b),\n        i,\n        length,\n        key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!equal(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n    var dateA = a instanceof Date,\n        dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    var regexpA = a instanceof RegExp,\n        regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    var keys = keyList(a);\n    length = keys.length;\n    if (length !== keyList(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!hasProp.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a !== a && b !== b;\n}; // https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\n\n\nvar ucs2length = function ucs2length(str) {\n  var length = 0,\n      len = str.length,\n      pos = 0,\n      value;\n\n  while (pos < len) {\n    length++;\n    value = str.charCodeAt(pos++);\n\n    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {\n      // high surrogate, and there is a next character\n      value = str.charCodeAt(pos);\n      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate\n    }\n  }\n\n  return length;\n};\n\nvar util = {\n  copy: copy,\n  checkDataType: checkDataType,\n  checkDataTypes: checkDataTypes,\n  coerceToTypes: coerceToTypes,\n  toHash: toHash,\n  getProperty: getProperty,\n  escapeQuotes: escapeQuotes,\n  equal: fastDeepEqual,\n  ucs2length: ucs2length,\n  varOccurences: varOccurences,\n  varReplace: varReplace,\n  cleanUpCode: cleanUpCode,\n  finalCleanUpCode: finalCleanUpCode,\n  schemaHasRules: schemaHasRules,\n  schemaHasRulesExcept: schemaHasRulesExcept,\n  schemaUnknownRules: schemaUnknownRules,\n  toQuotedString: toQuotedString,\n  getPathExpr: getPathExpr,\n  getPath: getPath,\n  getData: getData,\n  unescapeFragment: unescapeFragment,\n  unescapeJsonPointer: unescapeJsonPointer,\n  escapeFragment: escapeFragment,\n  escapeJsonPointer: escapeJsonPointer\n};\n\nfunction copy(o, to) {\n  to = to || {};\n\n  for (var key in o) {\n    to[key] = o[key];\n  }\n\n  return to;\n}\n\nfunction checkDataType(dataType, data, negate) {\n  var EQUAL = negate ? ' !== ' : ' === ',\n      AND = negate ? ' || ' : ' && ',\n      OK = negate ? '!' : '',\n      NOT = negate ? '' : '!';\n\n  switch (dataType) {\n    case 'null':\n      return data + EQUAL + 'null';\n\n    case 'array':\n      return OK + 'Array.isArray(' + data + ')';\n\n    case 'object':\n      return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '\"object\"' + AND + NOT + 'Array.isArray(' + data + '))';\n\n    case 'integer':\n      return '(typeof ' + data + EQUAL + '\"number\"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + ')';\n\n    default:\n      return 'typeof ' + data + EQUAL + '\"' + dataType + '\"';\n  }\n}\n\nfunction checkDataTypes(dataTypes, data) {\n  switch (dataTypes.length) {\n    case 1:\n      return checkDataType(dataTypes[0], data, true);\n\n    default:\n      var code = '';\n      var types = toHash(dataTypes);\n\n      if (types.array && types.object) {\n        code = types.null ? '(' : '(!' + data + ' || ';\n        code += 'typeof ' + data + ' !== \"object\")';\n        delete types.null;\n        delete types.array;\n        delete types.object;\n      }\n\n      if (types.number) delete types.integer;\n\n      for (var t in types) {\n        code += (code ? ' && ' : '') + checkDataType(t, data, true);\n      }\n\n      return code;\n  }\n}\n\nvar COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);\n\nfunction coerceToTypes(optionCoerceTypes, dataTypes) {\n  if (Array.isArray(dataTypes)) {\n    var types = [];\n\n    for (var i = 0; i < dataTypes.length; i++) {\n      var t = dataTypes[i];\n      if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;\n    }\n\n    if (types.length) return types;\n  } else if (COERCE_TO_TYPES[dataTypes]) {\n    return [dataTypes];\n  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {\n    return ['array'];\n  }\n}\n\nfunction toHash(arr) {\n  var hash = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    hash[arr[i]] = true;\n  }\n\n  return hash;\n}\n\nvar IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nvar SINGLE_QUOTE = /'|\\\\/g;\n\nfunction getProperty(key) {\n  return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : \"['\" + escapeQuotes(key) + \"']\";\n}\n\nfunction escapeQuotes(str) {\n  return str.replace(SINGLE_QUOTE, '\\\\$&').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\f/g, '\\\\f').replace(/\\t/g, '\\\\t');\n}\n\nfunction varOccurences(str, dataVar) {\n  dataVar += '[^0-9]';\n  var matches = str.match(new RegExp(dataVar, 'g'));\n  return matches ? matches.length : 0;\n}\n\nfunction varReplace(str, dataVar, expr) {\n  dataVar += '([^0-9])';\n  expr = expr.replace(/\\$/g, '$$$$');\n  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');\n}\n\nvar EMPTY_ELSE = /else\\s*{\\s*}/g,\n    EMPTY_IF_NO_ELSE = /if\\s*\\([^)]+\\)\\s*\\{\\s*\\}(?!\\s*else)/g,\n    EMPTY_IF_WITH_ELSE = /if\\s*\\(([^)]+)\\)\\s*\\{\\s*\\}\\s*else(?!\\s*if)/g;\n\nfunction cleanUpCode(out) {\n  return out.replace(EMPTY_ELSE, '').replace(EMPTY_IF_NO_ELSE, '').replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');\n}\n\nvar ERRORS_REGEXP = /[^v.]errors/g,\n    REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,\n    REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g,\n    RETURN_VALID = 'return errors === 0;',\n    RETURN_TRUE = 'validate.errors = null; return true;',\n    RETURN_ASYNC = /if \\(errors === 0\\) return data;\\s*else throw new ValidationError\\(vErrors\\);/,\n    RETURN_DATA_ASYNC = 'return data;',\n    ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,\n    REMOVE_ROOTDATA = /if \\(rootData === undefined\\) rootData = data;/;\n\nfunction finalCleanUpCode(out, async) {\n  var matches = out.match(ERRORS_REGEXP);\n\n  if (matches && matches.length == 2) {\n    out = async ? out.replace(REMOVE_ERRORS_ASYNC, '').replace(RETURN_ASYNC, RETURN_DATA_ASYNC) : out.replace(REMOVE_ERRORS, '').replace(RETURN_VALID, RETURN_TRUE);\n  }\n\n  matches = out.match(ROOTDATA_REGEXP);\n  if (!matches || matches.length !== 3) return out;\n  return out.replace(REMOVE_ROOTDATA, '');\n}\n\nfunction schemaHasRules(schema, rules) {\n  if (typeof schema == 'boolean') return !schema;\n\n  for (var key in schema) {\n    if (rules[key]) return true;\n  }\n}\n\nfunction schemaHasRulesExcept(schema, rules, exceptKeyword) {\n  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';\n\n  for (var key in schema) {\n    if (key != exceptKeyword && rules[key]) return true;\n  }\n}\n\nfunction schemaUnknownRules(schema, rules) {\n  if (typeof schema == 'boolean') return;\n\n  for (var key in schema) {\n    if (!rules[key]) return key;\n  }\n}\n\nfunction toQuotedString(str) {\n  return '\\'' + escapeQuotes(str) + '\\'';\n}\n\nfunction getPathExpr(currentPath, expr, jsonPointers, isNumber) {\n  var path = jsonPointers // false by default\n  ? '\\'/\\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \\'~0\\').replace(/\\\\//g, \\'~1\\')') : isNumber ? '\\'[\\' + ' + expr + ' + \\']\\'' : '\\'[\\\\\\'\\' + ' + expr + ' + \\'\\\\\\']\\'';\n  return joinPaths(currentPath, path);\n}\n\nfunction getPath(currentPath, prop, jsonPointers) {\n  var path = jsonPointers // false by default\n  ? toQuotedString('/' + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));\n  return joinPaths(currentPath, path);\n}\n\nvar JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nvar RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\n\nfunction getData($data, lvl, paths) {\n  var up, jsonPointer, data, matches;\n  if ($data === '') return 'rootData';\n\n  if ($data[0] == '/') {\n    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);\n    jsonPointer = $data;\n    data = 'rootData';\n  } else {\n    matches = $data.match(RELATIVE_JSON_POINTER);\n    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);\n    up = +matches[1];\n    jsonPointer = matches[2];\n\n    if (jsonPointer == '#') {\n      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);\n      return paths[lvl - up];\n    }\n\n    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);\n    data = 'data' + (lvl - up || '');\n    if (!jsonPointer) return data;\n  }\n\n  var expr = data;\n  var segments = jsonPointer.split('/');\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n\n    if (segment) {\n      data += getProperty(unescapeJsonPointer(segment));\n      expr += ' && ' + data;\n    }\n  }\n\n  return expr;\n}\n\nfunction joinPaths(a, b) {\n  if (a == '\"\"') return b;\n  return (a + ' + ' + b).replace(/' \\+ '/g, '');\n}\n\nfunction unescapeFragment(str) {\n  return unescapeJsonPointer(decodeURIComponent(str));\n}\n\nfunction escapeFragment(str) {\n  return encodeURIComponent(escapeJsonPointer(str));\n}\n\nfunction escapeJsonPointer(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n\nvar schema_obj = SchemaObject;\n\nfunction SchemaObject(obj) {\n  util.copy(obj, this);\n}\n\nvar jsonSchemaTraverse = createCommonjsModule(function (module) {\n  var traverse = module.exports = function (schema, opts, cb) {\n    // Legacy support for v0.3.1 and earlier.\n    if (typeof opts == 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    cb = opts.cb || cb;\n    var pre = typeof cb == 'function' ? cb : cb.pre || function () {};\n\n    var post = cb.post || function () {};\n\n    _traverse(opts, pre, post, schema, '', schema);\n  };\n\n  traverse.keywords = {\n    additionalItems: true,\n    items: true,\n    contains: true,\n    additionalProperties: true,\n    propertyNames: true,\n    not: true\n  };\n  traverse.arrayKeywords = {\n    items: true,\n    allOf: true,\n    anyOf: true,\n    oneOf: true\n  };\n  traverse.propsKeywords = {\n    definitions: true,\n    properties: true,\n    patternProperties: true,\n    dependencies: true\n  };\n  traverse.skipKeywords = {\n    default: true,\n    enum: true,\n    const: true,\n    required: true,\n    maximum: true,\n    minimum: true,\n    exclusiveMaximum: true,\n    exclusiveMinimum: true,\n    multipleOf: true,\n    maxLength: true,\n    minLength: true,\n    pattern: true,\n    format: true,\n    maxItems: true,\n    minItems: true,\n    uniqueItems: true,\n    maxProperties: true,\n    minProperties: true\n  };\n\n  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n\n      for (var key in schema) {\n        var sch = schema[key];\n\n        if (Array.isArray(sch)) {\n          if (key in traverse.arrayKeywords) {\n            for (var i = 0; i < sch.length; i++) {\n              _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n            }\n          }\n        } else if (key in traverse.propsKeywords) {\n          if (sch && typeof sch == 'object') {\n            for (var prop in sch) {\n              _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n            }\n          }\n        } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {\n          _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n        }\n      }\n\n      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    }\n  }\n\n  function escapeJsonPtr(str) {\n    return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n  }\n});\nvar resolve_1 = resolve;\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\n\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n\n  if (refVal instanceof schema_obj) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof schema_obj) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema !== undefined) {\n    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\n\n\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = uri_all.parse(ref),\n      refPath = _getFullPath(p),\n      baseId = getFullPath(this._getId(root.schema));\n\n  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof schema_obj) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n\n      if (refVal instanceof schema_obj) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref)) return {\n          schema: refVal,\n          root: root,\n          baseId: baseId\n        };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n\n    if (!root.schema) return;\n    baseId = getFullPath(this._getId(root.schema));\n  }\n\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n/* @this Ajv */\n\n\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n\n    var id = this._getId(schema);\n\n    if (id) baseId = resolveUrl(baseId, id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\n\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.fragment = parsedRef.fragment || '';\n  if (parsedRef.fragment.slice(0, 1) != '/') return;\n  var parts = parsedRef.fragment.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (schema === undefined) break;\n      var id;\n\n      if (!PREVENT_SCOPE_CHANGE[part]) {\n        id = this._getId(schema);\n        if (id) baseId = resolveUrl(baseId, id);\n\n        if (schema.$ref) {\n          var $ref = resolveUrl(baseId, schema.$ref);\n          var res = resolveSchema.call(this, root, $ref);\n\n          if (res) {\n            schema = res.schema;\n            root = res.root;\n            baseId = res.baseId;\n          }\n        }\n      }\n    }\n  }\n\n  if (schema !== undefined && schema !== root.schema) return {\n    schema: schema,\n    root: root,\n    baseId: baseId\n  };\n}\n\nvar SIMPLE_INLINED = util.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);\n\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;\n}\n\nfunction checkNoRef(schema) {\n  var item;\n\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction countKeys(schema) {\n  var count = 0,\n      item;\n\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n\n  return count;\n}\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = uri_all.parse(id);\n  return _getFullPath(p);\n}\n\nfunction _getFullPath(p) {\n  return uri_all.serialize(p).split('#')[0] + '#';\n}\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\n\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return uri_all.resolve(baseId, id);\n}\n/* @this Ajv */\n\n\nfunction resolveIds(schema) {\n  var schemaId = normalizeId(this._getId(schema));\n  var baseIds = {\n    '': schemaId\n  };\n  var fullPaths = {\n    '': getFullPath(schemaId, false)\n  };\n  var localRefs = {};\n  var self = this;\n  jsonSchemaTraverse(schema, {\n    allKeys: true\n  }, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (jsonPtr === '') return;\n\n    var id = self._getId(sch);\n\n    var baseId = baseIds[parentJsonPtr];\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n    if (keyIndex !== undefined) fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n\n    if (typeof id == 'string') {\n      id = baseId = normalizeId(baseId ? uri_all.resolve(baseId, id) : id);\n      var refVal = self._refs[id];\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\n\n      if (refVal && refVal.schema) {\n        if (!fastDeepEqual(sch, refVal.schema)) throw new Error('id \"' + id + '\" resolves to more than one schema');\n      } else if (id != normalizeId(fullPath)) {\n        if (id[0] == '#') {\n          if (localRefs[id] && !fastDeepEqual(sch, localRefs[id])) throw new Error('id \"' + id + '\" resolves to more than one schema');\n          localRefs[id] = sch;\n        } else {\n          self._refs[id] = fullPath;\n        }\n      }\n    }\n\n    baseIds[jsonPtr] = baseId;\n    fullPaths[jsonPtr] = fullPath;\n  });\n  return localRefs;\n}\n\nvar error_classes = {\n  Validation: errorSubclass(ValidationError),\n  MissingRef: errorSubclass(MissingRefError)\n};\n\nfunction ValidationError(errors) {\n  this.message = 'validation failed';\n  this.errors = errors;\n  this.ajv = this.validation = true;\n}\n\nMissingRefError.message = function (baseId, ref) {\n  return 'can\\'t resolve reference ' + ref + ' from id ' + baseId;\n};\n\nfunction MissingRefError(baseId, ref, message) {\n  this.message = message || MissingRefError.message(baseId, ref);\n  this.missingRef = resolve_1.url(baseId, ref);\n  this.missingSchema = resolve_1.normalizeId(resolve_1.fullPath(this.missingRef));\n}\n\nfunction errorSubclass(Subclass) {\n  Subclass.prototype = Object.create(Error.prototype);\n  Subclass.prototype.constructor = Subclass;\n  return Subclass;\n}\n\nvar fastJsonStableStringify = function fastJsonStableStringify(data, opts) {\n  if (!opts) opts = {};\n  if (typeof opts === 'function') opts = {\n    cmp: opts\n  };\n  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n\n  var cmp = opts.cmp && function (f) {\n    return function (node) {\n      return function (a, b) {\n        var aobj = {\n          key: a,\n          value: node[a]\n        };\n        var bobj = {\n          key: b,\n          value: node[b]\n        };\n        return f(aobj, bobj);\n      };\n    };\n  }(opts.cmp);\n\n  var seen = [];\n  return function stringify(node) {\n    if (node && node.toJSON && typeof node.toJSON === 'function') {\n      node = node.toJSON();\n    }\n\n    if (node === undefined) return;\n    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n    if (typeof node !== 'object') return JSON.stringify(node);\n    var i, out;\n\n    if (Array.isArray(node)) {\n      out = '[';\n\n      for (i = 0; i < node.length; i++) {\n        if (i) out += ',';\n        out += stringify(node[i]) || 'null';\n      }\n\n      return out + ']';\n    }\n\n    if (node === null) return 'null';\n\n    if (seen.indexOf(node) !== -1) {\n      if (cycles) return JSON.stringify('__cycle__');\n      throw new TypeError('Converting circular structure to JSON');\n    }\n\n    var seenIndex = seen.push(node) - 1;\n    var keys = Object.keys(node).sort(cmp && cmp(node));\n    out = '';\n\n    for (i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = stringify(node[key]);\n      if (!value) continue;\n      if (out) out += ',';\n      out += JSON.stringify(key) + ':' + value;\n    }\n\n    seen.splice(seenIndex, 1);\n    return '{' + out + '}';\n  }(data);\n};\n\nvar validate$1 = function generate_validate(it, $keyword, $ruleType) {\n  var out = '';\n\n  var $async = it.schema.$async === true,\n      $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n      $id = it.self._getId(it.schema);\n\n  if (it.opts.strictKeywords) {\n    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n\n    if ($unknownKwd) {\n      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);else throw new Error($keywordsMsg);\n    }\n  }\n\n  if (it.isTop) {\n    out += ' var validate = ';\n\n    if ($async) {\n      it.async = true;\n      out += 'async ';\n    }\n\n    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n    }\n  }\n\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n    var $keyword = 'false schema';\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = 'data' + ($dataLvl || '');\n    var $valid = 'valid' + $lvl;\n\n    if (it.schema === false) {\n      if (it.isTop) {\n        $breakOnError = true;\n      } else {\n        out += ' var ' + $valid + ' = false; ';\n      }\n\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = '';\n      /* istanbul ignore else */\n\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'boolean schema is false\\' ';\n        }\n\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n\n      var __err = out;\n      out = $$outStack.pop();\n\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + __err + ']); ';\n        } else {\n          out += ' validate.errors = [' + __err + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n    } else {\n      if (it.isTop) {\n        if ($async) {\n          out += ' return data; ';\n        } else {\n          out += ' validate.errors = null; return true; ';\n        }\n      } else {\n        out += ' var ' + $valid + ' = true; ';\n      }\n    }\n\n    if (it.isTop) {\n      out += ' }; return validate; ';\n    }\n\n    return out;\n  }\n\n  if (it.isTop) {\n    var $top = it.isTop,\n        $lvl = it.level = 0,\n        $dataLvl = it.dataLevel = 0,\n        $data = 'data';\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n    it.baseId = it.baseId || it.rootId;\n    delete it.isTop;\n    it.dataPathArr = [undefined];\n\n    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n      var $defaultMsg = 'default is ignored in the schema root';\n      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);\n    }\n\n    out += ' var vErrors = null; ';\n    out += ' var errors = 0;     ';\n    out += ' if (rootData === undefined) rootData = data; ';\n  } else {\n    var $lvl = it.level,\n        $dataLvl = it.dataLevel,\n        $data = 'data' + ($dataLvl || '');\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n    if ($async && !it.async) throw new Error('async schema in sync schema');\n    out += ' var errs_' + $lvl + ' = errors;';\n  }\n\n  var $valid = 'valid' + $lvl,\n      $breakOnError = !it.opts.allErrors,\n      $closingBraces1 = '',\n      $closingBraces2 = '';\n  var $errorKeyword;\n  var $typeSchema = it.schema.type,\n      $typeIsArray = Array.isArray($typeSchema);\n\n  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n    if ($typeIsArray) {\n      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n    } else if ($typeSchema != 'null') {\n      $typeSchema = [$typeSchema, 'null'];\n      $typeIsArray = true;\n    }\n  }\n\n  if ($typeIsArray && $typeSchema.length == 1) {\n    $typeSchema = $typeSchema[0];\n    $typeIsArray = false;\n  }\n\n  if (it.schema.$ref && $refKeywords) {\n    if (it.opts.extendRefs == 'fail') {\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n    } else if (it.opts.extendRefs !== true) {\n      $refKeywords = false;\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n    }\n  }\n\n  if (it.schema.$comment && it.opts.$comment) {\n    out += ' ' + it.RULES.all.$comment.code(it, '$comment');\n  }\n\n  if ($typeSchema) {\n    if (it.opts.coerceTypes) {\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n    }\n\n    var $rulesGroup = it.RULES.types[$typeSchema];\n\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {\n      var $schemaPath = it.schemaPath + '.type',\n          $errSchemaPath = it.errSchemaPath + '/type';\n      var $schemaPath = it.schemaPath + '.type',\n          $errSchemaPath = it.errSchemaPath + '/type',\n          $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n      out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') { ';\n\n      if ($coerceToTypes) {\n        var $dataType = 'dataType' + $lvl,\n            $coerced = 'coerced' + $lvl;\n        out += ' var ' + $dataType + ' = typeof ' + $data + '; ';\n\n        if (it.opts.coerceTypes == 'array') {\n          out += ' if (' + $dataType + ' == \\'object\\' && Array.isArray(' + $data + ')) ' + $dataType + ' = \\'array\\'; ';\n        }\n\n        out += ' var ' + $coerced + ' = undefined; ';\n        var $bracesCoercion = '';\n        var arr1 = $coerceToTypes;\n\n        if (arr1) {\n          var $type,\n              $i = -1,\n              l1 = arr1.length - 1;\n\n          while ($i < l1) {\n            $type = arr1[$i += 1];\n\n            if ($i) {\n              out += ' if (' + $coerced + ' === undefined) { ';\n              $bracesCoercion += '}';\n            }\n\n            if (it.opts.coerceTypes == 'array' && $type != 'array') {\n              out += ' if (' + $dataType + ' == \\'array\\' && ' + $data + '.length == 1) { ' + $coerced + ' = ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + ';  } ';\n            }\n\n            if ($type == 'string') {\n              out += ' if (' + $dataType + ' == \\'number\\' || ' + $dataType + ' == \\'boolean\\') ' + $coerced + ' = \\'\\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \\'\\'; ';\n            } else if ($type == 'number' || $type == 'integer') {\n              out += ' if (' + $dataType + ' == \\'boolean\\' || ' + $data + ' === null || (' + $dataType + ' == \\'string\\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';\n\n              if ($type == 'integer') {\n                out += ' && !(' + $data + ' % 1)';\n              }\n\n              out += ')) ' + $coerced + ' = +' + $data + '; ';\n            } else if ($type == 'boolean') {\n              out += ' if (' + $data + ' === \\'false\\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \\'true\\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';\n            } else if ($type == 'null') {\n              out += ' if (' + $data + ' === \\'\\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n              out += ' if (' + $dataType + ' == \\'string\\' || ' + $dataType + ' == \\'number\\' || ' + $dataType + ' == \\'boolean\\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';\n            }\n          }\n        }\n\n        out += ' ' + $bracesCoercion + ' if (' + $coerced + ' === undefined) {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = '';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \\'';\n\n          if ($typeIsArray) {\n            out += '' + $typeSchema.join(\",\");\n          } else {\n            out += '' + $typeSchema;\n          }\n\n          out += '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n\n            if ($typeIsArray) {\n              out += '' + $typeSchema.join(\",\");\n            } else {\n              out += '' + $typeSchema;\n            }\n\n            out += '\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        var __err = out;\n        out = $$outStack.pop();\n\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n\n        out += ' } else {  ';\n        var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',\n            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n        out += ' ' + $data + ' = ' + $coerced + '; ';\n\n        if (!$dataLvl) {\n          out += 'if (' + $parentData + ' !== undefined)';\n        }\n\n        out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } ';\n      } else {\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = '';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \\'';\n\n          if ($typeIsArray) {\n            out += '' + $typeSchema.join(\",\");\n          } else {\n            out += '' + $typeSchema;\n          }\n\n          out += '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n\n            if ($typeIsArray) {\n              out += '' + $typeSchema.join(\",\");\n            } else {\n              out += '' + $typeSchema;\n            }\n\n            out += '\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        var __err = out;\n        out = $$outStack.pop();\n\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      }\n\n      out += ' } ';\n    }\n  }\n\n  if (it.schema.$ref && !$refKeywords) {\n    out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';\n\n    if ($breakOnError) {\n      out += ' } if (errors === ';\n\n      if ($top) {\n        out += '0';\n      } else {\n        out += 'errs_' + $lvl;\n      }\n\n      out += ') { ';\n      $closingBraces2 += '}';\n    }\n  } else {\n    var arr2 = it.RULES;\n\n    if (arr2) {\n      var $rulesGroup,\n          i2 = -1,\n          l2 = arr2.length - 1;\n\n      while (i2 < l2) {\n        $rulesGroup = arr2[i2 += 1];\n\n        if ($shouldUseGroup($rulesGroup)) {\n          if ($rulesGroup.type) {\n            out += ' if (' + it.util.checkDataType($rulesGroup.type, $data) + ') { ';\n          }\n\n          if (it.opts.useDefaults) {\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\n              var $schema = it.schema.properties,\n                  $schemaKeys = Object.keys($schema);\n              var arr3 = $schemaKeys;\n\n              if (arr3) {\n                var $propertyKey,\n                    i3 = -1,\n                    l3 = arr3.length - 1;\n\n                while (i3 < l3) {\n                  $propertyKey = arr3[i3 += 1];\n                  var $sch = $schema[$propertyKey];\n\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + it.util.getProperty($propertyKey);\n\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + $passData + ' === undefined ';\n\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \\'\\' ';\n                      }\n\n                      out += ' ) ' + $passData + ' = ';\n\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + it.useDefault($sch.default) + ' ';\n                      } else {\n                        out += ' ' + JSON.stringify($sch.default) + ' ';\n                      }\n\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n              var arr4 = it.schema.items;\n\n              if (arr4) {\n                var $sch,\n                    $i = -1,\n                    l4 = arr4.length - 1;\n\n                while ($i < l4) {\n                  $sch = arr4[$i += 1];\n\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + '[' + $i + ']';\n\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + $passData + ' === undefined ';\n\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \\'\\' ';\n                      }\n\n                      out += ' ) ' + $passData + ' = ';\n\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + it.useDefault($sch.default) + ' ';\n                      } else {\n                        out += ' ' + JSON.stringify($sch.default) + ' ';\n                      }\n\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          var arr5 = $rulesGroup.rules;\n\n          if (arr5) {\n            var $rule,\n                i5 = -1,\n                l5 = arr5.length - 1;\n\n            while (i5 < l5) {\n              $rule = arr5[i5 += 1];\n\n              if ($shouldUseRule($rule)) {\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n\n                if ($code) {\n                  out += ' ' + $code + ' ';\n\n                  if ($breakOnError) {\n                    $closingBraces1 += '}';\n                  }\n                }\n              }\n            }\n          }\n\n          if ($breakOnError) {\n            out += ' ' + $closingBraces1 + ' ';\n            $closingBraces1 = '';\n          }\n\n          if ($rulesGroup.type) {\n            out += ' } ';\n\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n              out += ' else { ';\n              var $schemaPath = it.schemaPath + '.type',\n                  $errSchemaPath = it.errSchemaPath + '/type';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \\'';\n\n                if ($typeIsArray) {\n                  out += '' + $typeSchema.join(\",\");\n                } else {\n                  out += '' + $typeSchema;\n                }\n\n                out += '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should be ';\n\n                  if ($typeIsArray) {\n                    out += '' + $typeSchema.join(\",\");\n                  } else {\n                    out += '' + $typeSchema;\n                  }\n\n                  out += '\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              out += ' } ';\n            }\n          }\n\n          if ($breakOnError) {\n            out += ' if (errors === ';\n\n            if ($top) {\n              out += '0';\n            } else {\n              out += 'errs_' + $lvl;\n            }\n\n            out += ') { ';\n            $closingBraces2 += '}';\n          }\n        }\n      }\n    }\n  }\n\n  if ($breakOnError) {\n    out += ' ' + $closingBraces2 + ' ';\n  }\n\n  if ($top) {\n    if ($async) {\n      out += ' if (errors === 0) return data;           ';\n      out += ' else throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; ';\n      out += ' return errors === 0;       ';\n    }\n\n    out += ' }; return validate;';\n  } else {\n    out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';\n  }\n\n  out = it.util.cleanUpCode(out);\n\n  if ($top) {\n    out = it.util.finalCleanUpCode(out, $async);\n  }\n\n  function $shouldUseGroup($rulesGroup) {\n    var rules = $rulesGroup.rules;\n\n    for (var i = 0; i < rules.length; i++) {\n      if ($shouldUseRule(rules[i])) return true;\n    }\n  }\n\n  function $shouldUseRule($rule) {\n    return it.schema[$rule.keyword] !== undefined || $rule.implements && $ruleImplementsSomeKeyword($rule);\n  }\n\n  function $ruleImplementsSomeKeyword($rule) {\n    var impl = $rule.implements;\n\n    for (var i = 0; i < impl.length; i++) {\n      if (it.schema[impl[i]] !== undefined) return true;\n    }\n  }\n\n  return out;\n};\n/**\n * Functions below are used inside compiled validations function\n */\n\n\nvar ucs2length$1 = util.ucs2length; // this error is thrown by async schemas to return validation errors via exception\n\nvar ValidationError$1 = error_classes.Validation;\nvar compile_1 = compile;\n/**\n * Compiles schema to validation function\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Object} root object with information about the root schema for this schema\n * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution\n * @param  {String} baseId base ID for IDs in the schema\n * @return {Function} validation function\n */\n\nfunction compile(schema, root, localRefs, baseId) {\n  /* jshint validthis: true, evil: true */\n\n  /* eslint no-shadow: 0 */\n  var self = this,\n      opts = this._opts,\n      refVal = [undefined],\n      refs = {},\n      patterns = [],\n      patternsHash = {},\n      defaults = [],\n      defaultsHash = {},\n      customRules = [];\n  root = root || {\n    schema: schema,\n    refVal: refVal,\n    refs: refs\n  };\n  var c = checkCompiling.call(this, schema, root, baseId);\n  var compilation = this._compilations[c.index];\n  if (c.compiling) return compilation.callValidate = callValidate;\n  var formats = this._formats;\n  var RULES = this.RULES;\n\n  try {\n    var v = localCompile(schema, root, localRefs, baseId);\n    compilation.validate = v;\n    var cv = compilation.callValidate;\n\n    if (cv) {\n      cv.schema = v.schema;\n      cv.errors = null;\n      cv.refs = v.refs;\n      cv.refVal = v.refVal;\n      cv.root = v.root;\n      cv.$async = v.$async;\n      if (opts.sourceCode) cv.source = v.source;\n    }\n\n    return v;\n  } finally {\n    endCompiling.call(this, schema, root, baseId);\n  }\n  /* @this   {*} - custom context, see passContext option */\n\n\n  function callValidate() {\n    /* jshint validthis: true */\n    var validate = compilation.validate;\n    var result = validate.apply(this, arguments);\n    callValidate.errors = validate.errors;\n    return result;\n  }\n\n  function localCompile(_schema, _root, localRefs, baseId) {\n    var isRoot = !_root || _root && _root.schema == _schema;\n    if (_root.schema != root.schema) return compile.call(self, _schema, _root, localRefs, baseId);\n    var $async = _schema.$async === true;\n    var sourceCode = validate$1({\n      isTop: true,\n      schema: _schema,\n      isRoot: isRoot,\n      baseId: baseId,\n      root: _root,\n      schemaPath: '',\n      errSchemaPath: '#',\n      errorPath: '\"\"',\n      MissingRefError: error_classes.MissingRef,\n      RULES: RULES,\n      validate: validate$1,\n      util: util,\n      resolve: resolve_1,\n      resolveRef: resolveRef,\n      usePattern: usePattern,\n      useDefault: useDefault,\n      useCustomRule: useCustomRule,\n      opts: opts,\n      formats: formats,\n      logger: self.logger,\n      self: self\n    });\n    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;\n    if (opts.processCode) sourceCode = opts.processCode(sourceCode); // console.log('\\n\\n\\n *** \\n', JSON.stringify(sourceCode));\n\n    var validate;\n\n    try {\n      var makeValidate = new Function('self', 'RULES', 'formats', 'root', 'refVal', 'defaults', 'customRules', 'equal', 'ucs2length', 'ValidationError', sourceCode);\n      validate = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, fastDeepEqual, ucs2length$1, ValidationError$1);\n      refVal[0] = validate;\n    } catch (e) {\n      self.logger.error('Error compiling schema, function code:', sourceCode);\n      throw e;\n    }\n\n    validate.schema = _schema;\n    validate.errors = null;\n    validate.refs = refs;\n    validate.refVal = refVal;\n    validate.root = isRoot ? validate : _root;\n    if ($async) validate.$async = true;\n\n    if (opts.sourceCode === true) {\n      validate.source = {\n        code: sourceCode,\n        patterns: patterns,\n        defaults: defaults\n      };\n    }\n\n    return validate;\n  }\n\n  function resolveRef(baseId, ref, isRoot) {\n    ref = resolve_1.url(baseId, ref);\n    var refIndex = refs[ref];\n\n    var _refVal, refCode;\n\n    if (refIndex !== undefined) {\n      _refVal = refVal[refIndex];\n      refCode = 'refVal[' + refIndex + ']';\n      return resolvedRef(_refVal, refCode);\n    }\n\n    if (!isRoot && root.refs) {\n      var rootRefId = root.refs[ref];\n\n      if (rootRefId !== undefined) {\n        _refVal = root.refVal[rootRefId];\n        refCode = addLocalRef(ref, _refVal);\n        return resolvedRef(_refVal, refCode);\n      }\n    }\n\n    refCode = addLocalRef(ref);\n    var v = resolve_1.call(self, localCompile, root, ref);\n\n    if (v === undefined) {\n      var localSchema = localRefs && localRefs[ref];\n\n      if (localSchema) {\n        v = resolve_1.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self, localSchema, root, localRefs, baseId);\n      }\n    }\n\n    if (v === undefined) {\n      removeLocalRef(ref);\n    } else {\n      replaceLocalRef(ref, v);\n      return resolvedRef(v, refCode);\n    }\n  }\n\n  function addLocalRef(ref, v) {\n    var refId = refVal.length;\n    refVal[refId] = v;\n    refs[ref] = refId;\n    return 'refVal' + refId;\n  }\n\n  function removeLocalRef(ref) {\n    delete refs[ref];\n  }\n\n  function replaceLocalRef(ref, v) {\n    var refId = refs[ref];\n    refVal[refId] = v;\n  }\n\n  function resolvedRef(refVal, code) {\n    return typeof refVal == 'object' || typeof refVal == 'boolean' ? {\n      code: code,\n      schema: refVal,\n      inline: true\n    } : {\n      code: code,\n      $async: refVal && !!refVal.$async\n    };\n  }\n\n  function usePattern(regexStr) {\n    var index = patternsHash[regexStr];\n\n    if (index === undefined) {\n      index = patternsHash[regexStr] = patterns.length;\n      patterns[index] = regexStr;\n    }\n\n    return 'pattern' + index;\n  }\n\n  function useDefault(value) {\n    switch (typeof value) {\n      case 'boolean':\n      case 'number':\n        return '' + value;\n\n      case 'string':\n        return util.toQuotedString(value);\n\n      case 'object':\n        if (value === null) return 'null';\n        var valueStr = fastJsonStableStringify(value);\n        var index = defaultsHash[valueStr];\n\n        if (index === undefined) {\n          index = defaultsHash[valueStr] = defaults.length;\n          defaults[index] = value;\n        }\n\n        return 'default' + index;\n    }\n  }\n\n  function useCustomRule(rule, schema, parentSchema, it) {\n    if (self._opts.validateSchema !== false) {\n      var deps = rule.definition.dependencies;\n      if (deps && !deps.every(function (keyword) {\n        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);\n      })) throw new Error('parent schema must have all required keywords: ' + deps.join(','));\n      var validateSchema = rule.definition.validateSchema;\n\n      if (validateSchema) {\n        var valid = validateSchema(schema);\n\n        if (!valid) {\n          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);\n          if (self._opts.validateSchema == 'log') self.logger.error(message);else throw new Error(message);\n        }\n      }\n    }\n\n    var compile = rule.definition.compile,\n        inline = rule.definition.inline,\n        macro = rule.definition.macro;\n    var validate;\n\n    if (compile) {\n      validate = compile.call(self, schema, parentSchema, it);\n    } else if (macro) {\n      validate = macro.call(self, schema, parentSchema, it);\n      if (opts.validateSchema !== false) self.validateSchema(validate, true);\n    } else if (inline) {\n      validate = inline.call(self, it, rule.keyword, schema, parentSchema);\n    } else {\n      validate = rule.definition.validate;\n      if (!validate) return;\n    }\n\n    if (validate === undefined) throw new Error('custom keyword \"' + rule.keyword + '\"failed to compile');\n    var index = customRules.length;\n    customRules[index] = validate;\n    return {\n      code: 'customRule' + index,\n      validate: validate\n    };\n  }\n}\n/**\n * Checks if the schema is currently compiled\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n * @return {Object} object with properties \"index\" (compilation index) and \"compiling\" (boolean)\n */\n\n\nfunction checkCompiling(schema, root, baseId) {\n  /* jshint validthis: true */\n  var index = compIndex.call(this, schema, root, baseId);\n  if (index >= 0) return {\n    index: index,\n    compiling: true\n  };\n  index = this._compilations.length;\n  this._compilations[index] = {\n    schema: schema,\n    root: root,\n    baseId: baseId\n  };\n  return {\n    index: index,\n    compiling: false\n  };\n}\n/**\n * Removes the schema from the currently compiled list\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n */\n\n\nfunction endCompiling(schema, root, baseId) {\n  /* jshint validthis: true */\n  var i = compIndex.call(this, schema, root, baseId);\n  if (i >= 0) this._compilations.splice(i, 1);\n}\n/**\n * Index of schema compilation in the currently compiled list\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n * @return {Integer} compilation index\n */\n\n\nfunction compIndex(schema, root, baseId) {\n  /* jshint validthis: true */\n  for (var i = 0; i < this._compilations.length; i++) {\n    var c = this._compilations[i];\n    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;\n  }\n\n  return -1;\n}\n\nfunction patternCode(i, patterns) {\n  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';\n}\n\nfunction defaultCode(i) {\n  return 'var default' + i + ' = defaults[' + i + '];';\n}\n\nfunction refValCode(i, refVal) {\n  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';\n}\n\nfunction customRuleCode(i) {\n  return 'var customRule' + i + ' = customRules[' + i + '];';\n}\n\nfunction vars(arr, statement) {\n  if (!arr.length) return '';\n  var code = '';\n\n  for (var i = 0; i < arr.length; i++) {\n    code += statement(i, arr);\n  }\n\n  return code;\n}\n\nvar cache = createCommonjsModule(function (module) {\n  var Cache = module.exports = function Cache() {\n    this._cache = {};\n  };\n\n  Cache.prototype.put = function Cache_put(key, value) {\n    this._cache[key] = value;\n  };\n\n  Cache.prototype.get = function Cache_get(key) {\n    return this._cache[key];\n  };\n\n  Cache.prototype.del = function Cache_del(key) {\n    delete this._cache[key];\n  };\n\n  Cache.prototype.clear = function Cache_clear() {\n    this._cache = {};\n  };\n});\nvar DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nvar DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d:\\d\\d)?$/i;\nvar HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;\nvar URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nvar URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i; // uri-template: https://tools.ietf.org/html/rfc6570\n\nvar URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i; // For the source: https://gist.github.com/dperini/729294\n// For test cases: https://mathiasbynens.be/demo/url-regex\n// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.\n// var URL = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu;\n\nvar URL = /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i;\nvar UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\nvar JSON_POINTER$1 = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\nvar JSON_POINTER_URI_FRAGMENT = /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\nvar RELATIVE_JSON_POINTER$1 = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\nvar formats_1 = formats;\n\nfunction formats(mode) {\n  mode = mode == 'full' ? 'full' : 'fast';\n  return util.copy(formats[mode]);\n}\n\nformats.fast = {\n  // date: http://tools.ietf.org/html/rfc3339#section-5.6\n  date: /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\n  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6\n  time: /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)?$/i,\n  'date-time': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)$/i,\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n  uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\\/?\\/)?[^\\s]*$/i,\n  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i,\n  'uri-template': URITEMPLATE,\n  url: URL,\n  // email (sources from jsen validator):\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\n  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n  hostname: HOSTNAME,\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n  regex: regex,\n  // uuid: http://tools.ietf.org/html/rfc4122\n  uuid: UUID,\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  'json-pointer': JSON_POINTER$1,\n  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,\n  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00\n  'relative-json-pointer': RELATIVE_JSON_POINTER$1\n};\nformats.full = {\n  date: date,\n  time: time,\n  'date-time': date_time,\n  uri: uri,\n  'uri-reference': URIREF,\n  'uri-template': URITEMPLATE,\n  url: URL,\n  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n  hostname: hostname,\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n  regex: regex,\n  uuid: UUID,\n  'json-pointer': JSON_POINTER$1,\n  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,\n  'relative-json-pointer': RELATIVE_JSON_POINTER$1\n};\n\nfunction isLeapYear(year) {\n  // https://tools.ietf.org/html/rfc3339#appendix-C\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction date(str) {\n  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n  var matches = str.match(DATE);\n  if (!matches) return false;\n  var year = +matches[1];\n  var month = +matches[2];\n  var day = +matches[3];\n  return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);\n}\n\nfunction time(str, full) {\n  var matches = str.match(TIME);\n  if (!matches) return false;\n  var hour = matches[1];\n  var minute = matches[2];\n  var second = matches[3];\n  var timeZone = matches[5];\n  return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);\n}\n\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\n\nfunction date_time(str) {\n  // http://tools.ietf.org/html/rfc3339#section-5.6\n  var dateTime = str.split(DATE_TIME_SEPARATOR);\n  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);\n}\n\nfunction hostname(str) {\n  // https://tools.ietf.org/html/rfc1034#section-3.5\n  // https://tools.ietf.org/html/rfc1123#section-2\n  return str.length <= 255 && HOSTNAME.test(str);\n}\n\nvar NOT_URI_FRAGMENT = /\\/|:/;\n\nfunction uri(str) {\n  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n  return NOT_URI_FRAGMENT.test(str) && URI.test(str);\n}\n\nvar Z_ANCHOR = /[^\\\\]\\\\Z/;\n\nfunction regex(str) {\n  if (Z_ANCHOR.test(str)) return false;\n\n  try {\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar ref = function generate_ref(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $async, $refCode;\n\n  if ($schema == '#' || $schema == '#/') {\n    if (it.isRoot) {\n      $async = it.async;\n      $refCode = 'validate';\n    } else {\n      $async = it.root.schema.$async === true;\n      $refCode = 'root.refVal[0]';\n    }\n  } else {\n    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);\n\n    if ($refVal === undefined) {\n      var $message = it.MissingRefError.message(it.baseId, $schema);\n\n      if (it.opts.missingRefs == 'fail') {\n        it.logger.error($message);\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = '';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + '$ref' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { ref: \\'' + it.util.escapeQuotes($schema) + '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'can\\\\\\'t resolve reference ' + it.util.escapeQuotes($schema) + '\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: ' + it.util.toQuotedString($schema) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        var __err = out;\n        out = $$outStack.pop();\n\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n\n        if ($breakOnError) {\n          out += ' if (false) { ';\n        }\n      } else if (it.opts.missingRefs == 'ignore') {\n        it.logger.warn($message);\n\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n      } else {\n        throw new it.MissingRefError(it.baseId, $schema, $message);\n      }\n    } else if ($refVal.inline) {\n      var $it = it.util.copy(it);\n      $it.level++;\n      var $nextValid = 'valid' + $it.level;\n      $it.schema = $refVal.schema;\n      $it.schemaPath = '';\n      $it.errSchemaPath = $schema;\n      var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code);\n      out += ' ' + $code + ' ';\n\n      if ($breakOnError) {\n        out += ' if (' + $nextValid + ') { ';\n      }\n    } else {\n      $async = $refVal.$async === true || it.async && $refVal.$async !== false;\n      $refCode = $refVal.code;\n    }\n  }\n\n  if ($refCode) {\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n\n    if (it.opts.passContext) {\n      out += ' ' + $refCode + '.call(this, ';\n    } else {\n      out += ' ' + $refCode + '( ';\n    }\n\n    out += ' ' + $data + ', (dataPath || \\'\\')';\n\n    if (it.errorPath != '\"\"') {\n      out += ' + ' + it.errorPath;\n    }\n\n    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',\n        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';\n    var __callValidate = out;\n    out = $$outStack.pop();\n\n    if ($async) {\n      if (!it.async) throw new Error('async schema referenced by sync schema');\n\n      if ($breakOnError) {\n        out += ' var ' + $valid + '; ';\n      }\n\n      out += ' try { await ' + __callValidate + '; ';\n\n      if ($breakOnError) {\n        out += ' ' + $valid + ' = true; ';\n      }\n\n      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';\n\n      if ($breakOnError) {\n        out += ' ' + $valid + ' = false; ';\n      }\n\n      out += ' } ';\n\n      if ($breakOnError) {\n        out += ' if (' + $valid + ') { ';\n      }\n    } else {\n      out += ' if (!' + __callValidate + ') { if (vErrors === null) vErrors = ' + $refCode + '.errors; else vErrors = vErrors.concat(' + $refCode + '.errors); errors = vErrors.length; } ';\n\n      if ($breakOnError) {\n        out += ' else { ';\n      }\n    }\n  }\n\n  return out;\n};\n\nvar allOf = function generate_allOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n      $allSchemasEmpty = true;\n  var arr1 = $schema;\n\n  if (arr1) {\n    var $sch,\n        $i = -1,\n        l1 = arr1.length - 1;\n\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n\n      if (it.util.schemaHasRules($sch, it.RULES.all)) {\n        $allSchemasEmpty = false;\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + it.validate($it) + ' ';\n        $it.baseId = $currentBaseId;\n\n        if ($breakOnError) {\n          out += ' if (' + $nextValid + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n\n  if ($breakOnError) {\n    if ($allSchemasEmpty) {\n      out += ' if (true) { ';\n    } else {\n      out += ' ' + $closingBraces.slice(0, -1) + ' ';\n    }\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};\n\nvar anyOf = function generate_anyOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $noEmptySchema = $schema.every(function ($sch) {\n    return it.util.schemaHasRules($sch, it.RULES.all);\n  });\n\n  if ($noEmptySchema) {\n    var $currentBaseId = $it.baseId;\n    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var arr1 = $schema;\n\n    if (arr1) {\n      var $sch,\n          $i = -1,\n          l1 = arr1.length - 1;\n\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + it.validate($it) + ' ';\n        $it.baseId = $currentBaseId;\n        out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';\n        $closingBraces += '}';\n      }\n    }\n\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + $closingBraces + ' if (!' + $valid + ') {   var err =   ';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + 'anyOf' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should match some schema in anyOf\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n\n    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';\n\n    if (it.opts.allErrors) {\n      out += ' } ';\n    }\n\n    out = it.util.cleanUpCode(out);\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n\n  return out;\n};\n\nvar comment = function generate_comment(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $schema = it.schema[$keyword];\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $comment = it.util.toQuotedString($schema);\n\n  if (it.opts.$comment === true) {\n    out += ' console.log(' + $comment + ');';\n  } else if (typeof it.opts.$comment == 'function') {\n    out += ' self._opts.$comment(' + $comment + ', ' + it.util.toQuotedString($errSchemaPath) + ', validate.root.schema);';\n  }\n\n  return out;\n};\n\nvar _const = function generate_const(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n  }\n\n  if (!$isData) {\n    out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';\n  }\n\n  out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'const' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValue: schema' + $lvl + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be equal to constant\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' }';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar contains = function generate_contains(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $idx = 'i' + $lvl,\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt,\n      $currentBaseId = it.baseId,\n      $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);\n  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';\n\n  if ($nonEmptySchema) {\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + $nextValid + ' = false; for (var ' + $idx + ' = 0; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n    var $passData = $data + '[' + $idx + ']';\n    $it.dataPathArr[$dataNxt] = $idx;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n    } else {\n      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n    }\n\n    out += ' if (' + $nextValid + ') break; }  ';\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + $closingBraces + ' if (!' + $nextValid + ') {';\n  } else {\n    out += ' if (' + $data + '.length == 0) {';\n  }\n\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'contains' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should contain a valid item\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' } else { ';\n\n  if ($nonEmptySchema) {\n    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';\n  }\n\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};\n\nvar dependencies = function generate_dependencies(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $schemaDeps = {},\n      $propertyDeps = {},\n      $ownProperties = it.opts.ownProperties;\n\n  for ($property in $schema) {\n    var $sch = $schema[$property];\n    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;\n    $deps[$property] = $sch;\n  }\n\n  out += 'var ' + $errs + ' = errors;';\n  var $currentErrorPath = it.errorPath;\n  out += 'var missing' + $lvl + ';';\n\n  for (var $property in $propertyDeps) {\n    $deps = $propertyDeps[$property];\n\n    if ($deps.length) {\n      out += ' if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';\n\n      if ($ownProperties) {\n        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($property) + '\\') ';\n      }\n\n      if ($breakOnError) {\n        out += ' && ( ';\n        var arr1 = $deps;\n\n        if (arr1) {\n          var $propertyKey,\n              $i = -1,\n              l1 = arr1.length - 1;\n\n          while ($i < l1) {\n            $propertyKey = arr1[$i += 1];\n\n            if ($i) {\n              out += ' || ';\n            }\n\n            var $prop = it.util.getProperty($propertyKey),\n                $useData = $data + $prop;\n            out += ' ( ( ' + $useData + ' === undefined ';\n\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n            }\n\n            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';\n          }\n        }\n\n        out += ')) {  ';\n        var $propertyPath = 'missing' + $lvl,\n            $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\n        }\n\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = '';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + 'dependencies' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \\'' + it.util.escapeQuotes($property) + '\\', missingProperty: \\'' + $missingProperty + '\\', depsCount: ' + $deps.length + ', deps: \\'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \")) + '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should have ';\n\n            if ($deps.length == 1) {\n              out += 'property ' + it.util.escapeQuotes($deps[0]);\n            } else {\n              out += 'properties ' + it.util.escapeQuotes($deps.join(\", \"));\n            }\n\n            out += ' when property ' + it.util.escapeQuotes($property) + ' is present\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        var __err = out;\n        out = $$outStack.pop();\n\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      } else {\n        out += ' ) { ';\n        var arr2 = $deps;\n\n        if (arr2) {\n          var $propertyKey,\n              i2 = -1,\n              l2 = arr2.length - 1;\n\n          while (i2 < l2) {\n            $propertyKey = arr2[i2 += 1];\n            var $prop = it.util.getProperty($propertyKey),\n                $missingProperty = it.util.escapeQuotes($propertyKey),\n                $useData = $data + $prop;\n\n            if (it.opts._errorDataPathProperty) {\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n            }\n\n            out += ' if ( ' + $useData + ' === undefined ';\n\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n            }\n\n            out += ') {  var err =   ';\n            /* istanbul ignore else */\n\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + 'dependencies' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \\'' + it.util.escapeQuotes($property) + '\\', missingProperty: \\'' + $missingProperty + '\\', depsCount: ' + $deps.length + ', deps: \\'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \")) + '\\' } ';\n\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should have ';\n\n                if ($deps.length == 1) {\n                  out += 'property ' + it.util.escapeQuotes($deps[0]);\n                } else {\n                  out += 'properties ' + it.util.escapeQuotes($deps.join(\", \"));\n                }\n\n                out += ' when property ' + it.util.escapeQuotes($property) + ' is present\\' ';\n              }\n\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n              }\n\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n          }\n        }\n      }\n\n      out += ' }   ';\n\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n  }\n\n  it.errorPath = $currentErrorPath;\n  var $currentBaseId = $it.baseId;\n\n  for (var $property in $schemaDeps) {\n    var $sch = $schemaDeps[$property];\n\n    if (it.util.schemaHasRules($sch, it.RULES.all)) {\n      out += ' ' + $nextValid + ' = true; if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';\n\n      if ($ownProperties) {\n        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($property) + '\\') ';\n      }\n\n      out += ') { ';\n      $it.schema = $sch;\n      $it.schemaPath = $schemaPath + it.util.getProperty($property);\n      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);\n      out += '  ' + it.validate($it) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' }  ';\n\n      if ($breakOnError) {\n        out += ' if (' + $nextValid + ') { ';\n        $closingBraces += '}';\n      }\n    }\n  }\n\n  if ($breakOnError) {\n    out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};\n\nvar _enum = function generate_enum(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n  }\n\n  var $i = 'i' + $lvl,\n      $vSchema = 'schema' + $lvl;\n\n  if (!$isData) {\n    out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';\n  }\n\n  out += 'var ' + $valid + ';';\n\n  if ($isData) {\n    out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';\n  }\n\n  out += '' + $valid + ' = false;for (var ' + $i + '=0; ' + $i + '<' + $vSchema + '.length; ' + $i + '++) if (equal(' + $data + ', ' + $vSchema + '[' + $i + '])) { ' + $valid + ' = true; break; }';\n\n  if ($isData) {\n    out += '  }  ';\n  }\n\n  out += ' if (!' + $valid + ') {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'enum' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValues: schema' + $lvl + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be equal to one of the allowed values\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' }';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar format = function generate_format(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n\n    return out;\n  }\n\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $unknownFormats = it.opts.unknownFormats,\n      $allowUnknown = Array.isArray($unknownFormats);\n\n  if ($isData) {\n    var $format = 'format' + $lvl,\n        $isObject = 'isObject' + $lvl,\n        $formatType = 'formatType' + $lvl;\n    out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var ' + $isObject + ' = typeof ' + $format + ' == \\'object\\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; var ' + $formatType + ' = ' + $isObject + ' && ' + $format + '.type || \\'string\\'; if (' + $isObject + ') { ';\n\n    if (it.async) {\n      out += ' var async' + $lvl + ' = ' + $format + '.async; ';\n    }\n\n    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';\n\n    if ($isData) {\n      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'string\\') || ';\n    }\n\n    out += ' (';\n\n    if ($unknownFormats != 'ignore') {\n      out += ' (' + $schemaValue + ' && !' + $format + ' ';\n\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';\n      }\n\n      out += ') || ';\n    }\n\n    out += ' (' + $format + ' && ' + $formatType + ' == \\'' + $ruleType + '\\' && !(typeof ' + $format + ' == \\'function\\' ? ';\n\n    if (it.async) {\n      out += ' (async' + $lvl + ' ? await ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';\n    } else {\n      out += ' ' + $format + '(' + $data + ') ';\n    }\n\n    out += ' : ' + $format + '.test(' + $data + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n\n    if (!$format) {\n      if ($unknownFormats == 'ignore') {\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n\n        return out;\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n\n        return out;\n      } else {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n\n    if ($formatType != $ruleType) {\n      if ($breakOnError) {\n        out += ' if (true) { ';\n      }\n\n      return out;\n    }\n\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(await ' + $formatRef + '(' + $data + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n\n      if (typeof $format == 'function') {\n        out += ' ' + $formatRef + '(' + $data + ') ';\n      } else {\n        out += ' ' + $formatRef + '.test(' + $data + ') ';\n      }\n\n      out += ') { ';\n    }\n  }\n\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'format' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += '  } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + it.util.escapeQuotes($schema);\n      }\n\n      out += '\"\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + it.util.toQuotedString($schema);\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' } ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar _if = function generate_if(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $thenSch = it.schema['then'],\n      $elseSch = it.schema['else'],\n      $thenPresent = $thenSch !== undefined && it.util.schemaHasRules($thenSch, it.RULES.all),\n      $elsePresent = $elseSch !== undefined && it.util.schemaHasRules($elseSch, it.RULES.all),\n      $currentBaseId = $it.baseId;\n\n  if ($thenPresent || $elsePresent) {\n    var $ifClause;\n    $it.createErrors = false;\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = true;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    out += '  ' + it.validate($it) + ' ';\n    $it.baseId = $currentBaseId;\n    $it.createErrors = true;\n    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }  ';\n    it.compositeRule = $it.compositeRule = $wasComposite;\n\n    if ($thenPresent) {\n      out += ' if (' + $nextValid + ') {  ';\n      $it.schema = it.schema['then'];\n      $it.schemaPath = it.schemaPath + '.then';\n      $it.errSchemaPath = it.errSchemaPath + '/then';\n      out += '  ' + it.validate($it) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' ' + $valid + ' = ' + $nextValid + '; ';\n\n      if ($thenPresent && $elsePresent) {\n        $ifClause = 'ifClause' + $lvl;\n        out += ' var ' + $ifClause + ' = \\'then\\'; ';\n      } else {\n        $ifClause = '\\'then\\'';\n      }\n\n      out += ' } ';\n\n      if ($elsePresent) {\n        out += ' else { ';\n      }\n    } else {\n      out += ' if (!' + $nextValid + ') { ';\n    }\n\n    if ($elsePresent) {\n      $it.schema = it.schema['else'];\n      $it.schemaPath = it.schemaPath + '.else';\n      $it.errSchemaPath = it.errSchemaPath + '/else';\n      out += '  ' + it.validate($it) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' ' + $valid + ' = ' + $nextValid + '; ';\n\n      if ($thenPresent && $elsePresent) {\n        $ifClause = 'ifClause' + $lvl;\n        out += ' var ' + $ifClause + ' = \\'else\\'; ';\n      } else {\n        $ifClause = '\\'else\\'';\n      }\n\n      out += ' } ';\n    }\n\n    out += ' if (!' + $valid + ') {   var err =   ';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + 'if' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { failingKeyword: ' + $ifClause + ' } ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should match \"\\' + ' + $ifClause + ' + \\'\" schema\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n\n    out += ' }   ';\n\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n\n    out = it.util.cleanUpCode(out);\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n\n  return out;\n};\n\nvar items = function generate_items(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $idx = 'i' + $lvl,\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt,\n      $currentBaseId = it.baseId;\n  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';\n\n  if (Array.isArray($schema)) {\n    var $additionalItems = it.schema.additionalItems;\n\n    if ($additionalItems === false) {\n      out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';\n      var $currErrSchemaPath = $errSchemaPath;\n      $errSchemaPath = it.errSchemaPath + '/additionalItems';\n      out += '  if (!' + $valid + ') {   ';\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = '';\n      /* istanbul ignore else */\n\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + 'additionalItems' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schema.length + ' } ';\n\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should NOT have more than ' + $schema.length + ' items\\' ';\n        }\n\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n\n      var __err = out;\n      out = $$outStack.pop();\n\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + __err + ']); ';\n        } else {\n          out += ' validate.errors = [' + __err + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n\n      out += ' } ';\n      $errSchemaPath = $currErrSchemaPath;\n\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n\n    var arr1 = $schema;\n\n    if (arr1) {\n      var $sch,\n          $i = -1,\n          l1 = arr1.length - 1;\n\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';\n          var $passData = $data + '[' + $i + ']';\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + '[' + $i + ']';\n          $it.errSchemaPath = $errSchemaPath + '/' + $i;\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);\n          $it.dataPathArr[$dataNxt] = $i;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          out += ' }  ';\n\n          if ($breakOnError) {\n            out += ' if (' + $nextValid + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n\n    if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {\n      $it.schema = $additionalItems;\n      $it.schemaPath = it.schemaPath + '.additionalItems';\n      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';\n      out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $schema.length + ') {  for (var ' + $idx + ' = ' + $schema.length + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + '[' + $idx + ']';\n      $it.dataPathArr[$dataNxt] = $idx;\n      var $code = it.validate($it);\n      $it.baseId = $currentBaseId;\n\n      if (it.util.varOccurences($code, $nextData) < 2) {\n        out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n      } else {\n        out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n      }\n\n      if ($breakOnError) {\n        out += ' if (!' + $nextValid + ') break; ';\n      }\n\n      out += ' } }  ';\n\n      if ($breakOnError) {\n        out += ' if (' + $nextValid + ') { ';\n        $closingBraces += '}';\n      }\n    }\n  } else if (it.util.schemaHasRules($schema, it.RULES.all)) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n    var $passData = $data + '[' + $idx + ']';\n    $it.dataPathArr[$dataNxt] = $idx;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n    } else {\n      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n    }\n\n    if ($breakOnError) {\n      out += ' if (!' + $nextValid + ') break; ';\n    }\n\n    out += ' }';\n  }\n\n  if ($breakOnError) {\n    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};\n\nvar _limit = function generate__limit(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $isMax = $keyword == 'maximum',\n      $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',\n      $schemaExcl = it.schema[$exclusiveKeyword],\n      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,\n      $op = $isMax ? '<' : '>',\n      $notOp = $isMax ? '>' : '<',\n      $errorKeyword = undefined;\n\n  if ($isDataExcl) {\n    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),\n        $exclusive = 'exclusive' + $lvl,\n        $exclType = 'exclType' + $lvl,\n        $exclIsNumber = 'exclIsNumber' + $lvl,\n        $opExpr = 'op' + $lvl,\n        $opStr = '\\' + ' + $opExpr + ' + \\'';\n    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';\n    $schemaValueExcl = 'schemaExcl' + $lvl;\n    out += ' var ' + $exclusive + '; var ' + $exclType + ' = typeof ' + $schemaValueExcl + '; if (' + $exclType + ' != \\'boolean\\' && ' + $exclType + ' != \\'undefined\\' && ' + $exclType + ' != \\'number\\') { ';\n    var $errorKeyword = $exclusiveKeyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || '_exclusiveLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'' + $exclusiveKeyword + ' should be boolean\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    var __err = out;\n    out = $$outStack.pop();\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + __err + ']); ';\n      } else {\n        out += ' validate.errors = [' + __err + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n\n    out += ' } else if ( ';\n\n    if ($isData) {\n      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'number\\') || ';\n    }\n\n    out += ' ' + $exclType + ' == \\'number\\' ? ( (' + $exclusive + ' = ' + $schemaValue + ' === undefined || ' + $schemaValueExcl + ' ' + $op + '= ' + $schemaValue + ') ? ' + $data + ' ' + $notOp + '= ' + $schemaValueExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) : ( (' + $exclusive + ' = ' + $schemaValueExcl + ' === true) ? ' + $data + ' ' + $notOp + '= ' + $schemaValue + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { var op' + $lvl + ' = ' + $exclusive + ' ? \\'' + $op + '\\' : \\'' + $op + '=\\'; ';\n\n    if ($schema === undefined) {\n      $errorKeyword = $exclusiveKeyword;\n      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n      $schemaValue = $schemaValueExcl;\n      $isData = $isDataExcl;\n    }\n  } else {\n    var $exclIsNumber = typeof $schemaExcl == 'number',\n        $opStr = $op;\n\n    if ($exclIsNumber && $isData) {\n      var $opExpr = '\\'' + $opStr + '\\'';\n      out += ' if ( ';\n\n      if ($isData) {\n        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'number\\') || ';\n      }\n\n      out += ' ( ' + $schemaValue + ' === undefined || ' + $schemaExcl + ' ' + $op + '= ' + $schemaValue + ' ? ' + $data + ' ' + $notOp + '= ' + $schemaExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { ';\n    } else {\n      if ($exclIsNumber && $schema === undefined) {\n        $exclusive = true;\n        $errorKeyword = $exclusiveKeyword;\n        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n        $schemaValue = $schemaExcl;\n        $notOp += '=';\n      } else {\n        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);\n\n        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {\n          $exclusive = true;\n          $errorKeyword = $exclusiveKeyword;\n          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n          $notOp += '=';\n        } else {\n          $exclusive = false;\n          $opStr += '=';\n        }\n      }\n\n      var $opExpr = '\\'' + $opStr + '\\'';\n      out += ' if ( ';\n\n      if ($isData) {\n        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'number\\') || ';\n      }\n\n      out += ' ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') { ';\n    }\n  }\n\n  $errorKeyword = $errorKeyword || $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limit') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit: ' + $schemaValue + ', exclusive: ' + $exclusive + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be ' + $opStr + ' ';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue;\n      } else {\n        out += '' + $schemaValue + '\\'';\n      }\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + $schema;\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' } ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar _limitItems = function generate__limitItems(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $op = $keyword == 'maxItems' ? '>' : '<';\n  out += 'if ( ';\n\n  if ($isData) {\n    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'number\\') || ';\n  }\n\n  out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT have ';\n\n      if ($keyword == 'maxItems') {\n        out += 'more';\n      } else {\n        out += 'fewer';\n      }\n\n      out += ' than ';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + $schema;\n      }\n\n      out += ' items\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + $schema;\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += '} ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar _limitLength = function generate__limitLength(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $op = $keyword == 'maxLength' ? '>' : '<';\n  out += 'if ( ';\n\n  if ($isData) {\n    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'number\\') || ';\n  }\n\n  if (it.opts.unicode === false) {\n    out += ' ' + $data + '.length ';\n  } else {\n    out += ' ucs2length(' + $data + ') ';\n  }\n\n  out += ' ' + $op + ' ' + $schemaValue + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitLength') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT be ';\n\n      if ($keyword == 'maxLength') {\n        out += 'longer';\n      } else {\n        out += 'shorter';\n      }\n\n      out += ' than ';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + $schema;\n      }\n\n      out += ' characters\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + $schema;\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += '} ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $op = $keyword == 'maxProperties' ? '>' : '<';\n  out += 'if ( ';\n\n  if ($isData) {\n    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'number\\') || ';\n  }\n\n  out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT have ';\n\n      if ($keyword == 'maxProperties') {\n        out += 'more';\n      } else {\n        out += 'fewer';\n      }\n\n      out += ' than ';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + $schema;\n      }\n\n      out += ' properties\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + $schema;\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += '} ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  out += 'var division' + $lvl + ';if (';\n\n  if ($isData) {\n    out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + ' != \\'number\\' || ';\n  }\n\n  out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';\n\n  if (it.opts.multipleOfPrecision) {\n    out += ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';\n  } else {\n    out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';\n  }\n\n  out += ' ) ';\n\n  if ($isData) {\n    out += '  )  ';\n  }\n\n  out += ' ) {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'multipleOf' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { multipleOf: ' + $schemaValue + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be multiple of ';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue;\n      } else {\n        out += '' + $schemaValue + '\\'';\n      }\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + $schema;\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += '} ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar not = function generate_not(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n\n  if (it.util.schemaHasRules($schema, it.RULES.all)) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + $errs + ' = errors;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    $it.createErrors = false;\n    var $allErrorsOption;\n\n    if ($it.opts.allErrors) {\n      $allErrorsOption = $it.opts.allErrors;\n      $it.opts.allErrors = false;\n    }\n\n    out += ' ' + it.validate($it) + ' ';\n    $it.createErrors = true;\n    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' if (' + $nextValid + ') {   ';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + 'not' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT be valid\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    var __err = out;\n    out = $$outStack.pop();\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + __err + ']); ';\n      } else {\n        out += ' validate.errors = [' + __err + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n\n    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';\n\n    if (it.opts.allErrors) {\n      out += ' } ';\n    }\n  } else {\n    out += '  var err =   ';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + 'not' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT be valid\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n    if ($breakOnError) {\n      out += ' if (false) { ';\n    }\n  }\n\n  return out;\n};\n\nvar oneOf = function generate_oneOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n      $prevValid = 'prevValid' + $lvl,\n      $passingSchemas = 'passingSchemas' + $lvl;\n  out += 'var ' + $errs + ' = errors , ' + $prevValid + ' = false , ' + $valid + ' = false , ' + $passingSchemas + ' = null; ';\n  var $wasComposite = it.compositeRule;\n  it.compositeRule = $it.compositeRule = true;\n  var arr1 = $schema;\n\n  if (arr1) {\n    var $sch,\n        $i = -1,\n        l1 = arr1.length - 1;\n\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n\n      if (it.util.schemaHasRules($sch, it.RULES.all)) {\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + it.validate($it) + ' ';\n        $it.baseId = $currentBaseId;\n      } else {\n        out += ' var ' + $nextValid + ' = true; ';\n      }\n\n      if ($i) {\n        out += ' if (' + $nextValid + ' && ' + $prevValid + ') { ' + $valid + ' = false; ' + $passingSchemas + ' = [' + $passingSchemas + ', ' + $i + ']; } else { ';\n        $closingBraces += '}';\n      }\n\n      out += ' if (' + $nextValid + ') { ' + $valid + ' = ' + $prevValid + ' = true; ' + $passingSchemas + ' = ' + $i + '; }';\n    }\n  }\n\n  it.compositeRule = $it.compositeRule = $wasComposite;\n  out += '' + $closingBraces + 'if (!' + $valid + ') {   var err =   ';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'oneOf' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { passingSchemas: ' + $passingSchemas + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match exactly one schema in oneOf\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; return false; ';\n    }\n  }\n\n  out += '} else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }';\n\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n\n  return out;\n};\n\nvar pattern = function generate_pattern(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);\n  out += 'if ( ';\n\n  if ($isData) {\n    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'string\\') || ';\n  }\n\n  out += ' !' + $regexp + '.test(' + $data + ') ) {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'pattern' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { pattern:  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += '  } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match pattern \"';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + it.util.escapeQuotes($schema);\n      }\n\n      out += '\"\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + it.util.toQuotedString($schema);\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += '} ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};\n\nvar properties = function generate_properties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n      $idx = 'idx' + $lvl,\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt,\n      $dataProperties = 'dataProperties' + $lvl;\n  var $schemaKeys = Object.keys($schema || {}),\n      $pProperties = it.schema.patternProperties || {},\n      $pPropertyKeys = Object.keys($pProperties),\n      $aProperties = it.schema.additionalProperties,\n      $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n      $noAdditional = $aProperties === false,\n      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n      $removeAdditional = it.opts.removeAdditional,\n      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n      $ownProperties = it.opts.ownProperties,\n      $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';\n\n  if ($ownProperties) {\n    out += ' var ' + $dataProperties + ' = undefined;';\n  }\n\n  if ($checkAdditional) {\n    if ($ownProperties) {\n      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';\n    } else {\n      out += ' for (var ' + $key + ' in ' + $data + ') { ';\n    }\n\n    if ($someProperties) {\n      out += ' var isAdditional' + $lvl + ' = !(false ';\n\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 8) {\n          out += ' || validate.schema' + $schemaPath + '.hasOwnProperty(' + $key + ') ';\n        } else {\n          var arr1 = $schemaKeys;\n\n          if (arr1) {\n            var $propertyKey,\n                i1 = -1,\n                l1 = arr1.length - 1;\n\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';\n            }\n          }\n        }\n      }\n\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n\n        if (arr2) {\n          var $pProperty,\n              $i = -1,\n              l2 = arr2.length - 1;\n\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';\n          }\n        }\n      }\n\n      out += ' ); if (isAdditional' + $lvl + ') { ';\n    }\n\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + $data + '[' + $key + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + $data + '[' + $key + ']; ';\n        } else {\n          out += ' ' + $nextValid + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = '';\n          /* istanbul ignore else */\n\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + 'additionalProperties' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \\'' + $additionalProperty + '\\' } ';\n\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'';\n\n              if (it.opts._errorDataPathProperty) {\n                out += 'is an invalid additional property';\n              } else {\n                out += 'should NOT have additional properties';\n              }\n\n              out += '\\' ';\n            }\n\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n            }\n\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n\n          var __err = out;\n          out = $$outStack.pop();\n\n          if (!it.compositeRule && $breakOnError) {\n            /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + __err + ']); ';\n            } else {\n              out += ' validate.errors = [' + __err + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n\n          $errSchemaPath = $currErrSchemaPath;\n\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + $errs + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n        }\n      }\n\n      it.errorPath = $currentErrorPath;\n    }\n\n    if ($someProperties) {\n      out += ' } ';\n    }\n\n    out += ' }  ';\n\n    if ($breakOnError) {\n      out += ' if (' + $nextValid + ') { ';\n      $closingBraces += '}';\n    }\n  }\n\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n\n  if ($schemaKeys.length) {\n    var arr3 = $schemaKeys;\n\n    if (arr3) {\n      var $propertyKey,\n          i3 = -1,\n          l3 = arr3.length - 1;\n\n      while (i3 < l3) {\n        $propertyKey = arr3[i3 += 1];\n        var $sch = $schema[$propertyKey];\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          var $prop = it.util.getProperty($propertyKey),\n              $passData = $data + $prop,\n              $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + $nextData + ' = ' + $passData + '; ';\n          }\n\n          if ($hasDefault) {\n            out += ' ' + $code + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if ( ' + $useData + ' === undefined ';\n\n              if ($ownProperties) {\n                out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n              }\n\n              out += ') { ' + $nextValid + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                  $currErrSchemaPath = $errSchemaPath,\n                  $missingProperty = it.util.escapeQuotes($propertyKey);\n\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n                  }\n\n                  out += '\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if ( ' + $useData + ' === undefined ';\n\n                if ($ownProperties) {\n                  out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n                }\n\n                out += ') { ' + $nextValid + ' = true; } else { ';\n              } else {\n                out += ' if (' + $useData + ' !== undefined ';\n\n                if ($ownProperties) {\n                  out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n                }\n\n                out += ' ) { ';\n              }\n            }\n\n            out += ' ' + $code + ' } ';\n          }\n        }\n\n        if ($breakOnError) {\n          out += ' if (' + $nextValid + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n\n  if ($pPropertyKeys.length) {\n    var arr4 = $pPropertyKeys;\n\n    if (arr4) {\n      var $pProperty,\n          i4 = -1,\n          l4 = arr4.length - 1;\n\n      while (i4 < l4) {\n        $pProperty = arr4[i4 += 1];\n        var $sch = $pProperties[$pProperty];\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n\n          if ($ownProperties) {\n            out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';\n          } else {\n            out += ' for (var ' + $key + ' in ' + $data + ') { ';\n          }\n\n          out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n\n          out += ' } ';\n\n          if ($breakOnError) {\n            out += ' else ' + $nextValid + ' = true; ';\n          }\n\n          out += ' }  ';\n\n          if ($breakOnError) {\n            out += ' if (' + $nextValid + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n  }\n\n  if ($breakOnError) {\n    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};\n\nvar propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  out += 'var ' + $errs + ' = errors;';\n\n  if (it.util.schemaHasRules($schema, it.RULES.all)) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    var $key = 'key' + $lvl,\n        $idx = 'idx' + $lvl,\n        $i = 'i' + $lvl,\n        $invalidName = '\\' + ' + $key + ' + \\'',\n        $dataNxt = $it.dataLevel = it.dataLevel + 1,\n        $nextData = 'data' + $dataNxt,\n        $dataProperties = 'dataProperties' + $lvl,\n        $ownProperties = it.opts.ownProperties,\n        $currentBaseId = it.baseId;\n\n    if ($ownProperties) {\n      out += ' var ' + $dataProperties + ' = undefined; ';\n    }\n\n    if ($ownProperties) {\n      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';\n    } else {\n      out += ' for (var ' + $key + ' in ' + $data + ') { ';\n    }\n\n    out += ' var startErrs' + $lvl + ' = errors; ';\n    var $passData = $key;\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n    } else {\n      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n    }\n\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' if (!' + $nextValid + ') { for (var ' + $i + '=startErrs' + $lvl + '; ' + $i + '<errors; ' + $i + '++) { vErrors[' + $i + '].propertyName = ' + $key + '; }   var err =   ';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + 'propertyNames' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { propertyName: \\'' + $invalidName + '\\' } ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'property name \\\\\\'' + $invalidName + '\\\\\\' is invalid\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n\n    if ($breakOnError) {\n      out += ' break; ';\n    }\n\n    out += ' } }';\n  }\n\n  if ($breakOnError) {\n    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};\n\nvar required = function generate_required(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n  }\n\n  var $vSchema = 'schema' + $lvl;\n\n  if (!$isData) {\n    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {\n      var $required = [];\n      var arr1 = $schema;\n\n      if (arr1) {\n        var $property,\n            i1 = -1,\n            l1 = arr1.length - 1;\n\n        while (i1 < l1) {\n          $property = arr1[i1 += 1];\n          var $propertySch = it.schema.properties[$property];\n\n          if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {\n            $required[$required.length] = $property;\n          }\n        }\n      }\n    } else {\n      var $required = $schema;\n    }\n  }\n\n  if ($isData || $required.length) {\n    var $currentErrorPath = it.errorPath,\n        $loopRequired = $isData || $required.length >= it.opts.loopRequired,\n        $ownProperties = it.opts.ownProperties;\n\n    if ($breakOnError) {\n      out += ' var missing' + $lvl + '; ';\n\n      if ($loopRequired) {\n        if (!$isData) {\n          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';\n        }\n\n        var $i = 'i' + $lvl,\n            $propertyPath = 'schema' + $lvl + '[' + $i + ']',\n            $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n        }\n\n        out += ' var ' + $valid + ' = true; ';\n\n        if ($isData) {\n          out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';\n        }\n\n        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { ' + $valid + ' = ' + $data + '[' + $vSchema + '[' + $i + ']] !== undefined ';\n\n        if ($ownProperties) {\n          out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';\n        }\n\n        out += '; if (!' + $valid + ') break; } ';\n\n        if ($isData) {\n          out += '  }  ';\n        }\n\n        out += '  if (!' + $valid + ') {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = '';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n            }\n\n            out += '\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        var __err = out;\n        out = $$outStack.pop();\n\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n\n        out += ' } else { ';\n      } else {\n        out += ' if ( ';\n        var arr2 = $required;\n\n        if (arr2) {\n          var $propertyKey,\n              $i = -1,\n              l2 = arr2.length - 1;\n\n          while ($i < l2) {\n            $propertyKey = arr2[$i += 1];\n\n            if ($i) {\n              out += ' || ';\n            }\n\n            var $prop = it.util.getProperty($propertyKey),\n                $useData = $data + $prop;\n            out += ' ( ( ' + $useData + ' === undefined ';\n\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n            }\n\n            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';\n          }\n        }\n\n        out += ') {  ';\n        var $propertyPath = 'missing' + $lvl,\n            $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\n        }\n\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = '';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n            }\n\n            out += '\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        var __err = out;\n        out = $$outStack.pop();\n\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n\n        out += ' } else { ';\n      }\n    } else {\n      if ($loopRequired) {\n        if (!$isData) {\n          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';\n        }\n\n        var $i = 'i' + $lvl,\n            $propertyPath = 'schema' + $lvl + '[' + $i + ']',\n            $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n        }\n\n        if ($isData) {\n          out += ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   ';\n          /* istanbul ignore else */\n\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'';\n\n              if (it.opts._errorDataPathProperty) {\n                out += 'is a required property';\n              } else {\n                out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n              }\n\n              out += '\\' ';\n            }\n\n            if (it.opts.verbose) {\n              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n            }\n\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n\n          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + $vSchema + ' !== undefined) { ';\n        }\n\n        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { if (' + $data + '[' + $vSchema + '[' + $i + ']] === undefined ';\n\n        if ($ownProperties) {\n          out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';\n        }\n\n        out += ') {  var err =   ';\n        /* istanbul ignore else */\n\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n            }\n\n            out += '\\' ';\n          }\n\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n\n        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';\n\n        if ($isData) {\n          out += '  }  ';\n        }\n      } else {\n        var arr3 = $required;\n\n        if (arr3) {\n          var $propertyKey,\n              i3 = -1,\n              l3 = arr3.length - 1;\n\n          while (i3 < l3) {\n            $propertyKey = arr3[i3 += 1];\n            var $prop = it.util.getProperty($propertyKey),\n                $missingProperty = it.util.escapeQuotes($propertyKey),\n                $useData = $data + $prop;\n\n            if (it.opts._errorDataPathProperty) {\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n            }\n\n            out += ' if ( ' + $useData + ' === undefined ';\n\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n            }\n\n            out += ') {  var err =   ';\n            /* istanbul ignore else */\n\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'';\n\n                if (it.opts._errorDataPathProperty) {\n                  out += 'is a required property';\n                } else {\n                  out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n                }\n\n                out += '\\' ';\n              }\n\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n              }\n\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n          }\n        }\n      }\n    }\n\n    it.errorPath = $currentErrorPath;\n  } else if ($breakOnError) {\n    out += ' if (true) {';\n  }\n\n  return out;\n};\n\nvar uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  if (($schema || $isData) && it.opts.uniqueItems !== false) {\n    if ($isData) {\n      out += ' var ' + $valid + '; if (' + $schemaValue + ' === false || ' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \\'boolean\\') ' + $valid + ' = false; else { ';\n    }\n\n    out += ' var i = ' + $data + '.length , ' + $valid + ' = true , j; if (i > 1) { ';\n    var $itemType = it.schema.items && it.schema.items.type,\n        $typeIsArray = Array.isArray($itemType);\n\n    if (!$itemType || $itemType == 'object' || $itemType == 'array' || $typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0)) {\n      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + $data + '[i], ' + $data + '[j])) { ' + $valid + ' = false; break outer; } } } ';\n    } else {\n      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + $data + '[i]; ';\n      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');\n      out += ' if (' + it.util[$method]($itemType, 'item', true) + ') continue; ';\n\n      if ($typeIsArray) {\n        out += ' if (typeof item == \\'string\\') item = \\'\"\\' + item; ';\n      }\n\n      out += ' if (typeof itemIndices[item] == \\'number\\') { ' + $valid + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';\n    }\n\n    out += ' } ';\n\n    if ($isData) {\n      out += '  }  ';\n    }\n\n    out += ' if (!' + $valid + ') {   ';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + 'uniqueItems' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { i: i, j: j } ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT have duplicate items (items ## \\' + j + \\' and \\' + i + \\' are identical)\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema:  ';\n\n        if ($isData) {\n          out += 'validate.schema' + $schemaPath;\n        } else {\n          out += '' + $schema;\n        }\n\n        out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    var __err = out;\n    out = $$outStack.pop();\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + __err + ']); ';\n      } else {\n        out += ' validate.errors = [' + __err + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n\n    out += ' } ';\n\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n\n  return out;\n}; //all requires must be explicit because browserify won't work with dynamic requires\n\n\nvar dotjs = {\n  '$ref': ref,\n  allOf: allOf,\n  anyOf: anyOf,\n  '$comment': comment,\n  const: _const,\n  contains: contains,\n  dependencies: dependencies,\n  'enum': _enum,\n  format: format,\n  'if': _if,\n  items: items,\n  maximum: _limit,\n  minimum: _limit,\n  maxItems: _limitItems,\n  minItems: _limitItems,\n  maxLength: _limitLength,\n  minLength: _limitLength,\n  maxProperties: _limitProperties,\n  minProperties: _limitProperties,\n  multipleOf: multipleOf,\n  not: not,\n  oneOf: oneOf,\n  pattern: pattern,\n  properties: properties,\n  propertyNames: propertyNames,\n  required: required,\n  uniqueItems: uniqueItems,\n  validate: validate$1\n};\nvar toHash$1 = util.toHash;\n\nvar rules = function rules() {\n  var RULES = [{\n    type: 'number',\n    rules: [{\n      'maximum': ['exclusiveMaximum']\n    }, {\n      'minimum': ['exclusiveMinimum']\n    }, 'multipleOf', 'format']\n  }, {\n    type: 'string',\n    rules: ['maxLength', 'minLength', 'pattern', 'format']\n  }, {\n    type: 'array',\n    rules: ['maxItems', 'minItems', 'items', 'contains', 'uniqueItems']\n  }, {\n    type: 'object',\n    rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames', {\n      'properties': ['additionalProperties', 'patternProperties']\n    }]\n  }, {\n    rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if']\n  }];\n  var ALL = ['type', '$comment'];\n  var KEYWORDS = ['$schema', '$id', 'id', '$data', '$async', 'title', 'description', 'default', 'definitions', 'examples', 'readOnly', 'writeOnly', 'contentMediaType', 'contentEncoding', 'additionalItems', 'then', 'else'];\n  var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];\n  RULES.all = toHash$1(ALL);\n  RULES.types = toHash$1(TYPES);\n  RULES.forEach(function (group) {\n    group.rules = group.rules.map(function (keyword) {\n      var implKeywords;\n\n      if (typeof keyword == 'object') {\n        var key = Object.keys(keyword)[0];\n        implKeywords = keyword[key];\n        keyword = key;\n        implKeywords.forEach(function (k) {\n          ALL.push(k);\n          RULES.all[k] = true;\n        });\n      }\n\n      ALL.push(keyword);\n      var rule = RULES.all[keyword] = {\n        keyword: keyword,\n        code: dotjs[keyword],\n        implements: implKeywords\n      };\n      return rule;\n    });\n    RULES.all.$comment = {\n      keyword: '$comment',\n      code: dotjs.$comment\n    };\n    if (group.type) RULES.types[group.type] = group;\n  });\n  RULES.keywords = toHash$1(ALL.concat(KEYWORDS));\n  RULES.custom = {};\n  return RULES;\n};\n\nvar KEYWORDS = ['multipleOf', 'maximum', 'exclusiveMaximum', 'minimum', 'exclusiveMinimum', 'maxLength', 'minLength', 'pattern', 'additionalItems', 'maxItems', 'minItems', 'uniqueItems', 'maxProperties', 'minProperties', 'required', 'additionalProperties', 'enum', 'format', 'const'];\n\nvar data = function data(metaSchema, keywordsJsonPointers) {\n  for (var i = 0; i < keywordsJsonPointers.length; i++) {\n    metaSchema = JSON.parse(JSON.stringify(metaSchema));\n    var segments = keywordsJsonPointers[i].split('/');\n    var keywords = metaSchema;\n    var j;\n\n    for (j = 1; j < segments.length; j++) {\n      keywords = keywords[segments[j]];\n    }\n\n    for (j = 0; j < KEYWORDS.length; j++) {\n      var key = KEYWORDS[j];\n      var schema = keywords[key];\n\n      if (schema) {\n        keywords[key] = {\n          anyOf: [schema, {\n            $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#'\n          }]\n        };\n      }\n    }\n  }\n\n  return metaSchema;\n};\n\nvar MissingRefError$1 = error_classes.MissingRef;\nvar async = compileAsync;\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\n\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n\n  /* global Promise */\n\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(function (v) {\n      callback(null, v);\n    }, callback);\n  }\n\n  return p;\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema) ? compileAsync.call(self, {\n      $ref: $schema\n    }, true) : Promise.resolve();\n  }\n\n  function _compileAsync(schemaObj) {\n    try {\n      return self._compile(schemaObj);\n    } catch (e) {\n      if (e instanceof MissingRefError$1) return loadMissingSchema(e);\n      throw e;\n    }\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n      var schemaPromise = self._loadingSchemas[ref];\n\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function () {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n\nvar custom = function generate_custom(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $rule = this,\n      $definition = 'definition' + $lvl,\n      $rDef = $rule.definition,\n      $closingBraces = '';\n  var $compile, $inline, $macro, $ruleValidate, $validateCode;\n\n  if ($isData && $rDef.$data) {\n    $validateCode = 'keywordValidate' + $lvl;\n    var $validateSchema = $rDef.validateSchema;\n    out += ' var ' + $definition + ' = RULES.custom[\\'' + $keyword + '\\'].definition; var ' + $validateCode + ' = ' + $definition + '.validate;';\n  } else {\n    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);\n    if (!$ruleValidate) return;\n    $schemaValue = 'validate.schema' + $schemaPath;\n    $validateCode = $ruleValidate.code;\n    $compile = $rDef.compile;\n    $inline = $rDef.inline;\n    $macro = $rDef.macro;\n  }\n\n  var $ruleErrs = $validateCode + '.errors',\n      $i = 'i' + $lvl,\n      $ruleErr = 'ruleErr' + $lvl,\n      $asyncKeyword = $rDef.async;\n  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');\n\n  if (!($inline || $macro)) {\n    out += '' + $ruleErrs + ' = null;';\n  }\n\n  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';\n\n  if ($isData && $rDef.$data) {\n    $closingBraces += '}';\n    out += ' if (' + $schemaValue + ' === undefined) { ' + $valid + ' = true; } else { ';\n\n    if ($validateSchema) {\n      $closingBraces += '}';\n      out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') { ';\n    }\n  }\n\n  if ($inline) {\n    if ($rDef.statements) {\n      out += ' ' + $ruleValidate.validate + ' ';\n    } else {\n      out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';\n    }\n  } else if ($macro) {\n    var $it = it.util.copy(it);\n    var $closingBraces = '';\n    $it.level++;\n    var $nextValid = 'valid' + $it.level;\n    $it.schema = $ruleValidate.validate;\n    $it.schemaPath = '';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var $code = it.validate($it).replace(/validate\\.schema/g, $validateCode);\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + $code;\n  } else {\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    out += '  ' + $validateCode + '.call( ';\n\n    if (it.opts.passContext) {\n      out += 'this';\n    } else {\n      out += 'self';\n    }\n\n    if ($compile || $rDef.schema === false) {\n      out += ' , ' + $data + ' ';\n    } else {\n      out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';\n    }\n\n    out += ' , (dataPath || \\'\\')';\n\n    if (it.errorPath != '\"\"') {\n      out += ' + ' + it.errorPath;\n    }\n\n    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',\n        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';\n    var def_callRuleValidate = out;\n    out = $$outStack.pop();\n\n    if ($rDef.errors === false) {\n      out += ' ' + $valid + ' = ';\n\n      if ($asyncKeyword) {\n        out += 'await ';\n      }\n\n      out += '' + def_callRuleValidate + '; ';\n    } else {\n      if ($asyncKeyword) {\n        $ruleErrs = 'customErrors' + $lvl;\n        out += ' var ' + $ruleErrs + ' = null; try { ' + $valid + ' = await ' + def_callRuleValidate + '; } catch (e) { ' + $valid + ' = false; if (e instanceof ValidationError) ' + $ruleErrs + ' = e.errors; else throw e; } ';\n      } else {\n        out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';\n      }\n    }\n  }\n\n  if ($rDef.modifying) {\n    out += ' if (' + $parentData + ') ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';\n  }\n\n  out += '' + $closingBraces;\n\n  if ($rDef.valid) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  } else {\n    out += ' if ( ';\n\n    if ($rDef.valid === undefined) {\n      out += ' !';\n\n      if ($macro) {\n        out += '' + $nextValid;\n      } else {\n        out += '' + $valid;\n      }\n    } else {\n      out += ' ' + !$rDef.valid + ' ';\n    }\n\n    out += ') { ';\n    $errorKeyword = $rule.keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \\'' + $rule.keyword + '\\' } ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should pass \"' + $rule.keyword + '\" keyword validation\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    var __err = out;\n    out = $$outStack.pop();\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + __err + ']); ';\n      } else {\n        out += ' validate.errors = [' + __err + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n\n    var def_customError = out;\n    out = $$outStack.pop();\n\n    if ($inline) {\n      if ($rDef.errors) {\n        if ($rDef.errors != 'full') {\n          out += '  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \\'\\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = \"' + $errSchemaPath + '\"; } ';\n\n          if (it.opts.verbose) {\n            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';\n          }\n\n          out += ' } ';\n        }\n      } else {\n        if ($rDef.errors === false) {\n          out += ' ' + def_customError + ' ';\n        } else {\n          out += ' if (' + $errs + ' == errors) { ' + def_customError + ' } else {  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \\'\\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = \"' + $errSchemaPath + '\"; } ';\n\n          if (it.opts.verbose) {\n            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';\n          }\n\n          out += ' } } ';\n        }\n      }\n    } else if ($macro) {\n      out += '   var err =   ';\n      /* istanbul ignore else */\n\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \\'' + $rule.keyword + '\\' } ';\n\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should pass \"' + $rule.keyword + '\" keyword validation\\' ';\n        }\n\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n\n      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError(vErrors); ';\n        } else {\n          out += ' validate.errors = vErrors; return false; ';\n        }\n      }\n    } else {\n      if ($rDef.errors === false) {\n        out += ' ' + def_customError + ' ';\n      } else {\n        out += ' if (Array.isArray(' + $ruleErrs + ')) { if (vErrors === null) vErrors = ' + $ruleErrs + '; else vErrors = vErrors.concat(' + $ruleErrs + '); errors = vErrors.length;  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \\'\\') + ' + it.errorPath + ';  ' + $ruleErr + '.schemaPath = \"' + $errSchemaPath + '\";  ';\n\n        if (it.opts.verbose) {\n          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';\n        }\n\n        out += ' } } else { ' + def_customError + ' } ';\n      }\n    }\n\n    out += ' } ';\n\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n  }\n\n  return out;\n};\n\nvar $schema = \"http://json-schema.org/draft-07/schema#\";\nvar $id = \"http://json-schema.org/draft-07/schema#\";\nvar title = \"Core schema meta-schema\";\nvar definitions = {\n  schemaArray: {\n    type: \"array\",\n    minItems: 1,\n    items: {\n      $ref: \"#\"\n    }\n  },\n  nonNegativeInteger: {\n    type: \"integer\",\n    minimum: 0\n  },\n  nonNegativeIntegerDefault0: {\n    allOf: [{\n      $ref: \"#/definitions/nonNegativeInteger\"\n    }, {\n      \"default\": 0\n    }]\n  },\n  simpleTypes: {\n    \"enum\": [\"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\"]\n  },\n  stringArray: {\n    type: \"array\",\n    items: {\n      type: \"string\"\n    },\n    uniqueItems: true,\n    \"default\": []\n  }\n};\nvar type = [\"object\", \"boolean\"];\nvar properties$1 = {\n  $id: {\n    type: \"string\",\n    format: \"uri-reference\"\n  },\n  $schema: {\n    type: \"string\",\n    format: \"uri\"\n  },\n  $ref: {\n    type: \"string\",\n    format: \"uri-reference\"\n  },\n  $comment: {\n    type: \"string\"\n  },\n  title: {\n    type: \"string\"\n  },\n  description: {\n    type: \"string\"\n  },\n  \"default\": true,\n  readOnly: {\n    type: \"boolean\",\n    \"default\": false\n  },\n  examples: {\n    type: \"array\",\n    items: true\n  },\n  multipleOf: {\n    type: \"number\",\n    exclusiveMinimum: 0\n  },\n  maximum: {\n    type: \"number\"\n  },\n  exclusiveMaximum: {\n    type: \"number\"\n  },\n  minimum: {\n    type: \"number\"\n  },\n  exclusiveMinimum: {\n    type: \"number\"\n  },\n  maxLength: {\n    $ref: \"#/definitions/nonNegativeInteger\"\n  },\n  minLength: {\n    $ref: \"#/definitions/nonNegativeIntegerDefault0\"\n  },\n  pattern: {\n    type: \"string\",\n    format: \"regex\"\n  },\n  additionalItems: {\n    $ref: \"#\"\n  },\n  items: {\n    anyOf: [{\n      $ref: \"#\"\n    }, {\n      $ref: \"#/definitions/schemaArray\"\n    }],\n    \"default\": true\n  },\n  maxItems: {\n    $ref: \"#/definitions/nonNegativeInteger\"\n  },\n  minItems: {\n    $ref: \"#/definitions/nonNegativeIntegerDefault0\"\n  },\n  uniqueItems: {\n    type: \"boolean\",\n    \"default\": false\n  },\n  contains: {\n    $ref: \"#\"\n  },\n  maxProperties: {\n    $ref: \"#/definitions/nonNegativeInteger\"\n  },\n  minProperties: {\n    $ref: \"#/definitions/nonNegativeIntegerDefault0\"\n  },\n  required: {\n    $ref: \"#/definitions/stringArray\"\n  },\n  additionalProperties: {\n    $ref: \"#\"\n  },\n  definitions: {\n    type: \"object\",\n    additionalProperties: {\n      $ref: \"#\"\n    },\n    \"default\": {}\n  },\n  properties: {\n    type: \"object\",\n    additionalProperties: {\n      $ref: \"#\"\n    },\n    \"default\": {}\n  },\n  patternProperties: {\n    type: \"object\",\n    additionalProperties: {\n      $ref: \"#\"\n    },\n    propertyNames: {\n      format: \"regex\"\n    },\n    \"default\": {}\n  },\n  dependencies: {\n    type: \"object\",\n    additionalProperties: {\n      anyOf: [{\n        $ref: \"#\"\n      }, {\n        $ref: \"#/definitions/stringArray\"\n      }]\n    }\n  },\n  propertyNames: {\n    $ref: \"#\"\n  },\n  \"const\": true,\n  \"enum\": {\n    type: \"array\",\n    items: true,\n    minItems: 1,\n    uniqueItems: true\n  },\n  type: {\n    anyOf: [{\n      $ref: \"#/definitions/simpleTypes\"\n    }, {\n      type: \"array\",\n      items: {\n        $ref: \"#/definitions/simpleTypes\"\n      },\n      minItems: 1,\n      uniqueItems: true\n    }]\n  },\n  format: {\n    type: \"string\"\n  },\n  contentMediaType: {\n    type: \"string\"\n  },\n  contentEncoding: {\n    type: \"string\"\n  },\n  \"if\": {\n    $ref: \"#\"\n  },\n  then: {\n    $ref: \"#\"\n  },\n  \"else\": {\n    $ref: \"#\"\n  },\n  allOf: {\n    $ref: \"#/definitions/schemaArray\"\n  },\n  anyOf: {\n    $ref: \"#/definitions/schemaArray\"\n  },\n  oneOf: {\n    $ref: \"#/definitions/schemaArray\"\n  },\n  not: {\n    $ref: \"#\"\n  }\n};\nvar jsonSchemaDraft07 = {\n  $schema: $schema,\n  $id: $id,\n  title: title,\n  definitions: definitions,\n  type: type,\n  properties: properties$1,\n  \"default\": true\n};\nvar jsonSchemaDraft07$1 =\n/*#__PURE__*/\nObject.freeze({\n  $schema: $schema,\n  $id: $id,\n  title: title,\n  definitions: definitions,\n  type: type,\n  properties: properties$1,\n  default: jsonSchemaDraft07\n});\nvar require$$0 = getCjsExportFromNamespace(jsonSchemaDraft07$1);\nvar IDENTIFIER$1 = /^[a-z_$][a-z0-9_$-]*$/i;\nvar metaSchema = require$$0;\nvar keyword = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\nvar definitionSchema = {\n  definitions: {\n    simpleTypes: metaSchema.definitions.simpleTypes\n  },\n  type: 'object',\n  dependencies: {\n    schema: ['validate'],\n    $data: ['validate'],\n    statements: ['inline'],\n    valid: {\n      not: {\n        required: ['macro']\n      }\n    }\n  },\n  properties: {\n    type: metaSchema.properties.type,\n    schema: {\n      type: 'boolean'\n    },\n    statements: {\n      type: 'boolean'\n    },\n    dependencies: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    metaSchema: {\n      type: 'object'\n    },\n    modifying: {\n      type: 'boolean'\n    },\n    valid: {\n      type: 'boolean'\n    },\n    $data: {\n      type: 'boolean'\n    },\n    async: {\n      type: 'boolean'\n    },\n    errors: {\n      anyOf: [{\n        type: 'boolean'\n      }, {\n        const: 'full'\n      }]\n    }\n  }\n};\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\n\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');\n  if (!IDENTIFIER$1.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n    var dataType = definition.type;\n\n    if (Array.isArray(dataType)) {\n      for (var i = 0; i < dataType.length; i++) {\n        _addRule(keyword, dataType[i], definition);\n      }\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [metaSchema, {\n            '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#'\n          }]\n        };\n      }\n\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n\n    for (var i = 0; i < RULES.length; i++) {\n      var rg = RULES[i];\n\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = {\n        type: dataType,\n        rules: []\n      };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: custom,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\n\n\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\n\n\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n\n  for (var i = 0; i < RULES.length; i++) {\n    var rules = RULES[i].rules;\n\n    for (var j = 0; j < rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n\n  return this;\n}\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\n\n\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError) throw new Error('custom keyword definition is invalid: ' + this.errorsText(v.errors));else return false;\n}\n\nvar $schema$1 = \"http://json-schema.org/draft-07/schema#\";\nvar $id$1 = \"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#\";\nvar description = \"Meta-schema for $data reference (JSON Schema extension proposal)\";\nvar type$1 = \"object\";\nvar required$1 = [\"$data\"];\nvar properties$2 = {\n  $data: {\n    type: \"string\",\n    anyOf: [{\n      format: \"relative-json-pointer\"\n    }, {\n      format: \"json-pointer\"\n    }]\n  }\n};\nvar additionalProperties = false;\nvar data$1 = {\n  $schema: $schema$1,\n  $id: $id$1,\n  description: description,\n  type: type$1,\n  required: required$1,\n  properties: properties$2,\n  additionalProperties: additionalProperties\n};\nvar data$2 =\n/*#__PURE__*/\nObject.freeze({\n  $schema: $schema$1,\n  $id: $id$1,\n  description: description,\n  type: type$1,\n  required: required$1,\n  properties: properties$2,\n  additionalProperties: additionalProperties,\n  default: data$1\n});\nvar require$$1 = getCjsExportFromNamespace(data$2);\nvar ajv = Ajv;\nAjv.prototype.validate = validate$2;\nAjv.prototype.compile = compile$1;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\nAjv.prototype.compileAsync = async;\nAjv.prototype.addKeyword = keyword.add;\nAjv.prototype.getKeyword = keyword.get;\nAjv.prototype.removeKeyword = keyword.remove;\nAjv.prototype.validateKeyword = keyword.validate;\nAjv.ValidationError = error_classes.Validation;\nAjv.MissingRefError = error_classes.MissingRef;\nAjv.$dataMetaSchema = data;\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\nvar META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults'];\nvar META_SUPPORT_DATA = ['/properties'];\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\n\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats_1(opts.format);\n  this._cache = opts.cache || new cache();\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = fastJsonStableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n  if (opts.formats) addInitialFormats(this);\n  addDefaultMetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  if (opts.nullable) this.addKeyword('nullable', {\n    metaSchema: {\n      type: 'boolean'\n    }\n  });\n  addInitialSchemas(this);\n}\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\n\n\nfunction validate$2(schemaKeyRef, data$$1) {\n  var v;\n\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data$$1);\n  if (v.$async !== true) this.errors = v.errors;\n  return valid;\n}\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\n\n\nfunction compile$1(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n\n  return schemaObj.validate || this._compile(schemaObj);\n}\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\n\n\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) {\n      this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    }\n\n    return this;\n  }\n\n  var id = this._getId(schema);\n\n  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');\n  key = resolve_1.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\n\n\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\n\n\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n\n  var valid = this.validate($schema, schema);\n\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);\n  }\n\n  return valid;\n}\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;\n  return self._opts.defaultMeta;\n}\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\n\n\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n\n  switch (typeof schemaObj) {\n    case 'object':\n      return schemaObj.validate || this._compile(schemaObj);\n\n    case 'string':\n      return this.getSchema(schemaObj);\n\n    case 'undefined':\n      return _getSchemaFragment(this, keyRef);\n  }\n}\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve_1.schema.call(self, {\n    schema: {}\n  }, ref);\n\n  if (res) {\n    var schema = res.schema,\n        root = res.root,\n        baseId = res.baseId;\n    var v = compile_1.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new schema_obj({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve_1.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\n\n\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n\n    return this;\n  }\n\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n\n      _removeAllSchemas(this, this._refs);\n\n      this._cache.clear();\n\n      return this;\n\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n\n      this._cache.del(cacheKey);\n\n      var id = this._getId(schemaKeyRef);\n\n      if (id) {\n        id = resolve_1.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n\n  }\n\n  return this;\n}\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n\n      delete schemas[keyRef];\n    }\n  }\n}\n/* @this   Ajv */\n\n\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n\n  var cached = this._cache.get(cacheKey);\n\n  if (cached) return cached;\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n  var id = resolve_1.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve_1.normalizeId(schema.$schema))) this.validateSchema(schema, true);\n  var localRefs = resolve_1.ids.call(this, schema);\n  var schemaObj = new schema_obj({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n  return schemaObj;\n}\n/* @this   Ajv */\n\n\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true) callValidate.$async = true;\n    return callValidate;\n  }\n\n  schemaObj.compiling = true;\n  var currentOpts;\n\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n\n  try {\n    v = compile_1.call(this, schemaObj.schema, root, schemaObj.localRefs);\n  } catch (e) {\n    delete schemaObj.validate;\n    throw e;\n  } finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n  /* @this   {*} - custom context, see passContext option */\n\n  function callValidate() {\n    /* jshint validthis: true */\n    var _validate = schemaObj.validate;\n\n    var result = _validate.apply(this, arguments);\n\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case 'auto':\n      return _get$IdOrId;\n\n    case 'id':\n      return _getId;\n\n    default:\n      return _get$Id;\n  }\n}\n/* @this   Ajv */\n\n\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n/* @this   Ajv */\n\n\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\n\n\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n  var text = '';\n\n  for (var i = 0; i < errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n\n  return text.slice(0, -separator.length);\n}\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\n\n\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\nfunction addDefaultMetaSchema(self) {\n  var $dataSchema;\n\n  if (self._opts.$data) {\n    $dataSchema = require$$1;\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n\n  if (self._opts.meta === false) return;\n  var metaSchema = require$$0;\n  if (self._opts.$data) metaSchema = data(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) {\n    self.addSchema(optsSchemas[key], key);\n  }\n}\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n\n  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) {\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  }\n\n  return metaOpts;\n}\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n\n  if (logger === false) {\n    self.logger = {\n      log: noop,\n      warn: noop,\n      error: noop\n    };\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\nfunction noop() {}\n\nvar Criteria = Object.assign({}, initialCriteria);\n\nvar CriteriaEvaluator =\n/*#__PURE__*/\nfunction () {\n  function CriteriaEvaluator(criteriaObject) {\n    var _this = this;\n\n    classCallCheck(this, CriteriaEvaluator);\n    var criteriaValidator = this.getCriteriaValidator();\n    this.criteria = [];\n\n    if (!criteriaValidator(criteriaObject)) {\n      var message = '';\n      criteriaValidator.errors.forEach(function (error) {\n        message += \"\\noptions\".concat(error.dataPath, \" \").concat(error.message);\n      });\n      throw new Error(message);\n    }\n\n    Object.keys(criteriaObject).forEach(function (criterionkey) {\n      var optionsObject = criteriaObject[criterionkey];\n      var Criterion = Criteria[\"\".concat(criterionkey, \"Criterion\")];\n      var optionsArray = optionsObject instanceof Array ? optionsObject : [optionsObject];\n      optionsArray.forEach(function (options) {\n        return _this.criteria.push(new Criterion(options, criterionkey));\n      });\n    });\n  }\n\n  createClass(CriteriaEvaluator, [{\n    key: \"getMaxTargets\",\n    value: function getMaxTargets() {\n      var newTarget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var result = 0;\n      this.criteria.forEach(function (criterion) {\n        var newTargetMatch = newTarget === !!criterion.options.newTarget;\n\n        if (criterion instanceof Criteria.MaxTargetsCriterion && newTargetMatch) {\n          var limit = criterion.options.limit;\n\n          if (limit > result) {\n            result = limit;\n          }\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"getCriteriaValidator\",\n    value: function getCriteriaValidator() {\n      if (CriteriaEvaluator.criteriaValidator) {\n        return CriteriaEvaluator.criteriaValidator;\n      }\n\n      var schema = {\n        properties: {},\n        definitions: {}\n      };\n      Object.keys(Criteria).forEach(function (key) {\n        var Criterion = Criteria[key];\n\n        if (Criterion.prototype instanceof BaseCriterion) {\n          var criterionkey = key.replace(/Criterion$/, '');\n          var criterionDefinition = \"#/definitions/\".concat(criterionkey);\n          schema.definitions[criterionkey] = Criteria[\"\".concat(criterionkey, \"Schema\")];\n          schema.properties[criterionkey] = {\n            oneOf: [{\n              $ref: criterionDefinition\n            }, {\n              type: 'array',\n              items: {\n                $ref: criterionDefinition\n              }\n            }]\n          };\n        }\n      });\n      CriteriaEvaluator.criteriaValidator = new ajv().compile(schema);\n      return CriteriaEvaluator.criteriaValidator;\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(data) {\n      var nonconformities = [];\n      this.criteria.forEach(function (criterion) {\n        var criterionResult = criterion.evaluate(data);\n\n        if (!criterionResult.passed) {\n          nonconformities.push(criterionResult);\n        }\n      });\n      return nonconformities;\n    }\n  }], [{\n    key: \"setCriterion\",\n    value: function setCriterion(criterionKey, criterionDefinitions) {\n      Criteria[criterionKey] = criterionDefinitions;\n    }\n  }]);\n  return CriteriaEvaluator;\n}();\n\nvar both = {\n  Location: {}\n};\nvar baseline = {\n  TargetType: {},\n  MaxTargetsPerOrgan: {\n    limit: 2\n  },\n  MaxTargets: {\n    limit: 5\n  },\n  MeasurementsLength: [{\n    longAxis: 10,\n    longAxisSliceThicknessMultiplier: 2,\n    modalityIn: [\"CT\", \"MR\"],\n    locationNotIn: [\"Lymph Node\"],\n    message: \"Extranodal lesions must be >= 10mm long axis AND >= double the acquisition slice thickness by CT and MR\"\n  }, {\n    shortAxis: 20,\n    longAxis: 20,\n    modalityIn: [\"PX\", \"XA\"],\n    locationNotIn: [\"Lymph Node\"],\n    message: \"Extranodal lesions must be >= 20mm on chest x-ray (although x-rays rarely used for clinical trial assessment)\"\n  }, {\n    shortAxis: 15,\n    shortAxisSliceThicknessMultiplier: 2,\n    modalityIn: [\"CT\", \"MR\"],\n    locationIn: [\"Lymph Node\"],\n    message: \"Nodal lesions must be >= 15mm short axis AND >= double the acquisition slice thickness by CT and MR\"\n  }]\n};\nvar followup = {};\nvar recist = {\n  both: both,\n  baseline: baseline,\n  followup: followup\n};\nvar recistEvaluation =\n/*#__PURE__*/\nObject.freeze({\n  both: both,\n  baseline: baseline,\n  followup: followup,\n  default: recist\n});\nvar recist11 = recistEvaluation;\nvar initialEvaluations =\n/*#__PURE__*/\nObject.freeze({\n  recist11: recist11\n});\nvar evaluations = Object.assign({}, initialEvaluations);\nvar BASELINE = 'baseline';\nvar FOLLOWUP = 'followup';\nvar BOTH = 'both';\nvar TARGETS = 'targets';\nvar NONTARGETS = 'nonTargets';\n\nvar ConformanceCriteria =\n/*#__PURE__*/\nfunction () {\n  function ConformanceCriteria(measurementApi, timepointApi) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, ConformanceCriteria);\n    this.measurementApi = measurementApi;\n    this.timepointApi = timepointApi;\n    this.nonconformities = [];\n    this.groupedNonConformities = [];\n    this.maxTargets = null;\n    this.maxNewTargets = null;\n    this.options = options;\n  }\n\n  createClass(ConformanceCriteria, [{\n    key: \"loadStudy\",\n    value: function loadStudy(studyInstanceUid) {\n      if (typeof this.options.loadStudy !== 'function') {\n        throw new Error('loadStudy callback is not defined');\n      }\n\n      return this.options.loadStudy(null, studyInstanceUid);\n    }\n  }, {\n    key: \"validate\",\n    value: function () {\n      var _validate = asyncToGenerator(\n      /*#__PURE__*/\n      regenerator.mark(function _callee(trialCriteriaType) {\n        var baselinePromise, followupPromise, _ref, _ref2, baselineData, followupData, mergedData, resultBoth, resultBaseline, resultFollowup, nonconformities, groupedNonConformities;\n\n        return regenerator.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                baselinePromise = this.getData(BASELINE);\n                followupPromise = this.getData(FOLLOWUP);\n                _context.next = 4;\n                return Promise.all([baselinePromise, followupPromise]);\n\n              case 4:\n                _ref = _context.sent;\n                _ref2 = slicedToArray(_ref, 2);\n                baselineData = _ref2[0];\n                followupData = _ref2[1];\n                mergedData = {\n                  targets: [],\n                  nonTargets: []\n                };\n                mergedData.targets = mergedData.targets.concat(baselineData.targets);\n                mergedData.targets = mergedData.targets.concat(followupData.targets);\n                mergedData.nonTargets = mergedData.nonTargets.concat(baselineData.nonTargets);\n                mergedData.nonTargets = mergedData.nonTargets.concat(followupData.nonTargets);\n                this.maxTargets = null;\n                this.maxNewTargets = null;\n                resultBoth = this.validateTimepoint(BOTH, trialCriteriaType, mergedData);\n                resultBaseline = this.validateTimepoint(BASELINE, trialCriteriaType, baselineData);\n                resultFollowup = this.validateTimepoint(FOLLOWUP, trialCriteriaType, followupData);\n                nonconformities = resultBaseline.concat(resultFollowup).concat(resultBoth);\n                groupedNonConformities = this.groupNonConformities(nonconformities); // Keep both? Group the data only on viewer/measurementTable views?\n                // Work with not grouped data (worse lookup performance on measurementTableRow)?\n\n                this.nonconformities = nonconformities;\n                this.groupedNonConformities = groupedNonConformities;\n                console.warn('nonconformities');\n                console.warn(nonconformities);\n                console.warn('groupedNonConformities');\n                console.warn(groupedNonConformities);\n                return _context.abrupt(\"return\", nonconformities);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function validate(_x) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }, {\n    key: \"groupNonConformities\",\n    value: function groupNonConformities(nonconformities) {\n      var groups = {};\n      var toolsGroupsMap = this.measurementApi.toolsGroupsMap;\n      nonconformities.forEach(function (nonConformity) {\n        if (nonConformity.isGlobal) {\n          groups.globals = groups.globals || {\n            messages: []\n          };\n          groups.globals.messages.push(nonConformity.message);\n          return;\n        }\n\n        nonConformity.measurements.forEach(function (measurement) {\n          var groupName = toolsGroupsMap[measurement.toolType];\n          groups[groupName] = groups[groupName] || {\n            measurementNumbers: {}\n          };\n          var group = groups[groupName];\n          var measureNumber = measurement.measurementNumber;\n          var measurementNumbers = group.measurementNumbers[measureNumber];\n\n          if (!measurementNumbers) {\n            measurementNumbers = group.measurementNumbers[measureNumber] = {\n              messages: [],\n              measurements: []\n            };\n          }\n\n          measurementNumbers.messages.push(nonConformity.message);\n          measurementNumbers.measurements.push(measurement);\n        });\n      });\n      return groups;\n    }\n  }, {\n    key: \"validateTimepoint\",\n    value: function validateTimepoint(timepointType, trialCriteriaType, data) {\n      var _this = this;\n\n      var evaluators = this.getEvaluators(timepointType, trialCriteriaType);\n      var nonconformities = [];\n      evaluators.forEach(function (evaluator) {\n        var maxTargets = evaluator.getMaxTargets(false);\n        var maxNewTargets = evaluator.getMaxTargets(true);\n\n        if (maxTargets) {\n          _this.maxTargets = maxTargets;\n        }\n\n        if (maxNewTargets) {\n          _this.maxNewTargets = maxNewTargets;\n        }\n\n        var result = evaluator.evaluate(data);\n\n        if (result.length > 0) {\n          result.forEach(function (resultItem) {\n            resultItem.timepointType = timepointType;\n          });\n        }\n\n        nonconformities = nonconformities.concat(result);\n      });\n      return nonconformities;\n    }\n  }, {\n    key: \"getEvaluators\",\n    value: function getEvaluators(timepointType, trialCriteriaType) {\n      var evaluators = [];\n      console.warn(evaluations);\n      var trialCriteriaTypeId = trialCriteriaType.id.toLowerCase();\n      var evaluation = evaluations[trialCriteriaTypeId];\n\n      if (evaluation) {\n        var evaluationTimepoint = evaluation[timepointType];\n\n        if (evaluationTimepoint) {\n          evaluators.push(new CriteriaEvaluator(evaluationTimepoint));\n        }\n      }\n\n      return evaluators;\n    }\n    /*\n     * Build the data that will be used to do the conformance criteria checks\n     */\n\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = asyncToGenerator(\n      /*#__PURE__*/\n      regenerator.mark(function _callee2(timepointType) {\n        var _this2 = this;\n\n        var data, studyPromises, fillData;\n        return regenerator.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = {\n                  targets: [],\n                  nonTargets: []\n                };\n                studyPromises = [];\n\n                fillData = function fillData(measurementType) {\n                  var measurements = _this2.measurementApi.fetch(measurementType);\n\n                  measurements.forEach(function (measurement) {\n                    var studyInstanceUid = measurement.studyInstanceUid;\n                    var timepointId = measurement.timepointId;\n\n                    var timepoint = timepointId && _this2.timepointApi.timepoints.find(function (a) {\n                      return a.timepointId === timepointId;\n                    });\n\n                    if (!timepoint || timepointType !== BOTH && timepoint.timepointType !== timepointType) {\n                      return;\n                    }\n\n                    var promise = _this2.loadStudy(studyInstanceUid);\n\n                    promise.then(function (studyMetadata) {\n                      data[measurementType].push({\n                        measurement: measurement,\n                        metadata: studyMetadata.getFirstInstance(),\n                        timepoint: timepoint\n                      });\n                    }, function (error) {\n                      throw new Error(error);\n                    });\n                    studyPromises.push(promise);\n                  });\n                };\n\n                fillData(TARGETS);\n                fillData(NONTARGETS);\n                _context2.next = 7;\n                return Promise.all(studyPromises);\n\n              case 7:\n                return _context2.abrupt(\"return\", data);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getData(_x2) {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }], [{\n    key: \"setEvaluationDefinitions\",\n    value: function setEvaluationDefinitions(evaluationKey, evaluationDefinitions) {\n      evaluations[evaluationKey] = evaluationDefinitions;\n    }\n  }]);\n  return ConformanceCriteria;\n}(); //OHIF.measurements.ConformanceCriteria = ConformanceCriteria;\n\n\nfunction getImageAttributes(element) {\n  // Get the Cornerstone imageId\n  var enabledElement = cornerstone.getEnabledElement(element);\n  var imageId = enabledElement.image.imageId; // Get studyInstanceUid & patientId\n\n  var study = cornerstone.metaData.get('study', imageId);\n  var studyInstanceUid = study.studyInstanceUid;\n  var patientId = study.patientId; // Get seriesInstanceUid\n\n  var series = cornerstone.metaData.get('series', imageId);\n  var seriesInstanceUid = series.seriesInstanceUid; // Get sopInstanceUid\n\n  var sopInstance = cornerstone.metaData.get('instance', imageId);\n  var sopInstanceUid = sopInstance.sopInstanceUid;\n  var frameIndex = sopInstance.frame || 0;\n  var imagePath = [studyInstanceUid, seriesInstanceUid, sopInstanceUid, frameIndex].join('_');\n  return {\n    patientId: patientId,\n    studyInstanceUid: studyInstanceUid,\n    seriesInstanceUid: seriesInstanceUid,\n    sopInstanceUid: sopInstanceUid,\n    frameIndex: frameIndex,\n    imagePath: imagePath\n  };\n}\n\nfunction handleSingleMeasurementAdded(_ref) {\n  var eventData = _ref.eventData,\n      tool = _ref.tool;\n  var measurementApi = MeasurementApi.Instance;\n\n  if (!measurementApi) {\n    log$1.warn('Measurement API is not initialized');\n  }\n\n  var measurementData = eventData.measurementData,\n      toolType = eventData.toolType;\n  var collection = measurementApi.tools[toolType]; // Stop here if the tool data shall not be persisted (e.g. temp tools)\n\n  if (!collection) return; // Stop here if there's no measurement data or if it was cancelled\n\n  if (!measurementData || measurementData.cancelled) return;\n  log$1.info('CornerstoneToolsMeasurementAdded');\n  var imageAttributes = getImageAttributes(eventData.element);\n  var measurement = Object.assign({}, measurementData, imageAttributes, {\n    lesionNamingNumber: measurementData.lesionNamingNumber,\n    userId: user.getUserId(),\n    toolType: toolType\n  });\n  var addedMeasurement = measurementApi.addMeasurement(toolType, measurement);\n  Object.assign(measurementData, addedMeasurement);\n  var measurementLabel = getLabel(measurementData);\n\n  if (measurementLabel) {\n    measurementData.labels = [measurementLabel];\n  } // TODO: This is very hacky, but will work for now\n\n\n  cornerstone.getEnabledElements().forEach(function (enabledElement) {\n    cornerstone.updateImage(enabledElement.element);\n  }); // TODO: Notify about the last activated measurement\n\n  if (MeasurementApi.isToolIncluded(tool)) ;\n}\n\nfunction handleChildMeasurementAdded(_ref) {\n  var eventData = _ref.eventData,\n      tool = _ref.tool,\n      toolGroupId = _ref.toolGroupId,\n      toolGroup = _ref.toolGroup;\n  var measurementApi = MeasurementApi.Instance;\n\n  if (!measurementApi) {\n    log$1.warn('Measurement API is not initialized');\n  }\n\n  var measurementData = eventData.measurementData;\n  var collection = measurementApi.tools[tool.parentTool]; // Stop here if the tool data shall not be persisted (e.g. temp tools)\n\n  if (!collection) return; // Stop here if there's no measurement data or if it was cancelled\n\n  if (!measurementData || measurementData.cancelled) return;\n  log$1.info('CornerstoneToolsMeasurementAdded');\n  var imageAttributes = getImageAttributes(eventData.element);\n  var additionalProperties = Object.assign(imageAttributes, {\n    userId: user.getUserId()\n  });\n  var childMeasurement = Object.assign({}, measurementData, additionalProperties);\n  var parentMeasurement = collection.find(function (t) {\n    return t.toolType === tool.parentTool && t.patientId === imageAttributes.patientId && t[tool.attribute] === null;\n  }); // Check if a measurement to fit this child tool already exists\n\n  if (parentMeasurement) {\n    var key = tool.attribute; // Add the createdAt attribute\n\n    childMeasurement.createdAt = new Date(); // Update the parent measurement\n\n    parentMeasurement[key] = childMeasurement;\n    parentMeasurement.childToolsCount = (parentMeasurement.childToolsCount || 0) + 1;\n    measurementApi.updateMeasurement(tool.parentTool, parentMeasurement); // Update the measurementData ID and lesionNamingNumber\n\n    measurementData._id = parentMeasurement._id;\n    measurementData.lesionNamingNumber = parentMeasurement.lesionNamingNumber;\n  } else {\n    var measurement = {\n      toolType: tool.parentTool,\n      lesionNamingNumber: measurementData.lesionNamingNumber,\n      userId: user.getUserId(),\n      patientId: imageAttributes.patientId,\n      studyInstanceUid: imageAttributes.studyInstanceUid\n    };\n    measurement[tool.attribute] = Object.assign({}, measurementData, additionalProperties);\n    var addedMeasurement = measurementApi.addMeasurement(tool.parentTool, measurement);\n    Object.assign(measurementData, addedMeasurement);\n  }\n\n  var measurementLabel = getLabel(measurementData);\n\n  if (measurementLabel) {\n    measurementData.labels = [measurementLabel];\n  } // TODO: This is very hacky, but will work for now\n\n\n  cornerstone.getEnabledElements().forEach(function (enabledElement) {\n    cornerstone.updateImage(enabledElement.element);\n  }); // TODO: Notify about the last activated measurement\n\n  if (MeasurementApi.isToolIncluded(tool)) ;\n}\n\nfunction handleSingleMeasurementModified(_ref) {\n  var eventData = _ref.eventData,\n      tool = _ref.tool,\n      toolGroupId = _ref.toolGroupId,\n      toolGroup = _ref.toolGroup;\n  var measurementApi = MeasurementApi.Instance;\n\n  if (!measurementApi) {\n    log$1.warn('Measurement API is not initialized');\n  }\n\n  var measurementData = eventData.measurementData,\n      toolType = eventData.toolType;\n  var collection = measurementApi.tools[toolType]; // Stop here if the tool data shall not be persisted (e.g. temp tools)\n\n  if (!collection) return;\n  log$1.info('CornerstoneToolsMeasurementModified');\n  var measurement = collection.find(function (t) {\n    return t._id === measurementData._id;\n  }); // Stop here if the measurement is already deleted\n\n  if (!measurement) return;\n  measurement = Object.assign(measurement, measurementData);\n  measurement.viewport = cornerstone.getViewport(eventData.element);\n  measurementApi.updateMeasurement(toolType, measurement); // TODO: Notify about the last activated measurement\n\n  if (MeasurementApi.isToolIncluded(tool)) ;\n}\n\nfunction handleChildMeasurementModified(_ref) {\n  var eventData = _ref.eventData,\n      tool = _ref.tool,\n      toolGroupId = _ref.toolGroupId,\n      toolGroup = _ref.toolGroup;\n  var measurementApi = MeasurementApi.Instance;\n\n  if (!measurementApi) {\n    log$1.warn('Measurement API is not initialized');\n  }\n\n  var measurementData = eventData.measurementData;\n  var collection = measurementApi.tools[tool.parentTool]; // Stop here if the tool data shall not be persisted (e.g. temp tools)\n\n  if (!collection) return;\n  log$1.info('CornerstoneToolsMeasurementModified');\n  var measurement = collection.find(function (t) {\n    return t._id === measurementData._id;\n  });\n  var childMeasurement = measurement && measurement[tool.attribute]; // Stop here if the measurement is already deleted\n\n  if (!childMeasurement) return;\n  childMeasurement = Object.assign(childMeasurement, measurementData);\n  childMeasurement.viewport = cornerstone.getViewport(eventData.element); // Update the parent measurement\n\n  measurement[tool.attribute] = childMeasurement;\n  measurementApi.updateMeasurement(tool.parentTool, measurement); // TODO: Notify about the last activated measurement\n\n  if (MeasurementApi.isToolIncluded(tool)) ;\n}\n\nfunction handleSingleMeasurementRemoved(_ref) {\n  var eventData = _ref.eventData,\n      tool = _ref.tool,\n      toolGroupId = _ref.toolGroupId,\n      toolGroup = _ref.toolGroup;\n  log$1.info('CornerstoneToolsMeasurementRemoved');\n  var measurementData = eventData.measurementData,\n      toolType = eventData.toolType;\n  var measurementApi = MeasurementApi.Instance;\n\n  if (!measurementApi) {\n    log$1.warn('Measurement API is not initialized');\n  }\n\n  var collection = measurementApi.tools[toolType]; // Stop here if the tool data shall not be persisted (e.g. temp tools)\n\n  if (!collection) return;\n  var measurementTypeId = measurementApi.toolsGroupsMap[toolType];\n  var measurement = collection.find(function (t) {\n    return t._id === measurementData._id;\n  }); // Stop here if the measurement is already gone or never existed\n\n  if (!measurement) return; // Remove all the measurements with the given type and number\n\n  var lesionNamingNumber = measurement.lesionNamingNumber,\n      timepointId = measurement.timepointId;\n  measurementApi.deleteMeasurements(toolType, measurementTypeId, {\n    lesionNamingNumber: lesionNamingNumber,\n    timepointId: timepointId\n  }); // TODO: This is very hacky, but will work for now\n\n  cornerstone.getEnabledElements().forEach(function (enabledElement) {\n    cornerstone.updateImage(enabledElement.element);\n  });\n  if (MeasurementApi.isToolIncluded(tool)) ;\n}\n\nfunction handleChildMeasurementRemoved(_ref) {\n  var eventData = _ref.eventData,\n      tool = _ref.tool,\n      toolGroupId = _ref.toolGroupId,\n      toolGroup = _ref.toolGroup;\n  log$1.info('CornerstoneToolsMeasurementRemoved');\n  var measurementData = eventData.measurementData;\n  var measurementApi = MeasurementApi.Instance;\n\n  if (!measurementApi) {\n    log$1.warn('Measurement API is not initialized');\n  }\n\n  var collection = measurementApi.tools[tool.parentTool]; // Stop here if the tool data shall not be persisted (e.g. temp tools)\n\n  if (!collection) return;\n  var measurementIndex = collection.findIndex(function (t) {\n    return t._id === measurementData._id;\n  });\n  var measurement = measurementIndex > -1 ? collection[measurementIndex] : null; // Stop here if the measurement is already gone or never existed\n\n  if (!measurement) return;\n\n  if (measurement.childToolsCount === 1) {\n    // Remove the measurement\n    collection.splice(measurementIndex, 1);\n    measurementApi.onMeasurementRemoved(tool.parentTool, measurement);\n  } else {\n    // Update the measurement\n    measurement[tool.attribute] = null;\n    measurement.childToolsCount = (measurement.childToolsCount || 0) - 1;\n    measurementApi.updateMeasurement(tool.parentTool, measurement);\n  } // TODO: This is very hacky, but will work for now\n\n\n  cornerstone.getEnabledElements().forEach(function (enabledElement) {\n    cornerstone.updateImage(enabledElement.element);\n  });\n  if (MeasurementApi.isToolIncluded(tool)) ;\n}\n\nvar getEventData = function getEventData(event) {\n  var eventData = event.detail;\n\n  if (eventData.toolName) {\n    eventData.toolType = eventData.toolName;\n  }\n\n  return eventData;\n};\n\nvar MeasurementHandlers = {\n  handleSingleMeasurementAdded: handleSingleMeasurementAdded,\n  handleChildMeasurementAdded: handleChildMeasurementAdded,\n  handleSingleMeasurementModified: handleSingleMeasurementModified,\n  handleChildMeasurementModified: handleChildMeasurementModified,\n  handleSingleMeasurementRemoved: handleSingleMeasurementRemoved,\n  handleChildMeasurementRemoved: handleChildMeasurementRemoved,\n  onAdded: function onAdded(event) {\n    var eventData = getEventData(event);\n    var toolType = eventData.toolType;\n\n    var _MeasurementApi$getTo = MeasurementApi.getToolConfiguration(toolType),\n        toolGroupId = _MeasurementApi$getTo.toolGroupId,\n        toolGroup = _MeasurementApi$getTo.toolGroup,\n        tool = _MeasurementApi$getTo.tool;\n\n    var params = {\n      eventData: eventData,\n      tool: tool,\n      toolGroupId: toolGroupId,\n      toolGroup: toolGroup\n    };\n    if (!tool) return;\n\n    if (tool.parentTool) {\n      handleChildMeasurementAdded(params);\n    } else {\n      handleSingleMeasurementAdded(params);\n    }\n  },\n  onModified: function onModified(event) {\n    var eventData = getEventData(event);\n    var toolType = eventData.toolType;\n\n    var _MeasurementApi$getTo2 = MeasurementApi.getToolConfiguration(toolType),\n        toolGroupId = _MeasurementApi$getTo2.toolGroupId,\n        toolGroup = _MeasurementApi$getTo2.toolGroup,\n        tool = _MeasurementApi$getTo2.tool;\n\n    var params = {\n      eventData: eventData,\n      tool: tool,\n      toolGroupId: toolGroupId,\n      toolGroup: toolGroup\n    };\n    if (!tool) return;\n\n    if (tool.parentTool) {\n      handleChildMeasurementModified(params);\n    } else {\n      handleSingleMeasurementModified(params);\n    }\n  },\n  onRemoved: function onRemoved(event) {\n    var eventData = getEventData(event);\n    var toolType = eventData.toolType;\n\n    var _MeasurementApi$getTo3 = MeasurementApi.getToolConfiguration(toolType),\n        toolGroupId = _MeasurementApi$getTo3.toolGroupId,\n        toolGroup = _MeasurementApi$getTo3.toolGroup,\n        tool = _MeasurementApi$getTo3.tool;\n\n    var params = {\n      eventData: eventData,\n      tool: tool,\n      toolGroupId: toolGroupId,\n      toolGroup: toolGroup\n    };\n    if (!tool) return;\n\n    if (tool.parentTool) {\n      handleChildMeasurementRemoved(params);\n    } else {\n      handleSingleMeasurementRemoved(params);\n    }\n  }\n};\nvar targets = {\n  id: 'targets',\n  name: 'Targets',\n  childTools: [bidirectional, targetCR, targetUN, targetNE],\n  options: {\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar nonTargets = {\n  id: 'nonTargets',\n  name: 'Non-Targets',\n  childTools: [nonTarget],\n  options: {\n    caseProgress: {\n      include: true,\n      evaluate: true\n    }\n  }\n};\nvar lodash_clonedeep = createCommonjsModule(function (module, exports) {\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** Used as references for various `Number` constants. */\n\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  /** `Object#toString` result references. */\n\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to match `RegExp` flags from their coerced string values. */\n\n  var reFlags = /\\w*$/;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Detect free variable `exports`. */\n\n  var freeExports = exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n\n\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n\n    return array;\n  }\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n\n\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n\n    return accumulator;\n  }\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Checks if `value` is a host object in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n   */\n\n\n  function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n\n    if (value != null && typeof value.toString != 'function') {\n      try {\n        result = !!(value + '');\n      } catch (e) {}\n    }\n\n    return result;\n  }\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n\n\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n    map.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n\n\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root['__core-js_shared__'];\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /** Used to resolve the decompiled source of functions. */\n\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var objectToString = objectProto.toString;\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      getPrototype = overArg(Object.getPrototypeOf, Object),\n      objectCreate = Object.create,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object);\n  /* Built-in method references that are verified to be native. */\n\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n  /** Used to detect maps, sets, and weakmaps. */\n\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    return this.has(key) && delete this.__data__[key];\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    return getMapData(this, key)['delete'](key);\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    getMapData(this, key).set(key, value);\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Stack(entries) {\n    this.__data__ = new ListCache(entries);\n  }\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n\n\n  function stackClear() {\n    this.__data__ = new ListCache();\n  }\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function stackDelete(key) {\n    return this.__data__['delete'](key);\n  }\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n\n\n  function stackSet(key, value) {\n    var cache = this.__data__;\n\n    if (cache instanceof ListCache) {\n      var pairs = cache.__data__;\n\n      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n        pairs.push([key, value]);\n        return this;\n      }\n\n      cache = this.__data__ = new MapCache(pairs);\n    }\n\n    cache.set(key, value);\n    return this;\n  } // Add methods to `Stack`.\n\n\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];\n    var length = result.length,\n        skipIndexes = !!length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n\n\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n      object[key] = value;\n    }\n  }\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.assign` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n  }\n  /**\n   * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n   * traversed objects.\n   *\n   * @private\n   * @param {*} value The value to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @param {boolean} [isFull] Specify a clone including symbols.\n   * @param {Function} [customizer] The function to customize cloning.\n   * @param {string} [key] The key of `value`.\n   * @param {Object} [object] The parent object of `value`.\n   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n   * @returns {*} Returns the cloned value.\n   */\n\n\n  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n    var result;\n\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    if (!isObject(value)) {\n      return value;\n    }\n\n    var isArr = isArray(value);\n\n    if (isArr) {\n      result = initCloneArray(value);\n\n      if (!isDeep) {\n        return copyArray(value, result);\n      }\n    } else {\n      var tag = getTag(value),\n          isFunc = tag == funcTag || tag == genTag;\n\n      if (isBuffer(value)) {\n        return cloneBuffer(value, isDeep);\n      }\n\n      if (tag == objectTag || tag == argsTag || isFunc && !object) {\n        if (isHostObject(value)) {\n          return object ? value : {};\n        }\n\n        result = initCloneObject(isFunc ? {} : value);\n\n        if (!isDeep) {\n          return copySymbols(value, baseAssign(result, value));\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {};\n        }\n\n        result = initCloneByTag(value, tag, baseClone, isDeep);\n      }\n    } // Check for circular references and return its corresponding clone.\n\n\n    stack || (stack = new Stack());\n    var stacked = stack.get(value);\n\n    if (stacked) {\n      return stacked;\n    }\n\n    stack.set(value, result);\n\n    if (!isArr) {\n      var props = isFull ? getAllKeys(value) : keys(value);\n    }\n\n    arrayEach(props || value, function (subValue, key) {\n      if (props) {\n        key = subValue;\n        subValue = value[key];\n      } // Recursively populate clone (susceptible to call stack limits).\n\n\n      assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n    });\n    return result;\n  }\n  /**\n   * The base implementation of `_.create` without support for assigning\n   * properties to the created object.\n   *\n   * @private\n   * @param {Object} prototype The object to inherit from.\n   * @returns {Object} Returns the new object.\n   */\n\n\n  function baseCreate(proto) {\n    return isObject(proto) ? objectCreate(proto) : {};\n  }\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  /**\n   * The base implementation of `getTag`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n\n  function baseGetTag(value) {\n    return objectToString.call(value);\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates a clone of  `buffer`.\n   *\n   * @private\n   * @param {Buffer} buffer The buffer to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Buffer} Returns the cloned buffer.\n   */\n\n\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice();\n    }\n\n    var result = new buffer.constructor(buffer.length);\n    buffer.copy(result);\n    return result;\n  }\n  /**\n   * Creates a clone of `arrayBuffer`.\n   *\n   * @private\n   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n   * @returns {ArrayBuffer} Returns the cloned array buffer.\n   */\n\n\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n  }\n  /**\n   * Creates a clone of `dataView`.\n   *\n   * @private\n   * @param {Object} dataView The data view to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned data view.\n   */\n\n\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n  }\n  /**\n   * Creates a clone of `map`.\n   *\n   * @private\n   * @param {Object} map The map to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned map.\n   */\n\n\n  function cloneMap(map, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n    return arrayReduce(array, addMapEntry, new map.constructor());\n  }\n  /**\n   * Creates a clone of `regexp`.\n   *\n   * @private\n   * @param {Object} regexp The regexp to clone.\n   * @returns {Object} Returns the cloned regexp.\n   */\n\n\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n  }\n  /**\n   * Creates a clone of `set`.\n   *\n   * @private\n   * @param {Object} set The set to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned set.\n   */\n\n\n  function cloneSet(set, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n    return arrayReduce(array, addSetEntry, new set.constructor());\n  }\n  /**\n   * Creates a clone of the `symbol` object.\n   *\n   * @private\n   * @param {Object} symbol The symbol object to clone.\n   * @returns {Object} Returns the cloned symbol object.\n   */\n\n\n  function cloneSymbol(symbol) {\n    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n  }\n  /**\n   * Creates a clone of `typedArray`.\n   *\n   * @private\n   * @param {Object} typedArray The typed array to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned typed array.\n   */\n\n\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n  }\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function copyArray(source, array) {\n    var index = -1,\n        length = source.length;\n    array || (array = Array(length));\n\n    while (++index < length) {\n      array[index] = source[index];\n    }\n\n    return array;\n  }\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  function copyObject(source, props, object, customizer) {\n    object || (object = {});\n    var index = -1,\n        length = props.length;\n\n    while (++index < length) {\n      var key = props[index];\n      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n      assignValue(object, key, newValue === undefined ? source[key] : newValue);\n    }\n\n    return object;\n  }\n  /**\n   * Copies own symbol properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols(source), object);\n  }\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * Creates an array of the own enumerable symbol properties of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n\n\n  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11,\n  // for data views in Edge < 14, and promises in Node.js.\n\n  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n    getTag = function getTag(value) {\n      var result = objectToString.call(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : undefined;\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag;\n\n          case mapCtorString:\n            return mapTag;\n\n          case promiseCtorString:\n            return promiseTag;\n\n          case setCtorString:\n            return setTag;\n\n          case weakMapCtorString:\n            return weakMapTag;\n        }\n      }\n\n      return result;\n    };\n  }\n  /**\n   * Initializes an array clone.\n   *\n   * @private\n   * @param {Array} array The array to clone.\n   * @returns {Array} Returns the initialized clone.\n   */\n\n\n  function initCloneArray(array) {\n    var length = array.length,\n        result = array.constructor(length); // Add properties assigned by `RegExp#exec`.\n\n    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n      result.index = array.index;\n      result.input = array.input;\n    }\n\n    return result;\n  }\n  /**\n   * Initializes an object clone.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n\n\n  function initCloneObject(object) {\n    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n  }\n  /**\n   * Initializes an object clone based on its `toStringTag`.\n   *\n   * **Note:** This function only supports cloning values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {string} tag The `toStringTag` of the object to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n\n\n  function initCloneByTag(object, tag, cloneFunc, isDeep) {\n    var Ctor = object.constructor;\n\n    switch (tag) {\n      case arrayBufferTag:\n        return cloneArrayBuffer(object);\n\n      case boolTag:\n      case dateTag:\n        return new Ctor(+object);\n\n      case dataViewTag:\n        return cloneDataView(object, isDeep);\n\n      case float32Tag:\n      case float64Tag:\n      case int8Tag:\n      case int16Tag:\n      case int32Tag:\n      case uint8Tag:\n      case uint8ClampedTag:\n      case uint16Tag:\n      case uint32Tag:\n        return cloneTypedArray(object, isDeep);\n\n      case mapTag:\n        return cloneMap(object, isDeep, cloneFunc);\n\n      case numberTag:\n      case stringTag:\n        return new Ctor(object);\n\n      case regexpTag:\n        return cloneRegExp(object);\n\n      case setTag:\n        return cloneSet(object, isDeep, cloneFunc);\n\n      case symbolTag:\n        return cloneSymbol(object);\n    }\n  }\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n    return value === proto;\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to process.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * This method is like `_.clone` except that it recursively clones `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.0.0\n   * @category Lang\n   * @param {*} value The value to recursively clone.\n   * @returns {*} Returns the deep cloned value.\n   * @see _.clone\n   * @example\n   *\n   * var objects = [{ 'a': 1 }, { 'b': 2 }];\n   *\n   * var deep = _.cloneDeep(objects);\n   * console.log(deep[0] === objects[0]);\n   * // => false\n   */\n\n\n  function cloneDeep(value) {\n    return baseClone(value, true, true);\n  }\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n\n  function isArguments(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n  }\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n\n  var isArray = Array.isArray;\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n\n\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n  }\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject(value) ? objectToString.call(value) : '';\n    return tag == funcTag || tag == genTag;\n  }\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n\n\n  function stubArray() {\n    return [];\n  }\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = cloneDeep;\n});\nvar childTools$1 = lodash_clonedeep([length, ellipticalRoi]); // Exclude temp tools from case progress\n\nchildTools$1.forEach(function (childTool) {\n  childTool.options = Object.assign({}, childTool.options, {\n    caseProgress: {\n      include: false,\n      evaluate: false\n    }\n  });\n});\nvar temp = {\n  id: 'temp',\n  name: 'Temporary',\n  childTools: childTools$1,\n  options: {\n    caseProgress: {\n      include: false,\n      evaluate: false\n    }\n  }\n};\nvar ltTools = lodash_clonedeep([targets, nonTargets, temp]);\nltTools.forEach(function (toolGroup) {\n  toolGroup.childTools.forEach(function (tool) {\n    tool.toolGroup = toolGroup.id;\n  });\n});\nvar measurements = {\n  TimepointApi: TimepointApi,\n  MeasurementApi: MeasurementApi,\n  ConformanceCriteria: ConformanceCriteria,\n  MeasurementHandlers: MeasurementHandlers,\n  ltTools: ltTools,\n  tools: tools,\n  getLabel: getLabel,\n  getDescription: getDescription,\n  getImageAttributes: getImageAttributes,\n  getImageIdForImagePath: getImageIdForImagePath\n}; // Transforms a shallow object with keys separated by \".\" into a nested object\n\nfunction getNestedObject(shallowObject) {\n  var nestedObject = {};\n\n  for (var key in shallowObject) {\n    if (!shallowObject.hasOwnProperty(key)) continue;\n    var value = shallowObject[key];\n    var propertyArray = key.split('.');\n    var currentObject = nestedObject;\n\n    while (propertyArray.length) {\n      var currentProperty = propertyArray.shift();\n\n      if (!propertyArray.length) {\n        currentObject[currentProperty] = value;\n      } else {\n        if (!currentObject[currentProperty]) {\n          currentObject[currentProperty] = {};\n        }\n\n        currentObject = currentObject[currentProperty];\n      }\n    }\n  }\n\n  return nestedObject;\n} // Transforms a nested object into a shallowObject merging its keys with \".\" character\n\n\nfunction getShallowObject(nestedObject) {\n  var shallowObject = {};\n\n  var putValues = function putValues(baseKey, nestedObject, resultObject) {\n    for (var key in nestedObject) {\n      if (!nestedObject.hasOwnProperty(key)) continue;\n      var currentKey = baseKey ? \"\".concat(baseKey, \".\").concat(key) : key;\n      var currentValue = nestedObject[key];\n\n      if (_typeof_1(currentValue) === 'object') {\n        if (currentValue instanceof Array) {\n          currentKey += '[]';\n        }\n\n        putValues(currentKey, currentValue, resultObject);\n      } else {\n        resultObject[currentKey] = currentValue;\n      }\n    }\n  };\n\n  putValues('', nestedObject, shallowObject);\n  return shallowObject;\n}\n\nvar object = {\n  getNestedObject: getNestedObject,\n  getShallowObject: getShallowObject\n};\nvar defaultState = {};\n\nvar extensions = function extensions() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_EXTENSION_DATA':\n      var extensionName = action.extension;\n      var currentData = state[extensionName] || {};\n      var incomingData = action.data;\n      var extension = defineProperty({}, extensionName, objectSpread({}, currentData, incomingData));\n      return objectSpread({}, state, extension);\n\n    default:\n      return state;\n  }\n};\n\nvar defaultState$1 = {\n  progress: {},\n  lastUpdated: null\n};\n\nvar loading = function loading() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState$1;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var progress;\n  var lastUpdated;\n\n  switch (action.type) {\n    case 'SET_STUDY_LOADING_PROGRESS':\n      progress = lodash_clonedeep(state).progress;\n      progress[action.progressId] = action.progressData; // This is a workaround so we can easily identify changes\n      // to the progress object without doing deep comparison.\n\n      lastUpdated = new Date().getTime();\n      return Object.assign({}, state, {\n        progress: progress,\n        lastUpdated: lastUpdated\n      });\n\n    case 'CLEAR_STUDY_LOADING_PROGRESS':\n      progress = lodash_clonedeep(state).progress;\n      delete progress[action.progressId];\n      lastUpdated = new Date().getTime();\n      return Object.assign({}, state, {\n        progress: progress,\n        lastUpdated: lastUpdated\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar defaultState$2 = {\n  // Top level key\n  viewer: {\n    // First tab\n    hotKeysData: {// hotkeyName, label, keys, column\n      // zoom: { label: 'Zoom', command: 'Z', column: 0 },\n    },\n    // Second tab\n    windowLevelData: {// order, description, window (int), level (int)\n      // 0: { description: 'Soft tissue', window: '', level: '' },\n    }\n  }\n};\n\nvar preferences = function preferences(state, action) {\n  switch (action.type) {\n    case 'SET_USER_PREFERENCES':\n      {\n        var newState = action.state ? action.state : lodash_clonedeep(defaultState$2);\n        return Object.assign({}, state, newState);\n      }\n\n    default:\n      return lodash_clonedeep(state) || lodash_clonedeep(defaultState$2);\n  }\n};\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\n\n\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nvar _listCacheClear = listCacheClear;\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\n\nfunction eq(value, other) {\n  return value === other || value !== value && other !== other;\n}\n\nvar eq_1 = eq;\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n\n  while (length--) {\n    if (eq_1(array[length][0], key)) {\n      return length;\n    }\n  }\n\n  return -1;\n}\n\nvar _assocIndexOf = assocIndexOf;\n/** Used for built-in method references. */\n\nvar arrayProto = Array.prototype;\n/** Built-in value references. */\n\nvar splice = arrayProto.splice;\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n\n  var lastIndex = data.length - 1;\n\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n\n  --this.size;\n  return true;\n}\n\nvar _listCacheDelete = listCacheDelete;\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nvar _listCacheGet = listCacheGet;\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction listCacheHas(key) {\n  return _assocIndexOf(this.__data__, key) > -1;\n}\n\nvar _listCacheHas = listCacheHas;\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\n\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n\n  return this;\n}\n\nvar _listCacheSet = listCacheSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n  this.clear();\n\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n} // Add methods to `ListCache`.\n\n\nListCache.prototype.clear = _listCacheClear;\nListCache.prototype['delete'] = _listCacheDelete;\nListCache.prototype.get = _listCacheGet;\nListCache.prototype.has = _listCacheHas;\nListCache.prototype.set = _listCacheSet;\nvar _ListCache = ListCache;\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\n\nfunction stackClear() {\n  this.__data__ = new _ListCache();\n  this.size = 0;\n}\n\nvar _stackClear = stackClear;\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n  this.size = data.size;\n  return result;\n}\n\nvar _stackDelete = stackDelete;\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nvar _stackGet = stackGet;\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nvar _stackHas = stackHas;\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\nvar _freeGlobal = freeGlobal;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = _freeGlobal || freeSelf || Function('return this')();\nvar _root = root;\n/** Built-in value references. */\n\nvar Symbol$1 = _root.Symbol;\nvar _Symbol = Symbol$1;\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\n\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n\n  return result;\n}\n\nvar _getRawTag = getRawTag;\n/** Used for built-in method references. */\n\nvar objectProto$1 = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString$1 = objectProto$1.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\n\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\nvar _objectToString = objectToString;\n/** `Object#toString` result references. */\n\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n/** Built-in value references. */\n\nvar symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n\n  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);\n}\n\nvar _baseGetTag = baseGetTag;\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar isObject_1 = isObject;\n/** `Object#toString` result references. */\n\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\n\nfunction isFunction(value) {\n  if (!isObject_1(value)) {\n    return false;\n  } // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n  var tag = _baseGetTag(value);\n\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nvar isFunction_1 = isFunction;\n/** Used to detect overreaching core-js shims. */\n\nvar coreJsData = _root['__core-js_shared__'];\nvar _coreJsData = coreJsData;\n/** Used to detect methods masquerading as native. */\n\nvar maskSrcKey = function () {\n  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');\n  return uid ? 'Symbol(src)_1.' + uid : '';\n}();\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\n\n\nfunction isMasked(func) {\n  return !!maskSrcKey && maskSrcKey in func;\n}\n\nvar _isMasked = isMasked;\n/** Used for built-in method references. */\n\nvar funcProto = Function.prototype;\n/** Used to resolve the decompiled source of functions. */\n\nvar funcToString = funcProto.toString;\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\n\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n\n    try {\n      return func + '';\n    } catch (e) {}\n  }\n\n  return '';\n}\n\nvar _toSource = toSource;\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\n\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */\n\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used for built-in method references. */\n\nvar funcProto$1 = Function.prototype,\n    objectProto$2 = Object.prototype;\n/** Used to resolve the decompiled source of functions. */\n\nvar funcToString$1 = funcProto$1.toString;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n/** Used to detect if a method is native. */\n\nvar reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\n\nfunction baseIsNative(value) {\n  if (!isObject_1(value) || _isMasked(value)) {\n    return false;\n  }\n\n  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(_toSource(value));\n}\n\nvar _baseIsNative = baseIsNative;\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\n\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nvar _getValue = getValue;\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\n\nfunction getNative(object, key) {\n  var value = _getValue(object, key);\n\n  return _baseIsNative(value) ? value : undefined;\n}\n\nvar _getNative = getNative;\n/* Built-in method references that are verified to be native. */\n\nvar Map$1 = _getNative(_root, 'Map');\n\nvar _Map = Map$1;\n/* Built-in method references that are verified to be native. */\n\nvar nativeCreate = _getNative(Object, 'create');\n\nvar _nativeCreate = nativeCreate;\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\n\nfunction hashClear() {\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\n  this.size = 0;\n}\n\nvar _hashClear = hashClear;\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nvar _hashDelete = hashDelete;\n/** Used to stand-in for `undefined` hash values. */\n\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n/** Used for built-in method references. */\n\nvar objectProto$3 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction hashGet(key) {\n  var data = this.__data__;\n\n  if (_nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n\n  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;\n}\n\nvar _hashGet = hashGet;\n/** Used for built-in method references. */\n\nvar objectProto$4 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction hashHas(key) {\n  var data = this.__data__;\n  return _nativeCreate ? data[key] !== undefined : hasOwnProperty$3.call(data, key);\n}\n\nvar _hashHas = hashHas;\n/** Used to stand-in for `undefined` hash values. */\n\nvar HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\n\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = _nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;\n  return this;\n}\n\nvar _hashSet = hashSet;\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n  this.clear();\n\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n} // Add methods to `Hash`.\n\n\nHash.prototype.clear = _hashClear;\nHash.prototype['delete'] = _hashDelete;\nHash.prototype.get = _hashGet;\nHash.prototype.has = _hashHas;\nHash.prototype.set = _hashSet;\nvar _Hash = Hash;\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\n\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new _Hash(),\n    'map': new (_Map || _ListCache)(),\n    'string': new _Hash()\n  };\n}\n\nvar _mapCacheClear = mapCacheClear;\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\n\nfunction isKeyable(value) {\n  var type = typeof value;\n  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n}\n\nvar _isKeyable = isKeyable;\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\n\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n}\n\nvar _getMapData = getMapData;\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction mapCacheDelete(key) {\n  var result = _getMapData(this, key)['delete'](key);\n\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nvar _mapCacheDelete = mapCacheDelete;\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction mapCacheGet(key) {\n  return _getMapData(this, key).get(key);\n}\n\nvar _mapCacheGet = mapCacheGet;\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction mapCacheHas(key) {\n  return _getMapData(this, key).has(key);\n}\n\nvar _mapCacheHas = mapCacheHas;\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\n\nfunction mapCacheSet(key, value) {\n  var data = _getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nvar _mapCacheSet = mapCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n  this.clear();\n\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n} // Add methods to `MapCache`.\n\n\nMapCache.prototype.clear = _mapCacheClear;\nMapCache.prototype['delete'] = _mapCacheDelete;\nMapCache.prototype.get = _mapCacheGet;\nMapCache.prototype.has = _mapCacheHas;\nMapCache.prototype.set = _mapCacheSet;\nvar _MapCache = MapCache;\n/** Used as the size to enable large array optimizations. */\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\n\nfunction stackSet(key, value) {\n  var data = this.__data__;\n\n  if (data instanceof _ListCache) {\n    var pairs = data.__data__;\n\n    if (!_Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n\n    data = this.__data__ = new _MapCache(pairs);\n  }\n\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nvar _stackSet = stackSet;\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction Stack(entries) {\n  var data = this.__data__ = new _ListCache(entries);\n  this.size = data.size;\n} // Add methods to `Stack`.\n\n\nStack.prototype.clear = _stackClear;\nStack.prototype['delete'] = _stackDelete;\nStack.prototype.get = _stackGet;\nStack.prototype.has = _stackHas;\nStack.prototype.set = _stackSet;\nvar _Stack = Stack;\n/** Used to stand-in for `undefined` hash values. */\n\nvar HASH_UNDEFINED$2 = '__lodash_hash_undefined__';\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\n\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED$2);\n\n  return this;\n}\n\nvar _setCacheAdd = setCacheAdd;\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\n\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nvar _setCacheHas = setCacheHas;\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\n\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n  this.__data__ = new _MapCache();\n\n  while (++index < length) {\n    this.add(values[index]);\n  }\n} // Add methods to `SetCache`.\n\n\nSetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;\nSetCache.prototype.has = _setCacheHas;\nvar _SetCache = SetCache;\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\n\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _arraySome = arraySome;\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nvar _cacheHas = cacheHas;\n/** Used to compose bitmasks for value comparisons. */\n\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\n\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  } // Assume cyclic values are equal.\n\n\n  var stacked = stack.get(array);\n\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n\n  var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG ? new _SetCache() : undefined;\n  stack.set(array, other);\n  stack.set(other, array); // Ignore non-index properties.\n\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n    }\n\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n\n      result = false;\n      break;\n    } // Recursively compare arrays (susceptible to call stack limits).\n\n\n    if (seen) {\n      if (!_arraySome(other, function (othValue, othIndex) {\n        if (!_cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n          return seen.push(othIndex);\n        }\n      })) {\n        result = false;\n        break;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n      result = false;\n      break;\n    }\n  }\n\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nvar _equalArrays = equalArrays;\n/** Built-in value references. */\n\nvar Uint8Array$1 = _root.Uint8Array;\nvar _Uint8Array = Uint8Array$1;\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\n\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n  map.forEach(function (value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nvar _mapToArray = mapToArray;\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\n\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n  set.forEach(function (value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nvar _setToArray = setToArray;\n/** Used to compose bitmasks for value comparisons. */\n\nvar COMPARE_PARTIAL_FLAG$1 = 1,\n    COMPARE_UNORDERED_FLAG$1 = 2;\n/** `Object#toString` result references. */\n\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n        return false;\n      }\n\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {\n        return false;\n      }\n\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq_1(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == other + '';\n\n    case mapTag:\n      var convert = _mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;\n      convert || (convert = _setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      } // Assume cyclic values are equal.\n\n\n      var stacked = stack.get(object);\n\n      if (stacked) {\n        return stacked == other;\n      }\n\n      bitmask |= COMPARE_UNORDERED_FLAG$1; // Recursively compare objects (susceptible to call stack limits).\n\n      stack.set(object, other);\n\n      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n\n  }\n\n  return false;\n}\n\nvar _equalByTag = equalByTag;\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\n\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n\n  return array;\n}\n\nvar _arrayPush = arrayPush;\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\n\nvar isArray$1 = Array.isArray;\nvar isArray_1 = isArray$1;\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\n\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));\n}\n\nvar _baseGetAllKeys = baseGetAllKeys;\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\n\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n\n  return result;\n}\n\nvar _arrayFilter = arrayFilter;\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\n\nfunction stubArray() {\n  return [];\n}\n\nvar stubArray_1 = stubArray;\n/** Used for built-in method references. */\n\nvar objectProto$5 = Object.prototype;\n/** Built-in value references. */\n\nvar propertyIsEnumerable = objectProto$5.propertyIsEnumerable;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\n\nvar getSymbols = !nativeGetSymbols ? stubArray_1 : function (object) {\n  if (object == null) {\n    return [];\n  }\n\n  object = Object(object);\n  return _arrayFilter(nativeGetSymbols(object), function (symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\nvar _getSymbols = getSymbols;\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\n\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n\n  return result;\n}\n\nvar _baseTimes = baseTimes;\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nvar isObjectLike_1 = isObjectLike;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]';\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\n\nfunction baseIsArguments(value) {\n  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;\n}\n\nvar _baseIsArguments = baseIsArguments;\n/** Used for built-in method references. */\n\nvar objectProto$6 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$4 = objectProto$6.hasOwnProperty;\n/** Built-in value references. */\n\nvar propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\n\nvar isArguments = _baseIsArguments(function () {\n  return arguments;\n}()) ? _baseIsArguments : function (value) {\n  return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');\n};\nvar isArguments_1 = isArguments;\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\n\nfunction stubFalse() {\n  return false;\n}\n\nvar stubFalse_1 = stubFalse;\nvar isBuffer_1 = createCommonjsModule(function (module, exports) {\n  /** Detect free variable `exports`. */\n  var freeExports = exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? _root.Buffer : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n  var isBuffer = nativeIsBuffer || stubFalse_1;\n  module.exports = isBuffer;\n});\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nvar _isIndex = isIndex;\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\n\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;\n}\n\nvar isLength_1 = isLength;\n/** `Object#toString` result references. */\n\nvar argsTag$1 = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag$1 = '[object Boolean]',\n    dateTag$1 = '[object Date]',\n    errorTag$1 = '[object Error]',\n    funcTag$1 = '[object Function]',\n    mapTag$1 = '[object Map]',\n    numberTag$1 = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag$1 = '[object RegExp]',\n    setTag$1 = '[object Set]',\n    stringTag$1 = '[object String]',\n    weakMapTag = '[object WeakMap]';\nvar arrayBufferTag$1 = '[object ArrayBuffer]',\n    dataViewTag$1 = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n/** Used to identify `toStringTag` values of typed arrays. */\n\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] = typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] = typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] = typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] = typedArrayTags[weakMapTag] = false;\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\n\nfunction baseIsTypedArray(value) {\n  return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];\n}\n\nvar _baseIsTypedArray = baseIsTypedArray;\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\n\nfunction baseUnary(func) {\n  return function (value) {\n    return func(value);\n  };\n}\n\nvar _baseUnary = baseUnary;\n\nvar _nodeUtil = createCommonjsModule(function (module, exports) {\n  /** Detect free variable `exports`. */\n  var freeExports = exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports && _freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      } // Legacy `process.binding('util')` for Node.js < 10.\n\n\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n\n  module.exports = nodeUtil;\n});\n/* Node.js helper references. */\n\n\nvar nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\n\nvar isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;\nvar isTypedArray_1 = isTypedArray;\n/** Used for built-in method references. */\n\nvar objectProto$7 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$5 = objectProto$7.hasOwnProperty;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\n\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray_1(value),\n      isArg = !isArr && isArguments_1(value),\n      isBuff = !isArr && !isArg && isBuffer_1(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? _baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$5.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n    _isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n\nvar _arrayLikeKeys = arrayLikeKeys;\n/** Used for built-in method references. */\n\nvar objectProto$8 = Object.prototype;\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\n\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$8;\n  return value === proto;\n}\n\nvar _isPrototype = isPrototype;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\n\nfunction overArg(func, transform) {\n  return function (arg) {\n    return func(transform(arg));\n  };\n}\n\nvar _overArg = overArg;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeKeys = _overArg(Object.keys, Object);\n\nvar _nativeKeys = nativeKeys;\n/** Used for built-in method references. */\n\nvar objectProto$9 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$6 = objectProto$9.hasOwnProperty;\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\n\nfunction baseKeys(object) {\n  if (!_isPrototype(object)) {\n    return _nativeKeys(object);\n  }\n\n  var result = [];\n\n  for (var key in Object(object)) {\n    if (hasOwnProperty$6.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n\nvar _baseKeys = baseKeys;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\n\nfunction isArrayLike(value) {\n  return value != null && isLength_1(value.length) && !isFunction_1(value);\n}\n\nvar isArrayLike_1 = isArrayLike;\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\n\nfunction keys(object) {\n  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);\n}\n\nvar keys_1 = keys;\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\n\nfunction getAllKeys(object) {\n  return _baseGetAllKeys(object, keys_1, _getSymbols);\n}\n\nvar _getAllKeys = getAllKeys;\n/** Used to compose bitmasks for value comparisons. */\n\nvar COMPARE_PARTIAL_FLAG$2 = 1;\n/** Used for built-in method references. */\n\nvar objectProto$a = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$7 = objectProto$a.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,\n      objProps = _getAllKeys(object),\n      objLength = objProps.length,\n      othProps = _getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n\n  var index = objLength;\n\n  while (index--) {\n    var key = objProps[index];\n\n    if (!(isPartial ? key in other : hasOwnProperty$7.call(other, key))) {\n      return false;\n    }\n  } // Assume cyclic values are equal.\n\n\n  var stacked = stack.get(object);\n\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n  var skipCtor = isPartial;\n\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n    } // Recursively compare objects (susceptible to call stack limits).\n\n\n    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n      result = false;\n      break;\n    }\n\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nvar _equalObjects = equalObjects;\n/* Built-in method references that are verified to be native. */\n\nvar DataView = _getNative(_root, 'DataView');\n\nvar _DataView = DataView;\n/* Built-in method references that are verified to be native. */\n\nvar Promise$1 = _getNative(_root, 'Promise');\n\nvar _Promise = Promise$1;\n/* Built-in method references that are verified to be native. */\n\nvar Set$1 = _getNative(_root, 'Set');\n\nvar _Set = Set$1;\n/* Built-in method references that are verified to be native. */\n\nvar WeakMap = _getNative(_root, 'WeakMap');\n\nvar _WeakMap = WeakMap;\n/** `Object#toString` result references. */\n\nvar mapTag$2 = '[object Map]',\n    objectTag$1 = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag$2 = '[object Set]',\n    weakMapTag$1 = '[object WeakMap]';\nvar dataViewTag$2 = '[object DataView]';\n/** Used to detect maps, sets, and weakmaps. */\n\nvar dataViewCtorString = _toSource(_DataView),\n    mapCtorString = _toSource(_Map),\n    promiseCtorString = _toSource(_Promise),\n    setCtorString = _toSource(_Set),\n    weakMapCtorString = _toSource(_WeakMap);\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\n\nvar getTag = _baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\nif (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2 || _Map && getTag(new _Map()) != mapTag$2 || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag$2 || _WeakMap && getTag(new _WeakMap()) != weakMapTag$1) {\n  getTag = function getTag(value) {\n    var result = _baseGetTag(value),\n        Ctor = result == objectTag$1 ? value.constructor : undefined,\n        ctorString = Ctor ? _toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString:\n          return dataViewTag$2;\n\n        case mapCtorString:\n          return mapTag$2;\n\n        case promiseCtorString:\n          return promiseTag;\n\n        case setCtorString:\n          return setTag$2;\n\n        case weakMapCtorString:\n          return weakMapTag$1;\n      }\n    }\n\n    return result;\n  };\n}\n\nvar _getTag = getTag;\n/** Used to compose bitmasks for value comparisons. */\n\nvar COMPARE_PARTIAL_FLAG$3 = 1;\n/** `Object#toString` result references. */\n\nvar argsTag$2 = '[object Arguments]',\n    arrayTag$1 = '[object Array]',\n    objectTag$2 = '[object Object]';\n/** Used for built-in method references. */\n\nvar objectProto$b = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$8 = objectProto$b.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray_1(object),\n      othIsArr = isArray_1(other),\n      objTag = objIsArr ? arrayTag$1 : _getTag(object),\n      othTag = othIsArr ? arrayTag$1 : _getTag(other);\n  objTag = objTag == argsTag$2 ? objectTag$2 : objTag;\n  othTag = othTag == argsTag$2 ? objectTag$2 : othTag;\n  var objIsObj = objTag == objectTag$2,\n      othIsObj = othTag == objectTag$2,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer_1(object)) {\n    if (!isBuffer_1(other)) {\n      return false;\n    }\n\n    objIsArr = true;\n    objIsObj = false;\n  }\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new _Stack());\n    return objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n\n  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {\n    var objIsWrapped = objIsObj && hasOwnProperty$8.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty$8.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n      stack || (stack = new _Stack());\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n\n  if (!isSameTag) {\n    return false;\n  }\n\n  stack || (stack = new _Stack());\n  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nvar _baseIsEqualDeep = baseIsEqualDeep;\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\n\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n\n  if (value == null || other == null || !isObjectLike_1(value) && !isObjectLike_1(other)) {\n    return value !== value && other !== other;\n  }\n\n  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nvar _baseIsEqual = baseIsEqual;\n/** Used to compose bitmasks for value comparisons. */\n\nvar COMPARE_PARTIAL_FLAG$4 = 1,\n    COMPARE_UNORDERED_FLAG$2 = 2;\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\n\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n\n  object = Object(object);\n\n  while (index--) {\n    var data = matchData[index];\n\n    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n      return false;\n    }\n  }\n\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new _Stack();\n\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n\n      if (!(result === undefined ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack) : result)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar _baseIsMatch = baseIsMatch;\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\n\nfunction isStrictComparable(value) {\n  return value === value && !isObject_1(value);\n}\n\nvar _isStrictComparable = isStrictComparable;\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\n\nfunction getMatchData(object) {\n  var result = keys_1(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n    result[length] = [key, value, _isStrictComparable(value)];\n  }\n\n  return result;\n}\n\nvar _getMatchData = getMatchData;\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\n\nfunction matchesStrictComparable(key, srcValue) {\n  return function (object) {\n    if (object == null) {\n      return false;\n    }\n\n    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n  };\n}\n\nvar _matchesStrictComparable = matchesStrictComparable;\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\n\nfunction baseMatches(source) {\n  var matchData = _getMatchData(source);\n\n  if (matchData.length == 1 && matchData[0][2]) {\n    return _matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n\n  return function (object) {\n    return object === source || _baseIsMatch(object, source, matchData);\n  };\n}\n\nvar _baseMatches = baseMatches;\n/** `Object#toString` result references. */\n\nvar symbolTag$1 = '[object Symbol]';\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag$1;\n}\n\nvar isSymbol_1 = isSymbol;\n/** Used to match property names within property paths. */\n\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\n\nfunction isKey(value, object) {\n  if (isArray_1(value)) {\n    return false;\n  }\n\n  var type = typeof value;\n\n  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol_1(value)) {\n    return true;\n  }\n\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n}\n\nvar _isKey = isKey;\n/** Error message constants. */\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\n\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  var memoized = function memoized() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n\n  memoized.cache = new (memoize.Cache || _MapCache)();\n  return memoized;\n} // Expose `MapCache`.\n\n\nmemoize.Cache = _MapCache;\nvar memoize_1 = memoize;\n/** Used as the maximum memoize cache size. */\n\nvar MAX_MEMOIZE_SIZE = 500;\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\n\nfunction memoizeCapped(func) {\n  var result = memoize_1(func, function (key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n\n    return key;\n  });\n  var cache = result.cache;\n  return result;\n}\n\nvar _memoizeCapped = memoizeCapped;\n/** Used to match property names within property paths. */\n\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n/** Used to match backslashes in property paths. */\n\nvar reEscapeChar = /\\\\(\\\\)?/g;\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\n\nvar stringToPath = _memoizeCapped(function (string) {\n  var result = [];\n\n  if (string.charCodeAt(0) === 46\n  /* . */\n  ) {\n      result.push('');\n    }\n\n  string.replace(rePropName, function (match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n  });\n  return result;\n});\n\nvar _stringToPath = stringToPath;\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\n\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n\n  return result;\n}\n\nvar _arrayMap = arrayMap;\n/** Used as references for various `Number` constants. */\n\nvar INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,\n    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if (isArray_1(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return _arrayMap(value, baseToString) + '';\n  }\n\n  if (isSymbol_1(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nvar _baseToString = baseToString;\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\n\nfunction toString(value) {\n  return value == null ? '' : _baseToString(value);\n}\n\nvar toString_1 = toString;\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\n\nfunction castPath(value, object) {\n  if (isArray_1(value)) {\n    return value;\n  }\n\n  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));\n}\n\nvar _castPath = castPath;\n/** Used as references for various `Number` constants. */\n\nvar INFINITY$1 = 1 / 0;\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\n\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol_1(value)) {\n    return value;\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;\n}\n\nvar _toKey = toKey;\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\n\nfunction baseGet(object, path) {\n  path = _castPath(path, object);\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[_toKey(path[index++])];\n  }\n\n  return index && index == length ? object : undefined;\n}\n\nvar _baseGet = baseGet;\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\n\nfunction get$1(object, path, defaultValue) {\n  var result = object == null ? undefined : _baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nvar get_1 = get$1;\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\n\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nvar _baseHasIn = baseHasIn;\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\n\nfunction hasPath(object, path, hasFunc) {\n  path = _castPath(path, object);\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = _toKey(path[index]);\n\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n\n    object = object[key];\n  }\n\n  if (result || ++index != length) {\n    return result;\n  }\n\n  length = object == null ? 0 : object.length;\n  return !!length && isLength_1(length) && _isIndex(key, length) && (isArray_1(object) || isArguments_1(object));\n}\n\nvar _hasPath = hasPath;\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\n\nfunction hasIn(object, path) {\n  return object != null && _hasPath(object, path, _baseHasIn);\n}\n\nvar hasIn_1 = hasIn;\n/** Used to compose bitmasks for value comparisons. */\n\nvar COMPARE_PARTIAL_FLAG$5 = 1,\n    COMPARE_UNORDERED_FLAG$3 = 2;\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\n\nfunction baseMatchesProperty(path, srcValue) {\n  if (_isKey(path) && _isStrictComparable(srcValue)) {\n    return _matchesStrictComparable(_toKey(path), srcValue);\n  }\n\n  return function (object) {\n    var objValue = get_1(object, path);\n    return objValue === undefined && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);\n  };\n}\n\nvar _baseMatchesProperty = baseMatchesProperty;\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\n\nfunction identity(value) {\n  return value;\n}\n\nvar identity_1 = identity;\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\n\nfunction baseProperty(key) {\n  return function (object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nvar _baseProperty = baseProperty;\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\n\nfunction basePropertyDeep(path) {\n  return function (object) {\n    return _baseGet(object, path);\n  };\n}\n\nvar _basePropertyDeep = basePropertyDeep;\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\n\nfunction property(path) {\n  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);\n}\n\nvar property_1 = property;\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\n\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n\n  if (value == null) {\n    return identity_1;\n  }\n\n  if (typeof value == 'object') {\n    return isArray_1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value);\n  }\n\n  return property_1(value);\n}\n\nvar _baseIteratee = baseIteratee;\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while (fromRight ? index-- : ++index < length) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nvar _baseFindIndex = baseFindIndex;\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\n\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nvar _baseIsNaN = baseIsNaN;\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nvar _strictIndexOf = strictIndexOf;\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value ? _strictIndexOf(array, value, fromIndex) : _baseFindIndex(array, _baseIsNaN, fromIndex);\n}\n\nvar _baseIndexOf = baseIndexOf;\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\n\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && _baseIndexOf(array, value, 0) > -1;\n}\n\nvar _arrayIncludes = arrayIncludes;\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\n\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _arrayIncludesWith = arrayIncludesWith;\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\n\nfunction noop$1() {// No operation performed.\n}\n\nvar noop_1 = noop$1;\n/** Used as references for various `Number` constants. */\n\nvar INFINITY$2 = 1 / 0;\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\n\nvar createSet = !(_Set && 1 / _setToArray(new _Set([, -0]))[1] == INFINITY$2) ? noop_1 : function (values) {\n  return new _Set(values);\n};\nvar _createSet = createSet;\n/** Used as the size to enable large array optimizations. */\n\nvar LARGE_ARRAY_SIZE$1 = 200;\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\n\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = _arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = _arrayIncludesWith;\n  } else if (length >= LARGE_ARRAY_SIZE$1) {\n    var set = iteratee ? null : _createSet(array);\n\n    if (set) {\n      return _setToArray(set);\n    }\n\n    isCommon = false;\n    includes = _cacheHas;\n    seen = new _SetCache();\n  } else {\n    seen = iteratee ? [] : result;\n  }\n\n  outer: while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n    value = comparator || value !== 0 ? value : 0;\n\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n\n      if (iteratee) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    } else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nvar _baseUniq = baseUniq;\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\n\nfunction uniqBy(array, iteratee) {\n  return array && array.length ? _baseUniq(array, _baseIteratee(iteratee, 2)) : [];\n}\n\nvar uniqBy_1 = uniqBy;\nvar defaultState$3 = {\n  servers: []\n};\n\nvar servers = function servers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState$3;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_SERVER':\n      var _servers = uniqBy_1([].concat(toConsumableArray(state.servers), [action.server]), 'id');\n\n      _servers.forEach(function (s) {\n        return s.active = true;\n      });\n\n      return objectSpread({}, state, {\n        servers: _servers\n      });\n\n    case 'SET_SERVERS':\n      return objectSpread({}, state, {\n        servers: action.servers\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar defaultState$4 = {\n  studyData: {}\n};\n\nvar servers$1 = function servers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState$4;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_STUDY_DATA':\n      var updatedStudyData = lodash_clonedeep(state).studyData;\n      updatedStudyData[action.studyInstanceUid] = action.data;\n      return Object.assign({}, state, {\n        studyData: updatedStudyData\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar defaultState$5 = {\n  timepoints: [],\n  measurements: []\n};\n\nvar timepointManager = function timepointManager() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState$5;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_TIMEPOINTS':\n      return Object.assign({}, state, {\n        timepoints: action.state\n      });\n\n    case 'SET_MEASUREMENTS':\n      return Object.assign({}, state, {\n        measurements: action.state\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar lodash_merge = createCommonjsModule(function (module, exports) {\n  /**\n   * Lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright JS Foundation and other contributors <https://js.foundation/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n  /** Used as references for various `Number` constants. */\n\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  /** `Object#toString` result references. */\n\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Detect free variable `exports`. */\n\n  var freeExports = exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0:\n        return func.call(thisArg);\n\n      case 1:\n        return func.call(thisArg, args[0]);\n\n      case 2:\n        return func.call(thisArg, args[0], args[1]);\n\n      case 3:\n        return func.call(thisArg, args[0], args[1], args[2]);\n    }\n\n    return func.apply(thisArg, args);\n  }\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /**\n   * Gets the value at `key`, unless `key` is \"__proto__\".\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function safeGet(object, key) {\n    return key == '__proto__' ? undefined : object[key];\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root['__core-js_shared__'];\n  /** Used to resolve the decompiled source of functions. */\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n\n  var nativeObjectToString = objectProto.toString;\n  /** Used to infer the `Object` constructor. */\n\n  var objectCtorString = funcToString.call(Object);\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n      getPrototype = overArg(Object.getPrototypeOf, Object),\n      objectCreate = Object.create,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n  var defineProperty = function () {\n    try {\n      var func = getNative(Object, 'defineProperty');\n      func({}, '', {});\n      return func;\n    } catch (e) {}\n  }();\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeMax = Math.max,\n      nativeNow = Date.now;\n  /* Built-in method references that are verified to be native. */\n\n  var Map = getNative(root, 'Map'),\n      nativeCreate = getNative(Object, 'create');\n  /**\n   * The base implementation of `_.create` without support for assigning\n   * properties to the created object.\n   *\n   * @private\n   * @param {Object} proto The object to inherit from.\n   * @returns {Object} Returns the new object.\n   */\n\n  var baseCreate = function () {\n    function object() {}\n\n    return function (proto) {\n      if (!isObject(proto)) {\n        return {};\n      }\n\n      if (objectCreate) {\n        return objectCreate(proto);\n      }\n\n      object.prototype = proto;\n      var result = new object();\n      object.prototype = undefined;\n      return result;\n    };\n  }();\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    --this.size;\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n\n\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n    this.size = data.size;\n    return result;\n  }\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n\n\n  function stackSet(key, value) {\n    var data = this.__data__;\n\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n\n      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n\n      data = this.__data__ = new MapCache(pairs);\n    }\n\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  } // Add methods to `Stack`.\n\n\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * This function is like `assignValue` except that it doesn't assign\n   * `undefined` values.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n\n\n  function assignMergeValue(object, key, value) {\n    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n      baseAssignValue(object, key, value);\n    }\n  }\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n\n\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n      baseAssignValue(object, key, value);\n    }\n  }\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `assignValue` and `assignMergeValue` without\n   * value checks.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n\n\n  function baseAssignValue(object, key, value) {\n    if (key == '__proto__' && defineProperty) {\n      defineProperty(object, key, {\n        'configurable': true,\n        'enumerable': true,\n        'value': value,\n        'writable': true\n      });\n    } else {\n      object[key] = value;\n    }\n  }\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  var baseFor = createBaseFor();\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function baseKeysIn(object) {\n    if (!isObject(object)) {\n      return nativeKeysIn(object);\n    }\n\n    var isProto = isPrototype(object),\n        result = [];\n\n    for (var key in object) {\n      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.merge` without support for multiple sources.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @param {number} srcIndex The index of `source`.\n   * @param {Function} [customizer] The function to customize merged values.\n   * @param {Object} [stack] Tracks traversed source values and their merged\n   *  counterparts.\n   */\n\n\n  function baseMerge(object, source, srcIndex, customizer, stack) {\n    if (object === source) {\n      return;\n    }\n\n    baseFor(source, function (srcValue, key) {\n      if (isObject(srcValue)) {\n        stack || (stack = new Stack());\n        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n      } else {\n        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;\n\n        if (newValue === undefined) {\n          newValue = srcValue;\n        }\n\n        assignMergeValue(object, key, newValue);\n      }\n    }, keysIn);\n  }\n  /**\n   * A specialized version of `baseMerge` for arrays and objects which performs\n   * deep merges and tracks traversed objects enabling objects with circular\n   * references to be merged.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @param {string} key The key of the value to merge.\n   * @param {number} srcIndex The index of `source`.\n   * @param {Function} mergeFunc The function to merge values.\n   * @param {Function} [customizer] The function to customize assigned values.\n   * @param {Object} [stack] Tracks traversed source values and their merged\n   *  counterparts.\n   */\n\n\n  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n    var objValue = safeGet(object, key),\n        srcValue = safeGet(source, key),\n        stacked = stack.get(srcValue);\n\n    if (stacked) {\n      assignMergeValue(object, key, stacked);\n      return;\n    }\n\n    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n    var isCommon = newValue === undefined;\n\n    if (isCommon) {\n      var isArr = isArray(srcValue),\n          isBuff = !isArr && isBuffer(srcValue),\n          isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n      newValue = srcValue;\n\n      if (isArr || isBuff || isTyped) {\n        if (isArray(objValue)) {\n          newValue = objValue;\n        } else if (isArrayLikeObject(objValue)) {\n          newValue = copyArray(objValue);\n        } else if (isBuff) {\n          isCommon = false;\n          newValue = cloneBuffer(srcValue, true);\n        } else if (isTyped) {\n          isCommon = false;\n          newValue = cloneTypedArray(srcValue, true);\n        } else {\n          newValue = [];\n        }\n      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n        newValue = objValue;\n\n        if (isArguments(objValue)) {\n          newValue = toPlainObject(objValue);\n        } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {\n          newValue = initCloneObject(srcValue);\n        }\n      } else {\n        isCommon = false;\n      }\n    }\n\n    if (isCommon) {\n      // Recursively merge objects and arrays (susceptible to call stack limits).\n      stack.set(srcValue, newValue);\n      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n      stack['delete'](srcValue);\n    }\n\n    assignMergeValue(object, key, newValue);\n  }\n  /**\n   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function baseRest(func, start) {\n    return setToString(overRest(func, start, identity), func + '');\n  }\n  /**\n   * The base implementation of `setToString` without support for hot loop shorting.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n\n\n  var baseSetToString = !defineProperty ? identity : function (func, string) {\n    return defineProperty(func, 'toString', {\n      'configurable': true,\n      'enumerable': false,\n      'value': constant(string),\n      'writable': true\n    });\n  };\n  /**\n   * Creates a clone of  `buffer`.\n   *\n   * @private\n   * @param {Buffer} buffer The buffer to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Buffer} Returns the cloned buffer.\n   */\n\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice();\n    }\n\n    var length = buffer.length,\n        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n    buffer.copy(result);\n    return result;\n  }\n  /**\n   * Creates a clone of `arrayBuffer`.\n   *\n   * @private\n   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n   * @returns {ArrayBuffer} Returns the cloned array buffer.\n   */\n\n\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n  }\n  /**\n   * Creates a clone of `typedArray`.\n   *\n   * @private\n   * @param {Object} typedArray The typed array to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned typed array.\n   */\n\n\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n  }\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function copyArray(source, array) {\n    var index = -1,\n        length = source.length;\n    array || (array = Array(length));\n\n    while (++index < length) {\n      array[index] = source[index];\n    }\n\n    return array;\n  }\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  function copyObject(source, props, object, customizer) {\n    var isNew = !object;\n    object || (object = {});\n    var index = -1,\n        length = props.length;\n\n    while (++index < length) {\n      var key = props[index];\n      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n\n      if (newValue === undefined) {\n        newValue = source[key];\n      }\n\n      if (isNew) {\n        baseAssignValue(object, key, newValue);\n      } else {\n        assignValue(object, key, newValue);\n      }\n    }\n\n    return object;\n  }\n  /**\n   * Creates a function like `_.assign`.\n   *\n   * @private\n   * @param {Function} assigner The function to assign values.\n   * @returns {Function} Returns the new assigner function.\n   */\n\n\n  function createAssigner(assigner) {\n    return baseRest(function (object, sources) {\n      var index = -1,\n          length = sources.length,\n          customizer = length > 1 ? sources[length - 1] : undefined,\n          guard = length > 2 ? sources[2] : undefined;\n      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? undefined : customizer;\n        length = 1;\n      }\n\n      object = Object(object);\n\n      while (++index < length) {\n        var source = sources[index];\n\n        if (source) {\n          assigner(object, source, index, customizer);\n        }\n      }\n\n      return object;\n    });\n  }\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n\n      return object;\n    };\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Initializes an object clone.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n\n\n  function initCloneObject(object) {\n    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n  }\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /**\n   * Checks if the given arguments are from an iteratee call.\n   *\n   * @private\n   * @param {*} value The potential iteratee value argument.\n   * @param {*} index The potential iteratee index or key argument.\n   * @param {*} object The potential iteratee object argument.\n   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n   *  else `false`.\n   */\n\n\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false;\n    }\n\n    var type = typeof index;\n\n    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n      return eq(object[index], value);\n    }\n\n    return false;\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n    return value === proto;\n  }\n  /**\n   * This function is like\n   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * except that it includes inherited enumerable properties.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function nativeKeysIn(object) {\n    var result = [];\n\n    if (object != null) {\n      for (var key in Object(object)) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  /**\n   * A specialized version of `baseRest` which transforms the rest array.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @param {Function} transform The rest array transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overRest(func, start, transform) {\n    start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n    return function () {\n      var args = arguments,\n          index = -1,\n          length = nativeMax(args.length - start, 0),\n          array = Array(length);\n\n      while (++index < length) {\n        array[index] = args[start + index];\n      }\n\n      index = -1;\n      var otherArgs = Array(start + 1);\n\n      while (++index < start) {\n        otherArgs[index] = args[index];\n      }\n\n      otherArgs[start] = transform(array);\n      return apply(func, this, otherArgs);\n    };\n  }\n  /**\n   * Sets the `toString` method of `func` to return `string`.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n\n\n  var setToString = shortOut(baseSetToString);\n  /**\n   * Creates a function that'll short out and invoke `identity` instead\n   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n   * milliseconds.\n   *\n   * @private\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new shortable function.\n   */\n\n  function shortOut(func) {\n    var count = 0,\n        lastCalled = 0;\n    return function () {\n      var stamp = nativeNow(),\n          remaining = HOT_SPAN - (stamp - lastCalled);\n      lastCalled = stamp;\n\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0];\n        }\n      } else {\n        count = 0;\n      }\n\n      return func.apply(undefined, arguments);\n    };\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n\n\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n  }\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /**\n   * Checks if `value` is a plain object, that is, an object created by the\n   * `Object` constructor or one with a `[[Prototype]]` of `null`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.8.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   * }\n   *\n   * _.isPlainObject(new Foo);\n   * // => false\n   *\n   * _.isPlainObject([1, 2, 3]);\n   * // => false\n   *\n   * _.isPlainObject({ 'x': 0, 'y': 0 });\n   * // => true\n   *\n   * _.isPlainObject(Object.create(null));\n   * // => true\n   */\n\n\n  function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n      return false;\n    }\n\n    var proto = getPrototype(value);\n\n    if (proto === null) {\n      return true;\n    }\n\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n  }\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /**\n   * Converts `value` to a plain object flattening inherited enumerable string\n   * keyed properties of `value` to own properties of the plain object.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {Object} Returns the converted plain object.\n   * @example\n   *\n   * function Foo() {\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.assign({ 'a': 1 }, new Foo);\n   * // => { 'a': 1, 'b': 2 }\n   *\n   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n   * // => { 'a': 1, 'b': 2, 'c': 3 }\n   */\n\n  function toPlainObject(value) {\n    return copyObject(value, keysIn(value));\n  }\n  /**\n   * Creates an array of the own and inherited enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keysIn(new Foo);\n   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n   */\n\n\n  function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n  }\n  /**\n   * This method is like `_.assign` except that it recursively merges own and\n   * inherited enumerable string keyed properties of source objects into the\n   * destination object. Source properties that resolve to `undefined` are\n   * skipped if a destination value exists. Array and plain object properties\n   * are merged recursively. Other objects and value types are overridden by\n   * assignment. Source objects are applied from left to right. Subsequent\n   * sources overwrite property assignments of previous sources.\n   *\n   * **Note:** This method mutates `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.5.0\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * var object = {\n   *   'a': [{ 'b': 2 }, { 'd': 4 }]\n   * };\n   *\n   * var other = {\n   *   'a': [{ 'c': 3 }, { 'e': 5 }]\n   * };\n   *\n   * _.merge(object, other);\n   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n   */\n\n\n  var merge = createAssigner(function (object, source, srcIndex) {\n    baseMerge(object, source, srcIndex);\n  });\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n\n  function constant(value) {\n    return function () {\n      return value;\n    };\n  }\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = merge;\n});\nvar defaultState$6 = {\n  activeViewportIndex: 0,\n  layout: {\n    viewports: [{\n      // plugin: 'cornerstone',\n      height: '100%',\n      width: '100%'\n    }]\n  },\n  viewportSpecificData: {}\n};\n/**\n * @param {Object} [state=defaultState]\n * @param {Object} action\n * @param {string} [action.type]\n * @param {number} [action.viewportIndex]\n * @param {Object} [action.layout]\n * @param {Object} [action.viewportSpecificData]\n */\n\nvar viewports = function viewports() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState$6;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var currentData;\n  var viewportSpecificData;\n  var useActiveViewport = false;\n\n  switch (action.type) {\n    case SET_VIEWPORT_LAYOUT_AND_DATA:\n      return Object.assign({}, state, {\n        viewportSpecificData: action.viewportSpecificData,\n        layout: action.layout\n      });\n\n    case SET_VIEWPORT_ACTIVE:\n      return Object.assign({}, state, {\n        activeViewportIndex: action.viewportIndex\n      });\n\n    case SET_VIEWPORT_LAYOUT:\n      return Object.assign({}, state, {\n        layout: action.layout\n      });\n\n    case SET_VIEWPORT:\n      {\n        var layout = lodash_clonedeep(state.layout);\n        var hasPlugin = action.data && action.data.plugin;\n        viewportSpecificData = lodash_clonedeep(state.viewportSpecificData);\n        viewportSpecificData[action.viewportIndex] = lodash_merge({}, viewportSpecificData[action.viewportIndex], action.data);\n\n        if (hasPlugin) {\n          layout.viewports[action.viewportIndex].plugin = action.data.plugin;\n        }\n\n        return Object.assign({}, state, {\n          layout: layout,\n          viewportSpecificData: viewportSpecificData\n        });\n      }\n\n    case SET_ACTIVE_SPECIFIC_DATA:\n      useActiveViewport = true;\n    // Allow fall-through\n    // eslint-disable-next-line\n\n    case SET_SPECIFIC_DATA:\n      {\n        var viewportIndex = useActiveViewport ? state.activeViewportIndex : action.viewportIndex;\n        currentData = lodash_clonedeep(state.viewportSpecificData[viewportIndex]) || {};\n        viewportSpecificData = lodash_clonedeep(state.viewportSpecificData);\n        viewportSpecificData[viewportIndex] = lodash_merge({}, currentData, action.data);\n        return Object.assign({}, state, {\n          viewportSpecificData: viewportSpecificData\n        });\n      }\n\n    case CLEAR_VIEWPORT:\n      viewportSpecificData = lodash_clonedeep(state.viewportSpecificData);\n\n      if (action.viewportIndex) {\n        viewportSpecificData[action.viewportIndex] = {};\n        return Object.assign({}, state, {\n          viewportSpecificData: viewportSpecificData\n        });\n      } else {\n        return defaultState$6;\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar reducers = {\n  extensions: extensions,\n  loading: loading,\n  preferences: preferences,\n  servers: servers,\n  studies: servers$1,\n  timepointManager: timepointManager,\n  viewports: viewports\n};\n\nvar loadState = function loadState() {\n  try {\n    var serializedState = window.localStorage.getItem('state');\n\n    if (!serializedState) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nvar saveState = function saveState(state) {\n  try {\n    var serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {}\n};\n\nvar localStorage = {\n  saveState: saveState,\n  loadState: loadState\n};\nvar redux = {\n  reducers: reducers,\n  actions: actions,\n  localStorage: localStorage\n}; // TODO: This is duplicated in TypeSafeCollection\n\nfunction isObject$1(subject) {\n  return subject instanceof Object || _typeof_1(subject) === 'object' && subject !== null;\n} // TODO: This is duplicated in TypeSafeCollection\n\n\nfunction isString(subject) {\n  return typeof subject === 'string';\n} // Search for some string inside any object or array\n\n\nfunction search(object, query) {\n  var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // Create the search pattern\n\n  var pattern = new RegExp(query.trim(), 'i');\n  Object.keys(object).forEach(function (key) {\n    var item = object[key]; // Stop here if item is empty\n\n    if (!item) {\n      return;\n    } // Get the value to be compared\n\n\n    var value = isString(property) ? item[property] : item; // Check if the value match the pattern\n\n    if (isString(value) && pattern.test(value)) {\n      // Add the current item to the result\n      result.push(item);\n    }\n\n    if (isObject$1(item)) {\n      // Search recursively the item if the current item is an object\n      search(item, query, property, result);\n    }\n  }); // Return the found items\n\n  return result;\n} // Encode any string into a safe format for HTML id attribute\n\n\nfunction encodeId(input) {\n  var string = input && input.toString ? input.toString() : input; // Return an underscore if the given string is empty or if it's not a string\n\n  if (string === '' || typeof string !== 'string') {\n    return '_';\n  } // Create a converter to replace non accepted chars\n\n\n  var converter = function converter(match) {\n    return '_' + match[0].charCodeAt(0).toString(16) + '_';\n  }; // Encode the given string and return it\n\n\n  return string.replace(/[^a-zA-Z0-9-]/g, converter);\n}\n\nvar string = {\n  search: search,\n  encodeId: encodeId\n};\n/**\n * Parses data returned from a QIDO search and transforms it into\n * an array of series that are present in the study\n *\n * @param server The DICOM server\n * @param studyInstanceUid\n * @param resultData\n * @returns {Array} Series List\n */\n\nfunction resultDataToStudyMetadata$1(server, studyInstanceUid, resultData) {\n  var seriesMap = {};\n  var seriesList = [];\n  resultData.forEach(function (instance) {\n    // Use seriesMap to cache series data\n    // If the series instance UID has already been used to\n    // process series data, continue using that series\n    var seriesInstanceUid = DICOMWeb.getString(instance['0020000E']);\n    var series = seriesMap[seriesInstanceUid]; // If no series data exists in the seriesMap cache variable,\n    // process any available series data\n\n    if (!series) {\n      series = {\n        seriesInstanceUid: seriesInstanceUid,\n        seriesNumber: DICOMWeb.getString(instance['00200011']),\n        instances: []\n      }; // Save this data in the seriesMap cache variable\n\n      seriesMap[seriesInstanceUid] = series;\n      seriesList.push(series);\n    } // The uri for the dicomweb\n    // NOTE: DCM4CHEE seems to return the data zipped\n    // NOTE: Orthanc returns the data with multi-part mime which cornerstoneWADOImageLoader doesn't\n    //       know how to parse yet\n    //var uri = DICOMWeb.getString(instance['00081190']);\n    //uri = uri.replace('wado-rs', 'dicom-web');\n    // manually create a WADO-URI from the UIDs\n    // NOTE: Haven't been able to get Orthanc's WADO-URI to work yet - maybe its not configured?\n\n\n    var sopInstanceUid = DICOMWeb.getString(instance['00080018']);\n    var uri = server.wadoUriRoot + '?requestType=WADO&studyUID=' + studyInstanceUid + '&seriesUID=' + seriesInstanceUid + '&objectUID=' + sopInstanceUid + '&contentType=application%2Fdicom'; // Add this instance to the current series\n\n    series.instances.push({\n      sopClassUid: DICOMWeb.getString(instance['00080016']),\n      sopInstanceUid: sopInstanceUid,\n      uri: uri,\n      instanceNumber: DICOMWeb.getString(instance['00200013'])\n    });\n  });\n  return seriesList;\n}\n/**\n * Retrieve a set of instances using a QIDO call\n * @param server\n * @param studyInstanceUid\n * @throws ECONNREFUSED\n * @returns {{wadoUriRoot: String, studyInstanceUid: String, seriesList: Array}}\n */\n\n\nfunction Instances(server, studyInstanceUid) {\n  // TODO: Are we using this function anywhere?? Can we remove it?\n  var config = {\n    url: server.qidoRoot,\n    headers: DICOMWeb.getAuthorizationHeader(server)\n  };\n  var dicomWeb = new api.DICOMwebClient(config);\n  var queryParams = getQIDOQueryParams(filter, server.qidoSupportsIncludeField);\n  var options = {\n    studyInstanceUID: studyInstanceUid\n  };\n  return dicomWeb.searchForInstances(options).then(function (result) {\n    return {\n      wadoUriRoot: server.wadoUriRoot,\n      studyInstanceUid: studyInstanceUid,\n      seriesList: resultDataToStudyMetadata$1(server, studyInstanceUid, result.data)\n    };\n  });\n}\n/**\n * Creates a QIDO date string for a date range query\n * Assumes the year is positive, at most 4 digits long.\n *\n * @param date The Date object to be formatted\n * @returns {string} The formatted date string\n */\n\n\nfunction dateToString(date) {\n  if (!date) return '';\n  var year = date.getFullYear().toString();\n  var month = (date.getMonth() + 1).toString();\n  var day = date.getDate().toString();\n  year = '0'.repeat(4 - year.length).concat(year);\n  month = '0'.repeat(2 - month.length).concat(month);\n  day = '0'.repeat(2 - day.length).concat(day);\n  return ''.concat(year, month, day);\n}\n/**\n * Produces a QIDO URL given server details and a set of specified search filter\n * items\n *\n * @param filter\n * @param serverSupportsQIDOIncludeField\n * @returns {string} The URL with encoded filter query data\n */\n\n\nfunction getQIDOQueryParams$1(filter, serverSupportsQIDOIncludeField) {\n  var commaSeparatedFields = ['00081030', // Study Description\n  '00080060'].join(',');\n  var parameters = {\n    PatientName: filter.patientName,\n    PatientID: filter.patientId,\n    AccessionNumber: filter.accessionNumber,\n    StudyDescription: filter.studyDescription,\n    ModalitiesInStudy: filter.modalitiesInStudy,\n    limit: filter.limit,\n    offset: filter.offset,\n    includefield: serverSupportsQIDOIncludeField ? commaSeparatedFields : 'all'\n  }; // build the StudyDate range parameter\n\n  if (filter.studyDateFrom || filter.studyDateTo) {\n    var dateFrom = dateToString(new Date(filter.studyDateFrom));\n    var dateTo = dateToString(new Date(filter.studyDateTo));\n    parameters.StudyDate = \"\".concat(dateFrom, \"-\").concat(dateTo);\n  } // Build the StudyInstanceUID parameter\n\n\n  if (filter.studyInstanceUid) {\n    var studyUids = filter.studyInstanceUid;\n    studyUids = Array.isArray(studyUids) ? studyUids.join() : studyUids;\n    studyUids = studyUids.replace(/[^0-9.]+/g, '\\\\');\n    parameters.StudyInstanceUID = studyUids;\n  } // Clean query params of undefined values.\n\n\n  var params = {};\n  Object.keys(parameters).forEach(function (key) {\n    if (parameters[key] !== undefined && parameters[key] !== '') {\n      params[key] = parameters[key];\n    }\n  });\n  return params;\n}\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param resultData\n * @returns {Array} An array of Study MetaData objects\n */\n\n\nfunction resultDataToStudies(resultData) {\n  var studies = [];\n  if (!resultData || !resultData.length) return;\n  resultData.forEach(function (study) {\n    return studies.push({\n      studyInstanceUid: DICOMWeb.getString(study['0020000D']),\n      // 00080005 = SpecificCharacterSet\n      studyDate: DICOMWeb.getString(study['00080020']),\n      studyTime: DICOMWeb.getString(study['00080030']),\n      accessionNumber: DICOMWeb.getString(study['00080050']),\n      referringPhysicianName: DICOMWeb.getString(study['00080090']),\n      // 00081190 = URL\n      patientName: DICOMWeb.getName(study['00100010']),\n      patientId: DICOMWeb.getString(study['00100020']),\n      patientBirthdate: DICOMWeb.getString(study['00100030']),\n      patientSex: DICOMWeb.getString(study['00100040']),\n      studyId: DICOMWeb.getString(study['00200010']),\n      numberOfStudyRelatedSeries: DICOMWeb.getString(study['00201206']),\n      numberOfStudyRelatedInstances: DICOMWeb.getString(study['00201208']),\n      studyDescription: DICOMWeb.getString(study['00081030']),\n      // modality: DICOMWeb.getString(study['00080060']),\n      // modalitiesInStudy: DICOMWeb.getString(study['00080061']),\n      modalities: DICOMWeb.getString(DICOMWeb.getModalities(study['00080060'], study['00080061']))\n    });\n  });\n  return studies;\n}\n\nfunction Studies(server, filter) {\n  var config = {\n    url: server.qidoRoot,\n    headers: DICOMWeb.getAuthorizationHeader(server)\n  };\n  var dicomWeb = new api.DICOMwebClient(config);\n  var queryParams = getQIDOQueryParams$1(filter, server.qidoSupportsIncludeField);\n  var options = {\n    queryParams: queryParams\n  };\n  return dicomWeb.searchForStudies(options).then(resultDataToStudies);\n} // DICOMWeb instance, study, and metadata retrieval\n\n\nvar WADO = {\n  RetrieveMetadata: RetrieveMetadata\n};\nvar QIDO = {\n  Studies: Studies,\n  Instances: Instances\n};\n/**\n * Overridable namespace to allow getting study boxes data externally.\n *\n * The function must handle the first parameter as a studyInformation object containing at least the\n * studyInstanceUid attribute.\n *\n * Shall return a promise that will be resolved with an object containing those attributes:\n * - studyInstanceUid {String}: copy of studyInformation.studyInstanceUid\n * - modalities {String}: 2 uppercase letters for each modality split by any non-alphabetical char(s)\n * - studyDate {String}: date formatted as YYYYMMDD\n * - studyDescription {String}: study description string\n */\n// TODO: What is this for?\n\nvar getStudyBoxData = false;\n/**\n * Retrieves metaData for multiple studies at once.\n *\n * This function calls retrieveStudyMetadata several times, asynchronously,\n * and waits for all of the results to be returned.\n *\n * @param studyInstanceUids The UIDs of the Studies to be retrieved\n * @return Promise\n */\n\nfunction retrieveStudiesMetadata(server, studyInstanceUids, seriesInstanceUids) {\n  // Create an empty array to store the Promises for each metaData retrieval call\n  var promises = []; // Loop through the array of studyInstanceUids\n\n  studyInstanceUids.forEach(function (studyInstanceUid) {\n    // Send the call and resolve or reject the related promise based on its outcome\n    var promise = retrieveStudyMetadata(server, studyInstanceUid, seriesInstanceUids); // Add the current promise to the array of promises\n\n    promises.push(promise);\n  }); // When all of the promises are complete, this callback runs\n\n  var promise = Promise.all(promises); // Warn the error on console if some retrieval failed\n\n  promise.catch(function (error) {\n    return log$1.warn(error);\n  });\n  return promise;\n}\n\nvar studySearchPromises = new Map();\n/**\n * Search for studies information by the given filter\n *\n * @param {Object} filter Filter that will be used on search\n * @returns {Promise} resolved with an array of studies information or rejected with an error\n */\n\nfunction searchStudies(server, filter) {\n  var promiseKey = JSON.stringify(filter);\n\n  if (studySearchPromises.has(promiseKey)) {\n    return studySearchPromises.get(promiseKey);\n  } else {\n    var promise = Studies(server, filter);\n    studySearchPromises.set(promiseKey, promise);\n    return promise;\n  }\n}\n/**\n * Sorts the series and instances inside a study instance by their series\n * and instance numbers in ascending order.\n *\n * @param {Object} study The study instance\n */\n\n\nfunction sortStudy(study) {\n  if (!study || !study.seriesList) {\n    throw new Error('Insufficient study data was provided to sortStudy');\n  }\n\n  study.seriesList.sort(function (a, b) {\n    return a.seriesNumber - b.seriesNumber;\n  });\n  study.seriesList.forEach(function (series) {\n    series.instances.sort(function (a, b) {\n      return a.instanceNumber - b.instanceNumber;\n    });\n  });\n}\n\nvar studies = {\n  services: {\n    QIDO: QIDO,\n    WADO: WADO\n  },\n  loadingDict: {},\n  retrieveStudyMetadata: retrieveStudyMetadata,\n  deleteStudyMetadataPromise: deleteStudyMetadataPromise,\n  retrieveStudiesMetadata: retrieveStudiesMetadata,\n  getStudyBoxData: getStudyBoxData,\n  searchStudies: searchStudies,\n  sortStudy: sortStudy\n};\nvar FUNCTION$2 = 'function';\nvar STRING$3 = 'string';\nvar WILDCARD = '*'; // \"*\" is a special name which means \"all children\".\n\nvar SEPARATOR = '.';\n/**\n * Main Namespace Component Class\n */\n\nvar Node =\n/*#__PURE__*/\nfunction () {\n  function Node() {\n    classCallCheck(this, Node);\n    this.value = 0;\n    this.children = {};\n    this.handlers = {};\n  }\n\n  createClass(Node, [{\n    key: \"getPathComponents\",\n    value: function getPathComponents(path) {\n      return _typeof_1(path) === STRING$3 ? path.split(SEPARATOR) : null;\n    }\n  }, {\n    key: \"getNodeUpToIndex\",\n    value: function getNodeUpToIndex(path, index) {\n      var node = this;\n\n      for (var i = 0; i < index; ++i) {\n        var item = path[i];\n\n        if (node.children.hasOwnProperty(item)) {\n          node = node.children[item];\n        } else {\n          node = null;\n          break;\n        }\n      }\n\n      return node;\n    }\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      var children = this.children;\n      var node = null;\n\n      if (children.hasOwnProperty(name)) {\n        node = children[name];\n      } else if (_typeof_1(name) === STRING$3 && name !== WILDCARD) {\n        node = new Node();\n        children[name] = node;\n      }\n\n      if (node !== null) {\n        node.value += value > 0 ? parseInt(value) : 0;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"probe\",\n    value: function probe(recursively) {\n      var value = this.value; // Calculate entire tree value recursively?\n\n      if (recursively === true) {\n        var children = this.children;\n\n        for (var item in children) {\n          if (children.hasOwnProperty(item)) {\n            value += children[item].probe(recursively);\n          }\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(recursively) {\n      this.value = 0; // Clear entire tree recursively?\n\n      if (recursively === true) {\n        var children = this.children;\n\n        for (var item in children) {\n          if (children.hasOwnProperty(item)) {\n            children[item].clear(recursively);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"appendPath\",\n    value: function appendPath(path, value) {\n      path = this.getPathComponents(path);\n\n      if (path !== null) {\n        var last = path.length - 1;\n        var node = this;\n\n        for (var i = 0; i < last; ++i) {\n          node = node.append(path[i], 0);\n\n          if (node === null) {\n            return false;\n          }\n        }\n\n        return node.append(path[last], value) !== null;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"clearPath\",\n    value: function clearPath(path, recursively) {\n      path = this.getPathComponents(path);\n\n      if (path !== null) {\n        var last = path.length - 1;\n        var node = this.getNodeUpToIndex(path, last);\n\n        if (node !== null) {\n          var item = path[last];\n\n          if (item !== WILDCARD) {\n            if (node.children.hasOwnProperty(item)) {\n              node.children[item].clear(recursively);\n              return true;\n            }\n          } else {\n            var children = node.children;\n\n            for (item in children) {\n              if (children.hasOwnProperty(item)) {\n                children[item].clear(recursively);\n              }\n            }\n\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"probePath\",\n    value: function probePath(path, recursively) {\n      path = this.getPathComponents(path);\n\n      if (path !== null) {\n        var last = path.length - 1;\n        var node = this.getNodeUpToIndex(path, last);\n\n        if (node !== null) {\n          var item = path[last];\n\n          if (item !== WILDCARD) {\n            if (node.children.hasOwnProperty(item)) {\n              return node.children[item].probe(recursively);\n            }\n          } else {\n            var children = node.children;\n            var value = 0;\n\n            for (item in children) {\n              if (children.hasOwnProperty(item)) {\n                value += children[item].probe(recursively);\n              }\n            }\n\n            return value;\n          }\n        }\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"attachHandler\",\n    value: function attachHandler(type, handler) {\n      var result = false;\n\n      if (_typeof_1(type) === STRING$3 && _typeof_1(handler) === FUNCTION$2) {\n        var handlers = this.handlers;\n        var list = handlers.hasOwnProperty(type) ? handlers[type] : handlers[type] = [];\n        var length = list.length;\n        var notFound = true;\n\n        for (var i = 0; i < length; ++i) {\n          if (handler === list[i]) {\n            notFound = false;\n            break;\n          }\n        }\n\n        if (notFound) {\n          list[length] = handler;\n          result = true;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"removeHandler\",\n    value: function removeHandler(type, handler) {\n      var result = false;\n\n      if (_typeof_1(type) === STRING$3 && _typeof_1(handler) === FUNCTION$2) {\n        var handlers = this.handlers;\n\n        if (handlers.hasOwnProperty(type)) {\n          var list = handlers[type];\n          var length = list.length;\n\n          for (var i = 0; i < length; ++i) {\n            if (handler === list[i]) {\n              list.splice(i, 1);\n              result = true;\n              break;\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(type, nonRecursively) {\n      if (_typeof_1(type) === STRING$3) {\n        var handlers = this.handlers;\n\n        if (handlers.hasOwnProperty(type)) {\n          var list = handlers[type];\n          var length = list.length;\n\n          for (var i = 0; i < length; ++i) {\n            list[i].call(null);\n          }\n        }\n\n        if (nonRecursively !== true) {\n          var children = this.children;\n\n          for (var item in children) {\n            if (children.hasOwnProperty(item)) {\n              children[item].trigger(type);\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"attachHandlerForPath\",\n    value: function attachHandlerForPath(path, type, handler) {\n      path = this.getPathComponents(path);\n\n      if (path !== null) {\n        var node = this.getNodeUpToIndex(path, path.length);\n\n        if (node !== null) {\n          return node.attachHandler(type, handler);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"removeHandlerForPath\",\n    value: function removeHandlerForPath(path, type, handler) {\n      path = this.getPathComponents(path);\n\n      if (path !== null) {\n        var node = this.getNodeUpToIndex(path, path.length);\n\n        if (node !== null) {\n          return node.removeHandler(type, handler);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"triggerHandlersForPath\",\n    value: function triggerHandlersForPath(path, type, nonRecursively) {\n      path = this.getPathComponents(path);\n\n      if (path !== null) {\n        var node = this.getNodeUpToIndex(path, path.length);\n\n        if (node !== null) {\n          node.trigger(type, nonRecursively);\n        }\n      }\n    }\n  }]);\n  return Node;\n}();\n/**\n * Root Namespace Node and API\n */\n\n\nvar rootNode = new Node();\n\nfunction handleError(error) {\n  var title = error.title,\n      message = error.message;\n\n  if (!title) {\n    if (error instanceof Error) {\n      title = error.name;\n    }\n  }\n\n  if (!message) {\n    if (error instanceof Error) {\n      message = error.message;\n    }\n  }\n\n  var data = Object.assign({\n    title: title,\n    message: message,\n    class: 'themed',\n    hideConfirm: true,\n    cancelLabel: 'Dismiss',\n    cancelClass: 'btn-secondary'\n  }, error || {});\n  log$1.error(error); // TODO: Find a better way to handle errors instead of displaying a dialog for all of them.\n  // OHIF.ui.showDialog('dialogForm', data);\n}\n/**\n * Check if the pressed key combination will result in a character input\n * Got from https://stackoverflow.com/questions/4179708/how-to-detect-if-the-pressed-key-will-produce-a-character-inside-an-input-text\n *\n * @returns {Boolean} Whether the pressed key combination will input a character or not\n */\n\n\nfunction isCharacterKeyPress(event) {\n  if (typeof event.which === 'undefined') {\n    // This is IE, which only fires keypress events for printable keys\n    return true;\n  } else if (typeof event.which === 'number' && event.which > 0) {\n    // In other browsers except old versions of WebKit, event.which is\n    // only greater than zero if the keypress is a printable key.\n    // We need to filter out backspace and ctrl/alt/meta key combinations\n    return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8;\n  }\n\n  return false;\n}\n/**\n * Get the offset for the given element\n *\n * @param {Object} element DOM element which will have the offser calculated\n * @returns {Object} Object containing the top and left offset\n */\n\n\nfunction getOffset(element) {\n  var top = 0;\n  var left = 0;\n\n  if (element.offsetParent) {\n    do {\n      left += element.offsetLeft;\n      top += element.offsetTop;\n    } while (element = element.offsetParent);\n  }\n\n  return {\n    left: left,\n    top: top\n  };\n}\n/**\n * Get the vertical and horizontal scrollbar sizes\n * Got from https://stackoverflow.com/questions/986937/how-can-i-get-the-browsers-scrollbar-sizes\n *\n * @returns {Array} Array containing the scrollbar horizontal and vertical sizes\n */\n\n\nfunction getScrollbarSize() {\n  var inner = document.createElement('p');\n  inner.style.width = '100%';\n  inner.style.height = '100%';\n  var outer = document.createElement('div');\n  outer.style.position = 'absolute';\n  outer.style.top = '0px';\n  outer.style.left = '0px';\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.height = '100px';\n  outer.style.overflow = 'hidden';\n  outer.appendChild(inner);\n  document.body.appendChild(outer);\n  var w1 = inner.offsetWidth;\n  var h1 = inner.offsetHeight;\n  outer.style.overflow = 'scroll';\n  var w2 = inner.offsetWidth;\n  var h2 = inner.offsetHeight;\n\n  if (w1 === w2) {\n    w2 = outer.clientWidth;\n  }\n\n  if (h1 === h2) {\n    h2 = outer.clientHeight;\n  }\n\n  document.body.removeChild(outer);\n  return [w1 - w2, h1 - h2];\n}\n\nvar ui = {\n  getScrollbarSize: getScrollbarSize,\n  getOffset: getOffset,\n  isCharacterKeyPress: isCharacterKeyPress,\n  handleError: handleError\n};\nvar OHIF$1 = {\n  MODULE_TYPES: MODULE_TYPES,\n  //\n  CommandsManager: CommandsManager,\n  ExtensionManager: ExtensionManager,\n  HotkeysManager: HotkeysManager,\n  //\n  utils: utils$1,\n  studies: studies,\n  redux: redux,\n  classes: classes,\n  metadata: metadata,\n  header: header,\n  cornerstone: cornerstone$1,\n  string: string,\n  ui: ui,\n  user: user,\n  object: object,\n  log: log$1,\n  DICOMWeb: DICOMWeb,\n  viewer: {},\n  measurements: measurements,\n  hangingProtocols: hangingProtocols\n};\nexport default OHIF$1;\nexport { MODULE_TYPES, CommandsManager, ExtensionManager, HotkeysManager, utils$1 as utils, studies, redux, classes, metadata, header, cornerstone$1 as cornerstone, string, ui, user, object, log$1 as log, DICOMWeb, measurements, hangingProtocols, OHIF$1 as OHIF };","map":null,"metadata":{},"sourceType":"module"}