{"ast":null,"code":"import _regeneratorRuntime from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/connectedComponents/ViewerRetrieveStudyData.js\";\nimport React, { Component } from 'react';\nimport { metadata, studies, utils } from 'ohif-core';\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nvar OHIFStudyMetadata = metadata.OHIFStudyMetadata;\nvar retrieveStudiesMetadata = studies.retrieveStudiesMetadata;\nvar studyMetadataManager = utils.studyMetadataManager,\n    updateMetaDataManager = utils.updateMetaDataManager;\n\nvar ViewerRetrieveStudyData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ViewerRetrieveStudyData, _Component);\n\n  function ViewerRetrieveStudyData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ViewerRetrieveStudyData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ViewerRetrieveStudyData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      studies: null,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(ViewerRetrieveStudyData, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this$props, studyInstanceUids, seriesInstanceUids, server, _studies, updatedStudies;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // TODO: Avoid using timepoints here\n                //const params = { studyInstanceUids, seriesInstanceUids, timepointId, timepointsFilter={} };\n                _this$props = this.props, studyInstanceUids = _this$props.studyInstanceUids, seriesInstanceUids = _this$props.seriesInstanceUids, server = _this$props.server;\n                _context.prev = 1;\n                _context.next = 4;\n                return retrieveStudiesMetadata(server, studyInstanceUids, seriesInstanceUids);\n\n              case 4:\n                _studies = _context.sent;\n                // Render the viewer when the data is ready\n                // TODO: CLEAR THIS SOMEWHERE ELSE\n                studyMetadataManager.purge(); // Map studies to new format, update metadata manager?\n\n                updatedStudies = _studies.map(function (study) {\n                  var studyMetadata = new OHIFStudyMetadata(study, study.studyInstanceUid);\n                  var sopClassHandlerModules = extensionManager.modules['sopClassHandlerModule'];\n                  study.displaySets = study.displaySets || studyMetadata.createDisplaySets(sopClassHandlerModules);\n                  studyMetadata.setDisplaySets(study.displaySets); // Updates WADO-RS metaDataManager\n\n                  updateMetaDataManager(study);\n                  studyMetadataManager.add(studyMetadata);\n                  return study;\n                });\n                this.setState({\n                  studies: updatedStudies\n                });\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.setState({\n                  error: true\n                }); // TODO: Handle gracefully instead of throwing?\n\n                throw new Error(_context.t0);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Error: \", JSON.stringify(this.state.error));\n      }\n\n      return React.createElement(ConnectedViewer, {\n        studies: this.state.studies,\n        studyInstanceUids: this.props.studyInstanceUids,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ViewerRetrieveStudyData;\n}(Component);\n\nViewerRetrieveStudyData.propTypes = {\n  studyInstanceUids: PropTypes.array.isRequired,\n  seriesInstanceUids: PropTypes.array,\n  server: PropTypes.object\n};\nexport default ViewerRetrieveStudyData;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ViewerRetrieveStudyData.js"],"names":["React","Component","metadata","studies","utils","ConnectedViewer","PropTypes","extensionManager","OHIFStudyMetadata","retrieveStudiesMetadata","studyMetadataManager","updateMetaDataManager","ViewerRetrieveStudyData","state","error","props","studyInstanceUids","seriesInstanceUids","server","purge","updatedStudies","map","study","studyMetadata","studyInstanceUid","sopClassHandlerModules","modules","displaySets","createDisplaySets","setDisplaySets","add","setState","Error","JSON","stringify","propTypes","array","isRequired","object"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,KAA5B,QAAyC,WAAzC;AAEA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gBAAT,QAAiC,aAAjC;IAEQC,iB,GAAsBN,Q,CAAtBM,iB;IACAC,uB,GAA4BN,O,CAA5BM,uB;IACAC,oB,GAAgDN,K,CAAhDM,oB;IAAsBC,qB,GAA0BP,K,CAA1BO,qB;;IAExBC,uB;;;;;;;;;;;;;;;;;UAOJC,K,GAAQ;AACNV,MAAAA,OAAO,EAAE,IADH;AAENW,MAAAA,KAAK,EAAE;AAFD,K;;;;;;;;;;;;;;;;AAMN;AACA;8BAC0D,KAAKC,K,EAAvDC,iB,eAAAA,iB,EAAmBC,kB,eAAAA,kB,EAAoBC,M,eAAAA,M;;;uBAGvBT,uBAAuB,CAC3CS,MAD2C,EAE3CF,iBAF2C,EAG3CC,kBAH2C,C;;;AAAvCd,gBAAAA,Q;AAMN;AACA;AACAO,gBAAAA,oBAAoB,CAACS,KAArB,G,CAEA;;AACMC,gBAAAA,c,GAAiBjB,QAAO,CAACkB,GAAR,CAAY,UAAAC,KAAK,EAAI;AAC1C,sBAAMC,aAAa,GAAG,IAAIf,iBAAJ,CACpBc,KADoB,EAEpBA,KAAK,CAACE,gBAFc,CAAtB;AAIA,sBAAMC,sBAAsB,GAC1BlB,gBAAgB,CAACmB,OAAjB,CAAyB,uBAAzB,CADF;AAGAJ,kBAAAA,KAAK,CAACK,WAAN,GACEL,KAAK,CAACK,WAAN,IACAJ,aAAa,CAACK,iBAAd,CAAgCH,sBAAhC,CAFF;AAGAF,kBAAAA,aAAa,CAACM,cAAd,CAA6BP,KAAK,CAACK,WAAnC,EAX0C,CAa1C;;AACAhB,kBAAAA,qBAAqB,CAACW,KAAD,CAArB;AAEAZ,kBAAAA,oBAAoB,CAACoB,GAArB,CAAyBP,aAAzB;AAEA,yBAAOD,KAAP;AACD,iBAnBsB,C;AAqBvB,qBAAKS,QAAL,CAAc;AACZ5B,kBAAAA,OAAO,EAAEiB;AADG,iBAAd;;;;;;;AAIA,qBAAKW,QAAL,CAAc;AACZjB,kBAAAA,KAAK,EAAE;AADK,iBAAd,E,CAIA;;sBACM,IAAIkB,KAAJ,a;;;;;;;;;;;;;;;;;;6BAID;AACP,UAAI,KAAKnB,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAamB,IAAI,CAACC,SAAL,CAAe,KAAKrB,KAAL,CAAWC,KAA1B,CAAb,CAAP;AACD;;AAED,aACE,oBAAC,eAAD;AACE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWV,OADtB;AAEE,QAAA,iBAAiB,EAAE,KAAKY,KAAL,CAAWC,iBAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;;;EA1EmCf,S;;AAAhCW,uB,CACGuB,S,GAAY;AACjBnB,EAAAA,iBAAiB,EAAEV,SAAS,CAAC8B,KAAV,CAAgBC,UADlB;AAEjBpB,EAAAA,kBAAkB,EAAEX,SAAS,CAAC8B,KAFb;AAGjBlB,EAAAA,MAAM,EAAEZ,SAAS,CAACgC;AAHD,C;AA4ErB,eAAe1B,uBAAf","sourcesContent":["import React, { Component } from 'react';\nimport { metadata, studies, utils } from 'ohif-core';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\n\nconst { OHIFStudyMetadata } = metadata;\nconst { retrieveStudiesMetadata } = studies;\nconst { studyMetadataManager, updateMetaDataManager } = utils;\n\nclass ViewerRetrieveStudyData extends Component {\n  static propTypes = {\n    studyInstanceUids: PropTypes.array.isRequired,\n    seriesInstanceUids: PropTypes.array,\n    server: PropTypes.object,\n  };\n\n  state = {\n    studies: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    // TODO: Avoid using timepoints here\n    //const params = { studyInstanceUids, seriesInstanceUids, timepointId, timepointsFilter={} };\n    const { studyInstanceUids, seriesInstanceUids, server } = this.props;\n\n    try {\n      const studies = await retrieveStudiesMetadata(\n        server,\n        studyInstanceUids,\n        seriesInstanceUids\n      );\n\n      // Render the viewer when the data is ready\n      // TODO: CLEAR THIS SOMEWHERE ELSE\n      studyMetadataManager.purge();\n\n      // Map studies to new format, update metadata manager?\n      const updatedStudies = studies.map(study => {\n        const studyMetadata = new OHIFStudyMetadata(\n          study,\n          study.studyInstanceUid\n        );\n        const sopClassHandlerModules =\n          extensionManager.modules['sopClassHandlerModule'];\n\n        study.displaySets =\n          study.displaySets ||\n          studyMetadata.createDisplaySets(sopClassHandlerModules);\n        studyMetadata.setDisplaySets(study.displaySets);\n\n        // Updates WADO-RS metaDataManager\n        updateMetaDataManager(study);\n\n        studyMetadataManager.add(studyMetadata);\n\n        return study;\n      });\n\n      this.setState({\n        studies: updatedStudies,\n      });\n    } catch (err) {\n      this.setState({\n        error: true,\n      });\n\n      // TODO: Handle gracefully instead of throwing?\n      throw new Error(err);\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    }\n\n    return (\n      <ConnectedViewer\n        studies={this.state.studies}\n        studyInstanceUids={this.props.studyInstanceUids}\n      />\n    );\n  }\n}\n\nexport default ViewerRetrieveStudyData;\n"]},"metadata":{},"sourceType":"module"}