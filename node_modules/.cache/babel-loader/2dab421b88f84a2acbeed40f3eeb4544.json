{"ast":null,"code":"import { LayoutButton } from 'react-viewerbase';\nimport OHIF from 'ohif-core';\nimport { connect } from 'react-redux';\nvar setLayout = OHIF.redux.actions.setLayout;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentLayout: state.viewports.layout\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: function onChange(selectedCell) {\n      var viewports = [];\n      var rows = selectedCell.row + 1;\n      var columns = selectedCell.col + 1;\n      var numViewports = rows * columns;\n\n      for (var i = 0; i < numViewports; i++) {\n        viewports.push({\n          height: \"\".concat(100 / rows, \"%\"),\n          width: \"\".concat(100 / columns, \"%\")\n        });\n      }\n\n      var layout = {\n        viewports: viewports\n      };\n      dispatch(setLayout(layout));\n    }\n  };\n};\n\nvar ConnectedLayoutButton = connect(mapStateToProps, mapDispatchToProps)(LayoutButton);\nexport default ConnectedLayoutButton;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ConnectedLayoutButton.js"],"names":["LayoutButton","OHIF","connect","setLayout","redux","actions","mapStateToProps","state","currentLayout","viewports","layout","mapDispatchToProps","dispatch","onChange","selectedCell","rows","row","columns","col","numViewports","i","push","height","width","ConnectedLayoutButton"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;IAEQC,S,GAAcF,IAAI,CAACG,KAAL,CAAWC,O,CAAzBF,S;;AAER,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLC,IAAAA,aAAa,EAAED,KAAK,CAACE,SAAN,CAAgBC;AAD1B,GAAP;AAGD,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACL;AACAC,IAAAA,QAAQ,EAAE,kBAAAC,YAAY,EAAI;AACxB,UAAIL,SAAS,GAAG,EAAhB;AACA,UAAMM,IAAI,GAAGD,YAAY,CAACE,GAAb,GAAmB,CAAhC;AACA,UAAMC,OAAO,GAAGH,YAAY,CAACI,GAAb,GAAmB,CAAnC;AACA,UAAMC,YAAY,GAAGJ,IAAI,GAAGE,OAA5B;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAApB,EAAkCC,CAAC,EAAnC,EAAuC;AACrCX,QAAAA,SAAS,CAACY,IAAV,CAAe;AACbC,UAAAA,MAAM,YAAK,MAAMP,IAAX,MADO;AAEbQ,UAAAA,KAAK,YAAK,MAAMN,OAAX;AAFQ,SAAf;AAID;;AACD,UAAMP,MAAM,GAAG;AACbD,QAAAA,SAAS,EAATA;AADa,OAAf;AAIAG,MAAAA,QAAQ,CAACT,SAAS,CAACO,MAAD,CAAV,CAAR;AACD;AAlBI,GAAP;AAoBD,CArBD;;AAuBA,IAAMc,qBAAqB,GAAGtB,OAAO,CACnCI,eADmC,EAEnCK,kBAFmC,CAAP,CAG5BX,YAH4B,CAA9B;AAKA,eAAewB,qBAAf","sourcesContent":["import { LayoutButton } from 'react-viewerbase';\nimport OHIF from 'ohif-core';\nimport { connect } from 'react-redux';\n\nconst { setLayout } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: selectedCell => {\n      let viewports = [];\n      const rows = selectedCell.row + 1;\n      const columns = selectedCell.col + 1;\n      const numViewports = rows * columns;\n      for (let i = 0; i < numViewports; i++) {\n        viewports.push({\n          height: `${100 / rows}%`,\n          width: `${100 / columns}%`,\n        });\n      }\n      const layout = {\n        viewports,\n      };\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n"]},"metadata":{},"sourceType":"module"}