{"ast":null,"code":"import { connect } from 'react-redux';\nimport { CineDialog } from 'react-viewerbase';\nimport OHIF from 'ohif-core';\nimport csTools from 'cornerstone-tools'; // Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\n\nimport cloneDeep from 'lodash.clonedeep';\nvar toolImport = csTools.import;\nvar scrollToIndex = toolImport('util/scrollToIndex');\nvar setViewportSpecificData = OHIF.redux.actions.setViewportSpecificData; // Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\n\nvar mapStateToProps = function mapStateToProps(state) {\n  // Get activeViewport's `cine` and `stack`\n  var _state$viewports = state.viewports,\n      viewportSpecificData = _state$viewports.viewportSpecificData,\n      activeViewportIndex = _state$viewports.activeViewportIndex;\n\n  var _ref = viewportSpecificData[activeViewportIndex] || {},\n      cine = _ref.cine,\n      dom = _ref.dom;\n\n  var cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24\n  }; // New props we're creating?\n\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchSetViewportSpecificData: function dispatchSetViewportSpecificData(viewportIndex, data) {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(propsFromState, propsFromDispatch, ownProps) {\n  var activeEnabledElement = propsFromState.activeEnabledElement,\n      activeViewportCineData = propsFromState.activeViewportCineData,\n      activeViewportIndex = propsFromState.activeViewportIndex;\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: function onPlayPauseChanged(isPlaying) {\n      var cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine: cine\n      });\n    },\n    onFrameRateChanged: function onFrameRateChanged(frameRate) {\n      var cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine: cine\n      });\n    },\n    onClickNextButton: function onClickNextButton() {\n      var stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      var _stackData$data$ = stackData.data[0],\n          currentImageIdIndex = _stackData$data$.currentImageIdIndex,\n          imageIds = _stackData$data$.imageIds;\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: function onClickBackButton() {\n      var stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      var currentImageIdIndex = stackData.data[0].currentImageIdIndex;\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: function onClickSkipToStart() {\n      var stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: function onClickSkipToEnd() {\n      var stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      var lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    }\n  };\n};\n\nvar ConnectedCineDialog = connect(mapStateToProps, mapDispatchToProps, mergeProps)(CineDialog);\nexport default ConnectedCineDialog;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ConnectedCineDialog.js"],"names":["connect","CineDialog","OHIF","csTools","cloneDeep","toolImport","import","scrollToIndex","setViewportSpecificData","redux","actions","mapStateToProps","state","viewports","viewportSpecificData","activeViewportIndex","cine","dom","cineData","isPlaying","cineFrameRate","activeEnabledElement","activeViewportCineData","mapDispatchToProps","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","mergeProps","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","ConnectedCineDialog"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { CineDialog } from 'react-viewerbase';\nimport OHIF from 'ohif-core';\nimport csTools from 'cornerstone-tools';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine, dom } = viewportSpecificData[activeViewportIndex] || {};\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n"]},"metadata":{},"sourceType":"module"}