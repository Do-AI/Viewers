{"ast":null,"code":"import _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/connectedComponents/ToolbarRow.js\";\nimport './ToolbarRow.css';\nimport React, { Component } from 'react';\nimport { RoundedButtonGroup, ToolbarButton } from 'react-viewerbase';\nimport { commandsManager, extensionManager } from './../App.js';\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport ConnectedPluginSwitch from './ConnectedPluginSwitch.js';\nimport { MODULE_TYPES } from 'ohif-core';\nimport PropTypes from 'prop-types';\n\nvar ToolbarRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ToolbarRow, _Component);\n\n  function ToolbarRow(props) {\n    var _this;\n\n    _classCallCheck(this, ToolbarRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToolbarRow).call(this, props));\n\n    _this.onLeftSidebarValueChanged = function (value) {\n      _this.props.setLeftSidebarOpen(!!value);\n    };\n\n    _this.onRightSidebarValueChanged = function (value) {\n      _this.props.setRightSidebarOpen(!!value);\n    };\n\n    var toolbarButtonDefinitions = _getVisibleToolbarButtons.call(_assertThisInitialized(_this)); // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n\n\n    _this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n      isCineDialogOpen: false\n    };\n    _this._handleBuiltIn = _handleBuiltIn.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ToolbarRow, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var activeContextsChanged = prevProps.activeContexts !== this.props.activeContexts;\n\n      if (activeContextsChanged) {\n        this.setState({\n          toolbarButtons: _getVisibleToolbarButtons.call(this)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var leftSidebarToggle = [{\n        value: 'studies',\n        icon: 'th-large',\n        bottomLabel: 'Series'\n      }];\n      var rightSidebarToggle = [{\n        value: 'measurements',\n        icon: 'list',\n        bottomLabel: 'Measurements'\n      }];\n      var leftSidebarValue = this.props.leftSidebarOpen ? leftSidebarToggle[0].value : null;\n      var rightSidebarValue = this.props.rightSidebarOpen ? rightSidebarToggle[0].value : null;\n\n      var buttonComponents = _getButtonComponents.call(this, this.state.toolbarButtons, this.state.activeButtons);\n\n      var cineDialogContainerStyle = {\n        display: this.state.isCineDialogOpen ? 'block' : 'none',\n        position: 'absolute',\n        top: '82px',\n        zIndex: 999\n      };\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"ToolbarRow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pull-left m-t-1 p-y-1\",\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(RoundedButtonGroup, {\n        options: leftSidebarToggle,\n        value: leftSidebarValue,\n        onValueChanged: this.onLeftSidebarValueChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), buttonComponents, React.createElement(ConnectedLayoutButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(ConnectedPluginSwitch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pull-right m-t-1 rm-x-1\",\n        style: {\n          marginLeft: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(RoundedButtonGroup, {\n        options: rightSidebarToggle,\n        value: rightSidebarValue,\n        onValueChanged: this.onRightSidebarValueChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"CineDialogContainer\",\n        style: cineDialogContainerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(ConnectedCineDialog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ToolbarRow;\n}(Component);\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\n\n\nToolbarRow.propTypes = {\n  leftSidebarOpen: PropTypes.bool.isRequired,\n  rightSidebarOpen: PropTypes.bool.isRequired,\n  setLeftSidebarOpen: PropTypes.func,\n  setRightSidebarOpen: PropTypes.func,\n  activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nToolbarRow.defaultProps = {\n  leftSidebarOpen: false,\n  rightSidebarOpen: false\n};\n\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  var _this2 = this;\n\n  return toolbarButtons.map(function (button, index) {\n    // TODO: If `button.buttons`, use `ExpandedToolMenu`\n    // I don't believe any extensions currently leverage this\n    return React.createElement(ToolbarButton, {\n      key: button.id,\n      label: button.label,\n      icon: button.icon,\n      onClick: function onClick(evt, props) {\n        if (button.commandName) {\n          var options = Object.assign({\n            evt: evt\n          }, button.commandOptions);\n          commandsManager.runCommand(button.commandName, options);\n        } // TODO: Use Types ENUM\n        // TODO: We can update this to be a `getter` on the extension to query\n        //       For the active tools after we apply our updates?\n\n\n        if (button.type === 'setToolActive') {\n          _this2.setState({\n            activeButtons: [button.id]\n          });\n        } else if (button.type === 'builtIn') {\n          _this2._handleBuiltIn(button.options);\n        }\n      },\n      isActive: activeButtons.includes(button.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    });\n  });\n}\n\nfunction _getVisibleToolbarButtons() {\n  var _this3 = this;\n\n  var toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  var toolbarButtonDefinitions = [];\n  toolbarModules.forEach(function (extension) {\n    var _extension$module = extension.module,\n        definitions = _extension$module.definitions,\n        defaultContext = _extension$module.defaultContext;\n    definitions.forEach(function (definition) {\n      var context = definition.context || defaultContext;\n\n      if (_this3.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      behavior = _ref.behavior;\n\n  if (behavior === 'CINE') {\n    this.setState({\n      isCineDialogOpen: !this.state.isCineDialogOpen\n    });\n  }\n}\n\nexport default ToolbarRow;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ToolbarRow.js"],"names":["React","Component","RoundedButtonGroup","ToolbarButton","commandsManager","extensionManager","ConnectedCineDialog","ConnectedLayoutButton","ConnectedPluginSwitch","MODULE_TYPES","PropTypes","ToolbarRow","props","onLeftSidebarValueChanged","value","setLeftSidebarOpen","onRightSidebarValueChanged","setRightSidebarOpen","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","state","toolbarButtons","activeButtons","isCineDialogOpen","_handleBuiltIn","bind","prevProps","activeContextsChanged","activeContexts","setState","leftSidebarToggle","icon","bottomLabel","rightSidebarToggle","leftSidebarValue","leftSidebarOpen","rightSidebarValue","rightSidebarOpen","buttonComponents","_getButtonComponents","cineDialogContainerStyle","display","position","top","zIndex","padding","marginLeft","propTypes","bool","isRequired","func","arrayOf","string","defaultProps","map","button","index","id","label","evt","commandName","options","Object","assign","commandOptions","runCommand","type","includes","toolbarModules","modules","TOOLBAR","forEach","extension","module","definitions","defaultContext","definition","context","push","behavior"],"mappings":"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","sourcesContent":["import './ToolbarRow.css';\n\nimport React, { Component } from 'react';\nimport { RoundedButtonGroup, ToolbarButton } from 'react-viewerbase';\nimport { commandsManager, extensionManager } from './../App.js';\n\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport ConnectedPluginSwitch from './ConnectedPluginSwitch.js';\nimport { MODULE_TYPES } from 'ohif-core';\nimport PropTypes from 'prop-types';\n\nclass ToolbarRow extends Component {\n  static propTypes = {\n    leftSidebarOpen: PropTypes.bool.isRequired,\n    rightSidebarOpen: PropTypes.bool.isRequired,\n    setLeftSidebarOpen: PropTypes.func,\n    setRightSidebarOpen: PropTypes.func,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    leftSidebarOpen: false,\n    rightSidebarOpen: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n    // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n      isCineDialogOpen: false,\n    };\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    if (activeContextsChanged) {\n      this.setState({\n        toolbarButtons: _getVisibleToolbarButtons.call(this),\n      });\n    }\n  }\n\n  onLeftSidebarValueChanged = value => {\n    this.props.setLeftSidebarOpen(!!value);\n  };\n\n  onRightSidebarValueChanged = value => {\n    this.props.setRightSidebarOpen(!!value);\n  };\n\n  render() {\n    const leftSidebarToggle = [\n      {\n        value: 'studies',\n        icon: 'th-large',\n        bottomLabel: 'Series',\n      },\n    ];\n\n    const rightSidebarToggle = [\n      {\n        value: 'measurements',\n        icon: 'list',\n        bottomLabel: 'Measurements',\n      },\n    ];\n\n    const leftSidebarValue = this.props.leftSidebarOpen\n      ? leftSidebarToggle[0].value\n      : null;\n\n    const rightSidebarValue = this.props.rightSidebarOpen\n      ? rightSidebarToggle[0].value\n      : null;\n\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const cineDialogContainerStyle = {\n      display: this.state.isCineDialogOpen ? 'block' : 'none',\n      position: 'absolute',\n      top: '82px',\n      zIndex: 999,\n    };\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\n            <RoundedButtonGroup\n              options={leftSidebarToggle}\n              value={leftSidebarValue}\n              onValueChanged={this.onLeftSidebarValueChanged}\n            />\n          </div>\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <ConnectedPluginSwitch />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            <RoundedButtonGroup\n              options={rightSidebarToggle}\n              value={rightSidebarValue}\n              onValueChanged={this.onRightSidebarValueChanged}\n            />\n          </div>\n        </div>\n        <div className=\"CineDialogContainer\" style={cineDialogContainerStyle}>\n          <ConnectedCineDialog />\n        </div>\n      </>\n    );\n  }\n}\n\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  return toolbarButtons.map((button, index) => {\n    // TODO: If `button.buttons`, use `ExpandedToolMenu`\n    // I don't believe any extensions currently leverage this\n    return (\n      <ToolbarButton\n        key={button.id}\n        label={button.label}\n        icon={button.icon}\n        onClick={(evt, props) => {\n          if (button.commandName) {\n            const options = Object.assign({ evt }, button.commandOptions);\n            commandsManager.runCommand(button.commandName, options);\n          }\n\n          // TODO: Use Types ENUM\n          // TODO: We can update this to be a `getter` on the extension to query\n          //       For the active tools after we apply our updates?\n          if (button.type === 'setToolActive') {\n            this.setState({\n              activeButtons: [button.id],\n            });\n          } else if (button.type === 'builtIn') {\n            this._handleBuiltIn(button.options);\n          }\n        }}\n        isActive={activeButtons.includes(button.id)}\n      />\n    );\n  });\n}\n\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn({ behavior } = {}) {\n  if (behavior === 'CINE') {\n    this.setState({\n      isCineDialogOpen: !this.state.isCineDialogOpen,\n    });\n  }\n}\n\nexport default ToolbarRow;\n"]},"metadata":{},"sourceType":"module"}