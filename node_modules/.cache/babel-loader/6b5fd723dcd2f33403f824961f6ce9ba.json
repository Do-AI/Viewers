{"ast":null,"code":"var _jsxFileName = \"/home/bitnami/Viewers/src/routes/IHEInvokeImageDisplay.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData.js';\n\nfunction decodeStudyUids(studyUids) {\n  var decodedData = window.atob(studyUids);\n  return decodedData.split(';');\n}\n\nfunction getQueryParameters(location) {\n  if (location) {\n    return queryString.parse(location.search);\n  }\n\n  return {};\n}\n\nfunction IHEInvokeImageDisplay(_ref) {\n  var location = _ref.location;\n\n  var _getQueryParameters = getQueryParameters(location),\n      requestType = _getQueryParameters.requestType,\n      studyUID = _getQueryParameters.studyUID;\n\n  switch (requestType) {\n    case 'STUDY':\n      return React.createElement(ConnectedViewerRetrieveStudyData, {\n        studyInstanceUids: studyUID.split(';'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n\n    case 'STUDYBASE64':\n      return React.createElement(ConnectedViewerRetrieveStudyData, {\n        studyInstanceUids: decodeStudyUids(studyUID),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n\n    case 'PATIENT':\n      // TODO: connect this to the StudyList when we have the filter parameters set up\n      // return <StudyList patientUids={patientID.split(';')} />;\n      return '';\n\n    default:\n      // TODO: Figure out what to do here, this won't work because StudyList expects studies\n      // return <StudyList />;\n      return '';\n  }\n}\n\nIHEInvokeImageDisplay.propTypes = {\n  location: PropTypes.shape({\n    search: PropTypes.string\n  }).isRequired\n};\nexport default withRouter(IHEInvokeImageDisplay);","map":{"version":3,"sources":["/home/bitnami/Viewers/src/routes/IHEInvokeImageDisplay.js"],"names":["React","PropTypes","withRouter","queryString","ConnectedViewerRetrieveStudyData","decodeStudyUids","studyUids","decodedData","window","atob","split","getQueryParameters","location","parse","search","IHEInvokeImageDisplay","requestType","studyUID","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,gCAAP,MAA6C,4DAA7C;;AAEA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAApB;AAEA,SAAOC,WAAW,CAACG,KAAZ,CAAkB,GAAlB,CAAP;AACD;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,MAAIA,QAAJ,EAAc;AACZ,WAAOT,WAAW,CAACU,KAAZ,CAAkBD,QAAQ,CAACE,MAA3B,CAAP;AACD;;AAED,SAAO,EAAP;AACD;;AAED,SAASC,qBAAT,OAA6C;AAAA,MAAZH,QAAY,QAAZA,QAAY;;AAAA,4BAKvCD,kBAAkB,CAACC,QAAD,CALqB;AAAA,MAGzCI,WAHyC,uBAGzCA,WAHyC;AAAA,MAIzCC,QAJyC,uBAIzCA,QAJyC;;AAO3C,UAAQD,WAAR;AACE,SAAK,OAAL;AACE,aACE,oBAAC,gCAAD;AACE,QAAA,iBAAiB,EAAEC,QAAQ,CAACP,KAAT,CAAe,GAAf,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF,SAAK,aAAL;AACE,aACE,oBAAC,gCAAD;AACE,QAAA,iBAAiB,EAAEL,eAAe,CAACY,QAAD,CADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF,SAAK,SAAL;AACE;AACA;AACA,aAAO,EAAP;;AAEF;AACE;AACA;AACA,aAAO,EAAP;AAvBJ;AAyBD;;AAEDF,qBAAqB,CAACG,SAAtB,GAAkC;AAChCN,EAAAA,QAAQ,EAAEX,SAAS,CAACkB,KAAV,CAAgB;AACxBL,IAAAA,MAAM,EAAEb,SAAS,CAACmB;AADM,GAAhB,EAEPC;AAH6B,CAAlC;AAMA,eAAenB,UAAU,CAACa,qBAAD,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData.js';\n\nfunction decodeStudyUids(studyUids) {\n  const decodedData = window.atob(studyUids);\n\n  return decodedData.split(';');\n}\n\nfunction getQueryParameters(location) {\n  if (location) {\n    return queryString.parse(location.search);\n  }\n\n  return {};\n}\n\nfunction IHEInvokeImageDisplay({ location }) {\n  const {\n    // patientID,\n    requestType,\n    studyUID,\n  } = getQueryParameters(location);\n\n  switch (requestType) {\n    case 'STUDY':\n      return (\n        <ConnectedViewerRetrieveStudyData\n          studyInstanceUids={studyUID.split(';')}\n        />\n      );\n\n    case 'STUDYBASE64':\n      return (\n        <ConnectedViewerRetrieveStudyData\n          studyInstanceUids={decodeStudyUids(studyUID)}\n        />\n      );\n\n    case 'PATIENT':\n      // TODO: connect this to the StudyList when we have the filter parameters set up\n      // return <StudyList patientUids={patientID.split(';')} />;\n      return '';\n\n    default:\n      // TODO: Figure out what to do here, this won't work because StudyList expects studies\n      // return <StudyList />;\n      return '';\n  }\n}\n\nIHEInvokeImageDisplay.propTypes = {\n  location: PropTypes.shape({\n    search: PropTypes.string,\n  }).isRequired,\n};\n\nexport default withRouter(IHEInvokeImageDisplay);\n"]},"metadata":{},"sourceType":"module"}