{"ast":null,"code":"import _classCallCheck from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bitnami/Viewers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bitnami/Viewers/src/connectedComponents/ViewerMain.js\";\nimport './ViewerMain.css';\nimport { Component } from 'react';\nimport ConnectedLayoutManager from './ConnectedLayoutManager.js';\nimport ConnectedToolContextMenu from './ConnectedToolContextMenu.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nvar ViewerMain =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ViewerMain, _Component);\n\n  function ViewerMain(props) {\n    var _this;\n\n    _classCallCheck(this, ViewerMain);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewerMain).call(this, props));\n\n    _this.getViewportData = function () {\n      var viewportData = [];\n      var _this$props = _this.props,\n          layout = _this$props.layout,\n          viewportSpecificData = _this$props.viewportSpecificData;\n\n      for (var viewportIndex = 0; viewportIndex < layout.viewports.length; viewportIndex++) {\n        var displaySet = viewportSpecificData[viewportIndex]; // Use the cached display set in viewport if the new one is empty\n\n        if (displaySet && !displaySet.displaySetInstanceUid) {\n          displaySet = _this.cachedViewportData[viewportIndex];\n        }\n\n        if (displaySet && displaySet.studyInstanceUid && displaySet.displaySetInstanceUid) {\n          // Get missing fields from original display set\n          var originalDisplaySet = _this.findDisplaySet(_this.props.studies, displaySet.studyInstanceUid, displaySet.displaySetInstanceUid);\n\n          viewportData.push(Object.assign({}, originalDisplaySet, displaySet));\n        } else {\n          // If the viewport is empty, get one available in study\n          var displaySets = _this.state.displaySets;\n          displaySet = displaySets.find(function (ds) {\n            return !viewportData.some(function (v) {\n              return v.displaySetInstanceUid === ds.displaySetInstanceUid;\n            });\n          });\n          viewportData.push(Object.assign({}, displaySet));\n        }\n      }\n\n      _this.cachedViewportData = viewportData;\n      return viewportData;\n    };\n\n    _this.setViewportData = function (_ref) {\n      var viewportIndex = _ref.viewportIndex,\n          item = _ref.item;\n\n      var displaySet = _this.findDisplaySet(_this.props.studies, item.studyInstanceUid, item.displaySetInstanceUid);\n\n      _this.props.setViewportSpecificData(viewportIndex, displaySet);\n    };\n\n    _this.state = {\n      displaySets: []\n    };\n    _this.cachedViewportData = {};\n    return _this;\n  }\n\n  _createClass(ViewerMain, [{\n    key: \"getDisplaySets\",\n    value: function getDisplaySets(studies) {\n      var displaySets = [];\n      studies.forEach(function (study) {\n        study.displaySets.forEach(function (dSet) {\n          if (!dSet.plugin) {\n            dSet.plugin = 'cornerstone';\n          }\n\n          displaySets.push(dSet);\n        });\n      });\n      return displaySets;\n    }\n  }, {\n    key: \"findDisplaySet\",\n    value: function findDisplaySet(studies, studyInstanceUid, displaySetInstanceUid) {\n      var study = studies.find(function (study) {\n        return study.studyInstanceUid === studyInstanceUid;\n      });\n\n      if (!study) {\n        return;\n      }\n\n      return study.displaySets.find(function (displaySet) {\n        return displaySet.displaySetInstanceUid === displaySetInstanceUid;\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Add beforeUnload event handler to check for unsaved changes\n      //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n      // Get all the display sets for the viewer studies\n      if (this.props.studies) {\n        var displaySets = this.getDisplaySets(this.props.studies);\n        this.setState({\n          displaySets: displaySets\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.studies !== prevProps.studies) {\n        var displaySets = this.getDisplaySets(this.props.studies);\n        this.setState({\n          displaySets: displaySets\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"ViewerMain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.state.displaySets.length && React.createElement(ConnectedLayoutManager, {\n        studies: this.props.studies,\n        viewportData: this.getViewportData(),\n        setViewportData: this.setViewportData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(ConnectedToolContextMenu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this2 = this;\n\n      // Clear the entire viewport specific data\n      var viewportSpecificData = this.props.viewportSpecificData;\n      Object.keys(viewportSpecificData).forEach(function (viewportIndex) {\n        _this2.props.clearViewportSpecificData(viewportIndex);\n      }); // TODO: These don't have to be viewer specific?\n      // Could qualify for other routes?\n      // hotkeys.destroy();\n      // Remove beforeUnload event handler...\n      //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n      // Destroy the synchronizer used to update reference lines\n      //OHIF.viewer.updateImageSynchronizer.destroy();\n      // TODO: Instruct all plugins to clean up themselves\n      //\n      // Clear references to all stacks in the StackManager\n      //StackManager.clearStacks();\n      // @TypeSafeStudies\n      // Clears OHIF.viewer.Studies collection\n      //OHIF.viewer.Studies.removeAll();\n      // @TypeSafeStudies\n      // Clears OHIF.viewer.StudyMetadataList collection\n      //OHIF.viewer.StudyMetadataList.removeAll();\n    }\n  }]);\n\n  return ViewerMain;\n}(Component);\n\nViewerMain.propTypes = {\n  activeViewportIndex: PropTypes.number.isRequired,\n  studies: PropTypes.array,\n  viewportSpecificData: PropTypes.object.isRequired,\n  layout: PropTypes.object.isRequired,\n  setViewportSpecificData: PropTypes.func.isRequired,\n  clearViewportSpecificData: PropTypes.func.isRequired\n};\nexport default ViewerMain;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/connectedComponents/ViewerMain.js"],"names":["Component","ConnectedLayoutManager","ConnectedToolContextMenu","PropTypes","React","ViewerMain","props","getViewportData","viewportData","layout","viewportSpecificData","viewportIndex","viewports","length","displaySet","displaySetInstanceUid","cachedViewportData","studyInstanceUid","originalDisplaySet","findDisplaySet","studies","push","Object","assign","displaySets","state","find","ds","some","v","setViewportData","item","setViewportSpecificData","forEach","study","dSet","plugin","getDisplaySets","setState","prevProps","keys","clearViewportSpecificData","propTypes","activeViewportIndex","number","isRequired","array","object","func"],"mappings":"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","sourcesContent":["import './ViewerMain.css';\n\nimport { Component } from 'react';\nimport ConnectedLayoutManager from './ConnectedLayoutManager.js';\nimport ConnectedToolContextMenu from './ConnectedToolContextMenu.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n\n    this.cachedViewportData = {};\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, studyInstanceUid, displaySetInstanceUid) {\n    const study = studies.find(study => {\n      return study.studyInstanceUid === studyInstanceUid;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUid === displaySetInstanceUid;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n\n      this.setState({\n        displaySets,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.studies !== prevProps.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n\n      this.setState({\n        displaySets,\n      });\n    }\n  }\n\n  getViewportData = () => {\n    const viewportData = [];\n    const { layout, viewportSpecificData } = this.props;\n\n    for (\n      let viewportIndex = 0;\n      viewportIndex < layout.viewports.length;\n      viewportIndex++\n    ) {\n      let displaySet = viewportSpecificData[viewportIndex];\n\n      // Use the cached display set in viewport if the new one is empty\n      if (displaySet && !displaySet.displaySetInstanceUid) {\n        displaySet = this.cachedViewportData[viewportIndex];\n      }\n\n      if (\n        displaySet &&\n        displaySet.studyInstanceUid &&\n        displaySet.displaySetInstanceUid\n      ) {\n        // Get missing fields from original display set\n        const originalDisplaySet = this.findDisplaySet(\n          this.props.studies,\n          displaySet.studyInstanceUid,\n          displaySet.displaySetInstanceUid\n        );\n        viewportData.push(Object.assign({}, originalDisplaySet, displaySet));\n      } else {\n        // If the viewport is empty, get one available in study\n        const { displaySets } = this.state;\n        displaySet = displaySets.find(\n          ds =>\n            !viewportData.some(\n              v => v.displaySetInstanceUid === ds.displaySetInstanceUid\n            )\n        );\n        viewportData.push(Object.assign({}, displaySet));\n      }\n    }\n\n    this.cachedViewportData = viewportData;\n\n    return viewportData;\n  };\n\n  setViewportData = ({ viewportIndex, item }) => {\n    const displaySet = this.findDisplaySet(\n      this.props.studies,\n      item.studyInstanceUid,\n      item.displaySetInstanceUid\n    );\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedLayoutManager\n          studies={this.props.studies}\n          viewportData={this.getViewportData()}\n          setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n            <ConnectedToolContextMenu />\n          </ConnectedLayoutManager>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n"]},"metadata":{},"sourceType":"module"}