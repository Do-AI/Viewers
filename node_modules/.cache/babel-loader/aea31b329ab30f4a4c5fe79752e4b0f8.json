{"ast":null,"code":"import { applyMiddleware, combineReducers, createStore } from 'redux'; // import { createLogger } from 'redux-logger';\n\nimport layoutReducers from './layout/reducers.js';\nimport { reducer as oidcReducer } from 'redux-oidc';\nimport { redux } from 'ohif-core';\nimport thunkMiddleware from 'redux-thunk'; // Combine our ohif-core, ui, and oidc reducers\n// Set init data, using values found in localStorage\n\nvar reducers = redux.reducers,\n    localStorage = redux.localStorage; // const loggerMiddleware = createLogger();\n\nreducers.ui = layoutReducers;\nreducers.oidc = oidcReducer;\nvar rootReducer = combineReducers(reducers);\nvar store = createStore(rootReducer, localStorage.loadState(), // preloadedState\napplyMiddleware(thunkMiddleware // Lets us dispatch() functions\n// loggerMiddleware // neat middleware that logs actions\n)); // When the store's preferences change,\n// Update our cached preferences in localStorage\n\nstore.subscribe(function () {\n  localStorage.saveState({\n    preferences: store.getState().preferences\n  });\n});\nexport default store;","map":{"version":3,"sources":["/home/bitnami/Viewers/src/store/index.js"],"names":["applyMiddleware","combineReducers","createStore","layoutReducers","reducer","oidcReducer","redux","thunkMiddleware","reducers","localStorage","ui","oidc","rootReducer","store","loadState","subscribe","saveState","preferences","getState"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,OAAOC,eAAP,MAA4B,aAA5B,C,CAEA;AACA;;IACQC,Q,GAA2BF,K,CAA3BE,Q;IAAUC,Y,GAAiBH,K,CAAjBG,Y,EAClB;;AAEAD,QAAQ,CAACE,EAAT,GAAcP,cAAd;AACAK,QAAQ,CAACG,IAAT,GAAgBN,WAAhB;AAEA,IAAMO,WAAW,GAAGX,eAAe,CAACO,QAAD,CAAnC;AACA,IAAMK,KAAK,GAAGX,WAAW,CACvBU,WADuB,EAEvBH,YAAY,CAACK,SAAb,EAFuB,EAEG;AAC1Bd,eAAe,CACbO,eADa,CACG;AAChB;AAFa,CAHQ,CAAzB,C,CASA;AACA;;AACAM,KAAK,CAACE,SAAN,CAAgB,YAAM;AACpBN,EAAAA,YAAY,CAACO,SAAb,CAAuB;AACrBC,IAAAA,WAAW,EAAEJ,KAAK,CAACK,QAAN,GAAiBD;AADT,GAAvB;AAGD,CAJD;AAMA,eAAeJ,KAAf","sourcesContent":["import { applyMiddleware, combineReducers, createStore } from 'redux';\n\n// import { createLogger } from 'redux-logger';\nimport layoutReducers from './layout/reducers.js';\nimport { reducer as oidcReducer } from 'redux-oidc';\nimport { redux } from 'ohif-core';\nimport thunkMiddleware from 'redux-thunk';\n\n// Combine our ohif-core, ui, and oidc reducers\n// Set init data, using values found in localStorage\nconst { reducers, localStorage } = redux;\n// const loggerMiddleware = createLogger();\n\nreducers.ui = layoutReducers;\nreducers.oidc = oidcReducer;\n\nconst rootReducer = combineReducers(reducers);\nconst store = createStore(\n  rootReducer,\n  localStorage.loadState(), // preloadedState\n  applyMiddleware(\n    thunkMiddleware // Lets us dispatch() functions\n    // loggerMiddleware // neat middleware that logs actions\n  )\n);\n\n// When the store's preferences change,\n// Update our cached preferences in localStorage\nstore.subscribe(() => {\n  localStorage.saveState({\n    preferences: store.getState().preferences,\n  });\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}