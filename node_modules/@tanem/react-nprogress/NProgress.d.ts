import * as PropTypes from 'prop-types';
import * as React from 'react';
export interface Props {
    animationDuration: number;
    children: (renderProps: RenderProps) => React.ReactNode;
    incrementDuration: number;
    isAnimating: boolean;
    minimum: number;
}
export interface State {
    isFinished: boolean;
    progress: number;
}
export declare type RenderProps = State & Pick<Props, 'animationDuration'>;
export declare class NProgress extends React.Component<Props, State> {
    static defaultProps: {
        animationDuration: number;
        incrementDuration: number;
        isAnimating: boolean;
        minimum: number;
    };
    static propTypes: {
        animationDuration: PropTypes.Requireable<number>;
        children: PropTypes.Requireable<(...args: any[]) => any>;
        incrementDuration: PropTypes.Requireable<number>;
        isAnimating: PropTypes.Requireable<boolean>;
        minimum: PropTypes.Requireable<number>;
    };
    initialState: {
        isFinished: boolean;
        progress: number;
    };
    state: {
        isFinished: boolean;
        progress: number;
    };
    start(): void;
    trickle(): void;
    set(n: number): void;
    cleanup(): void;
    done(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
