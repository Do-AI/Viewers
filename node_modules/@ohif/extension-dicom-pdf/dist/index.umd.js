(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ohif-core'), require('react'), require('prop-types'), require('dicom-parser')) :
  typeof define === 'function' && define.amd ? define(['ohif-core', 'react', 'prop-types', 'dicom-parser'], factory) :
  (global = global || self, global['ohif-dicom-pdf-extension'] = factory(global.OHIF, global.React, global.PropTypes, global.dicomParser));
}(this, function (OHIF, React, PropTypes, dicomParser) { 'use strict';

  var OHIF__default = 'default' in OHIF ? OHIF['default'] : OHIF;
  var React__default = 'default' in React ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;
  dicomParser = dicomParser && dicomParser.hasOwnProperty('default') ? dicomParser['default'] : dicomParser;

  var SOP_CLASS_UIDS = {
    ENCAPSULATED_PDF: '1.2.840.10008.5.1.4.1.1.104.1'
  };
  var OHIFDicomPDFSopClassHandler = {
    id: 'OHIFDicomPDFSopClassHandlerPlugin',
    type: OHIF.MODULE_TYPES.SOP_CLASS_HANDLER,
    sopClassUids: [SOP_CLASS_UIDS.ENCAPSULATED_PDF],
    getDisplaySetFromSeries: function getDisplaySetFromSeries(series, study, dicomWebClient, authorizationHeaders) {
      var instance = series.getFirstInstance();
      return {
        plugin: 'pdf',
        displaySetInstanceUid: OHIF.utils.guid(),
        wadoRoot: study.getData().wadoRoot,
        wadoUri: instance.getData().wadouri,
        sopInstanceUid: instance.getSOPInstanceUID(),
        seriesInstanceUid: series.getSeriesInstanceUID(),
        studyInstanceUid: study.getStudyInstanceUID(),
        authorizationHeaders: authorizationHeaders
      };
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function OHIFComponentPlugin(props) {
    return React__default.createElement(React__default.Fragment, null, props.children);
  }

  OHIFComponentPlugin.propTypes = {
    id: PropTypes.string.isRequired,
    init: PropTypes.func.isRequired,
    destroy: PropTypes.func.isRequired,
    children: PropTypes.node
  };

  // https://github.com/facebook/prop-types/issues/69
  var TypedArrayProp = {
    any: function any(props, propName, componentName) {
      var obj = props[propName];

      if (!(obj instanceof Float64Array || obj instanceof Float32Array || obj instanceof Int32Array || obj instanceof Int16Array || obj instanceof Int8Array || obj instanceof Uint32Array || obj instanceof Uint16Array || obj instanceof Uint8Array || obj instanceof Uint8ClampedArray)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a typed array.');
      }
    },
    float64: function float64(props, propName, componentName) {
      if (!(props[propName] instanceof Float64Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Float64Array.');
      }
    },
    float32: function float32(props, propName, componentName) {
      if (!(props[propName] instanceof Float32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Float32Array.');
      }
    },
    float: function float(props, propName, componentName) {
      if (!(props[propName] instanceof Float64Array || props[propName] instanceof Float32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Float32Array or Float64Array.');
      }
    },
    int32: function int32(props, propName, componentName) {
      if (!(props[propName] instanceof Int32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an Int32Array.');
      }
    },
    int16: function int16(props, propName, componentName) {
      if (!(props[propName] instanceof Int16Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an In16Array.');
      }
    },
    int8: function int8(props, propName, componentName) {
      if (!(props[propName] instanceof Int8Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an Int8Array.');
      }
    },
    int: function int(props, propName, componentName) {
      if (!(props[propName] instanceof Int32Array || props[propName] instanceof Int16Array || props[propName] instanceof Int8Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an Int32Array, In16Array, or Int8Array.');
      }
    },
    uint32: function uint32(props, propName, componentName) {
      if (!(props[propName] instanceof Uint32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint32Array.');
      }
    },
    uint16: function uint16(props, propName, componentName) {
      if (!(props[propName] instanceof Uint16Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint16Array.');
      }
    },
    uint8: function uint8(props, propName, componentName) {
      if (!(props[propName] instanceof Uint8Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint8Array.');
      }
    },
    uint8clamped: function uint8clamped(props, propName, componentName) {
      if (!(props[propName] instanceof Uint8ClampedArray)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint8ClampedArray.');
      }
    },
    uint: function uint(props, propName, componentName) {
      if (!(props[propName] instanceof Uint32Array || props[propName] instanceof Uint16Array || props[propName] instanceof Uint8Array || props[propName] instanceof Uint8ClampedArray)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint32Array, Uint16Array, Uint8Array, or Uint8ClampedArray.');
      }
    }
  };

  var SOP_CLASS_UIDS$1 = {
    ENCAPSULATED_PDF: '1.2.840.10008.5.1.4.1.1.104.1'
  };

  var DicomPDFViewport =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DicomPDFViewport, _Component);

    function DicomPDFViewport() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, DicomPDFViewport);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DicomPDFViewport)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        fileURL: null,
        error: null
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderPDF", function (dataSet) {
        var sopClassUid = dataSet.string('x00080016');

        if (sopClassUid !== SOP_CLASS_UIDS$1.ENCAPSULATED_PDF) {
          throw new Error('This is not a DICOM-encapsulated PDF');
        }

        var fileTag = dataSet.elements.x00420011;
        var offset = fileTag.dataOffset;
        var remainder = offset + fileTag.length;
        var pdfByteArray = dataSet.byteArray.slice(offset, remainder);
        var PDF = new Blob([pdfByteArray], {
          type: 'application/pdf'
        });
        var fileURL = URL.createObjectURL(PDF);

        _this.setState({
          fileURL: fileURL
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "parseByteArray", function (byteArray) {
        var options = {
          untilTag: ''
        };
        var dataSet;

        try {
          dataSet = dicomParser.parseDicom(byteArray, options);
        } catch (error) {
          _this.setState({
            error: error
          });
        }

        return dataSet;
      });

      return _this;
    }

    _createClass(DicomPDFViewport, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var dataSet = this.parseByteArray(this.props.byteArray);
        this.renderPDF(dataSet);
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement("div", {
          className: 'DicomPDFViewport',
          style: {
            width: '100%',
            height: '100%'
          }
        }, this.state.fileURL && React__default.createElement("object", {
          data: this.state.fileURL,
          type: "application/pdf",
          width: "100%",
          height: "100%"
        }), this.state.error && React__default.createElement("h2", null, JSON.stringify(this.state.error)));
      }
    }]);

    return DicomPDFViewport;
  }(React.Component);

  _defineProperty(DicomPDFViewport, "propTypes", {
    byteArray: TypedArrayProp.uint8
  });

  var DICOMWeb = OHIF__default.DICOMWeb;

  var OHIFDicomPDFViewport =
  /*#__PURE__*/
  function (_Component) {
    _inherits(OHIFDicomPDFViewport, _Component);

    function OHIFDicomPDFViewport() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, OHIFDicomPDFViewport);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OHIFDicomPDFViewport)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        byteArray: null,
        error: null
      });

      return _this;
    }

    _createClass(OHIFDicomPDFViewport, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var displaySet = this.props.viewportData.displaySet;
        var studyInstanceUid = displaySet.studyInstanceUid,
            seriesInstanceUid = displaySet.seriesInstanceUid,
            sopInstanceUid = displaySet.sopInstanceUid,
            wadoRoot = displaySet.wadoRoot,
            wadoUri = displaySet.wadoUri,
            authorizationHeaders = displaySet.authorizationHeaders;
        this.retrieveDicomData(studyInstanceUid, seriesInstanceUid, sopInstanceUid, wadoRoot, wadoUri, authorizationHeaders).then(function (byteArray) {
          _this2.setState({
            byteArray: byteArray
          });
        }, function (error) {
          _this2.setState({
            error: error
          });

          throw new Error(error);
        });
      }
    }, {
      key: "retrieveDicomData",
      value: function retrieveDicomData(studyInstanceUid, seriesInstanceUid, sopInstanceUid, wadoRoot, wadoUri, authorizationHeaders) {
        // TODO: Passing in a lot of data we aren't using
        // TODO: Authorization header depends on the server. If we ever have multiple servers
        // we will need to figure out how / when to pass this information in.
        return fetch(wadoUri, {
          headers: authorizationHeaders
        }).then(function (response) {
          return response.arrayBuffer();
        }).then(function (arraybuffer) {
          return new Uint8Array(arraybuffer);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var id = OHIFDicomPDFViewport.id,
            init = OHIFDicomPDFViewport.init,
            destroy = OHIFDicomPDFViewport.destroy;
        var pluginProps = {
          id: id,
          init: init,
          destroy: destroy
        };
        return React__default.createElement(OHIFComponentPlugin, pluginProps, this.state.byteArray && React__default.createElement(DicomPDFViewport, {
          byteArray: this.state.byteArray
        }), this.state.error && React__default.createElement("h2", null, JSON.stringify(this.state.error)));
      }
    }], [{
      key: "init",
      value: function init() {
        console.log('DicomPDFViewport init()');
      }
    }, {
      key: "destroy",
      value: function destroy() {
        console.log('DicomPDFViewport destroy()');
      }
    }]);

    return OHIFDicomPDFViewport;
  }(React.Component);

  _defineProperty(OHIFDicomPDFViewport, "propTypes", {
    studies: PropTypes.object,
    displaySet: PropTypes.object,
    viewportIndex: PropTypes.number
  });

  _defineProperty(OHIFDicomPDFViewport, "id", 'DicomPDFViewportPDF');

  var index = {
    /**
     * Only required property. Should be a unique value across all extensions.
     */
    id: 'pdf',
    getViewportModule: function getViewportModule() {
      return OHIFDicomPDFViewport;
    },
    getSopClassHandlerModule: function getSopClassHandlerModule() {
      return OHIFDicomPDFSopClassHandler;
    }
  };

  return index;

}));
//# sourceMappingURL=index.umd.js.map
