(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ohif-core'), require('react'), require('prop-types'), require('dcmjs')) :
  typeof define === 'function' && define.amd ? define(['ohif-core', 'react', 'prop-types', 'dcmjs'], factory) :
  (global = global || self, global['ohif-dicom-pdf-extension'] = factory(global.OHIF, global.React, global.PropTypes, global.dcmjs));
}(this, function (ohifCore, React, PropTypes, dcmjs) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;

  var SOP_CLASS_UIDS = {
    BASIC_TEXT_SR: '1.2.840.10008.5.1.4.1.1.88.11',
    ENHANCED_SR: '1.2.840.10008.5.1.4.1.1.88.22',
    COMPREHENSIVE_SR: '1.2.840.10008.5.1.4.1.1.88.33',
    PROCEDURE_LOG_STORAGE: '1.2.840.10008.5.1.4.1.1.88.40',
    MAMMOGRAPHY_CAD_SR: '1.2.840.10008.5.1.4.1.1.88.50',
    CHEST_CAD_SR: '1.2.840.10008.5.1.4.1.1.88.65',
    X_RAY_RADIATION_DOSE_SR: '1.2.840.10008.5.1.4.1.1.88.67'
  };
  var sopClassUids = Object.values(SOP_CLASS_UIDS); // TODO: Handle the case where there is more than one SOP Class Handler for the
  // same SOP Class

  var OHIFDicomHtmlSopClassHandler = {
    id: 'OHIFDicomHtmlSopClassHandler',
    type: ohifCore.MODULE_TYPES.SOP_CLASS_HANDLER,
    sopClassUids: sopClassUids,
    getDisplaySetFromSeries: function getDisplaySetFromSeries(series, study, dicomWebClient, authorizationHeaders) {
      var instance = series.getFirstInstance();
      return {
        plugin: 'html',
        displaySetInstanceUid: ohifCore.utils.guid(),
        wadoRoot: study.getData().wadoRoot,
        wadoUri: instance.getData().wadouri,
        sopInstanceUid: instance.getSOPInstanceUID(),
        seriesInstanceUid: series.getSeriesInstanceUID(),
        studyInstanceUid: study.getStudyInstanceUID(),
        authorizationHeaders: authorizationHeaders
      };
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  // https://github.com/facebook/prop-types/issues/69
  var TypedArrayProp = {
    any: function any(props, propName, componentName) {
      var obj = props[propName];

      if (!(obj instanceof Float64Array || obj instanceof Float32Array || obj instanceof Int32Array || obj instanceof Int16Array || obj instanceof Int8Array || obj instanceof Uint32Array || obj instanceof Uint16Array || obj instanceof Uint8Array || obj instanceof Uint8ClampedArray)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a typed array.');
      }
    },
    float64: function float64(props, propName, componentName) {
      if (!(props[propName] instanceof Float64Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Float64Array.');
      }
    },
    float32: function float32(props, propName, componentName) {
      if (!(props[propName] instanceof Float32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Float32Array.');
      }
    },
    float: function float(props, propName, componentName) {
      if (!(props[propName] instanceof Float64Array || props[propName] instanceof Float32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Float32Array or Float64Array.');
      }
    },
    int32: function int32(props, propName, componentName) {
      if (!(props[propName] instanceof Int32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an Int32Array.');
      }
    },
    int16: function int16(props, propName, componentName) {
      if (!(props[propName] instanceof Int16Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an In16Array.');
      }
    },
    int8: function int8(props, propName, componentName) {
      if (!(props[propName] instanceof Int8Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an Int8Array.');
      }
    },
    int: function int(props, propName, componentName) {
      if (!(props[propName] instanceof Int32Array || props[propName] instanceof Int16Array || props[propName] instanceof Int8Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected an Int32Array, In16Array, or Int8Array.');
      }
    },
    uint32: function uint32(props, propName, componentName) {
      if (!(props[propName] instanceof Uint32Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint32Array.');
      }
    },
    uint16: function uint16(props, propName, componentName) {
      if (!(props[propName] instanceof Uint16Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint16Array.');
      }
    },
    uint8: function uint8(props, propName, componentName) {
      if (!(props[propName] instanceof Uint8Array)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint8Array.');
      }
    },
    uint8clamped: function uint8clamped(props, propName, componentName) {
      if (!(props[propName] instanceof Uint8ClampedArray)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint8ClampedArray.');
      }
    },
    uint: function uint(props, propName, componentName) {
      if (!(props[propName] instanceof Uint32Array || props[propName] instanceof Uint16Array || props[propName] instanceof Uint8Array || props[propName] instanceof Uint8ClampedArray)) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a Uint32Array, Uint16Array, Uint8Array, or Uint8ClampedArray.');
      }
    }
  };

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css = ":root {\n  --text-color-primary: white;\n}\n\n.DicomHtmlViewport {\n  padding: 20px;\n  overflow-y: scroll;\n  width: 100%;\n  height: 100%;\n  color: var(--text-color-primary);\n}\n";
  styleInject(css);

  var _dcmjs$data = dcmjs.data,
      DicomMetaDictionary = _dcmjs$data.DicomMetaDictionary,
      DicomMessage = _dcmjs$data.DicomMessage;

  function getMainData(data) {
    var root = [];
    var patientValue = "".concat(data.PatientName, " (").concat(data.PatientSex, ", #").concat(data.PatientID, ")");
    root.push(getMainDataItem('Patient', patientValue));
    var studyValue = data.StudyDescription;
    root.push(getMainDataItem('Study', studyValue));
    var seriesValue = "".concat(data.SeriesDescription, " (#").concat(data.SeriesNumber, ")");
    root.push(getMainDataItem('Series', seriesValue));
    var manufacturerValue = "".concat(data.Manufacturer, " (").concat(data.ManufacturerModelName, ", #").concat(data.DeviceSerialNumber, ")");
    root.push(getMainDataItem('Manufacturer', manufacturerValue));
    var mainDataObjects = {
      CompletionFlag: 'Completion flag',
      VerificationFlag: 'Verification flag'
    };
    Object.keys(mainDataObjects).forEach(function (key) {
      if (!data[key]) {
        return;
      }

      var item = getMainDataItem(mainDataObjects[key], data[key]);
      root.push(item);
    }); // TODO: Format these dates

    var contentDateTimeValue = "".concat(data.ContentDate, " ").concat(data.ContentTime);
    root.push(getMainDataItem('Content Date/Time', contentDateTimeValue));
    root.push();
    return React__default.createElement("div", null, root);
  }

  var getContentSequence = function getContentSequence(data) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var header;

    if (data.ConceptNameCodeSequence) {
      var _data$ConceptNameCode2 = data.ConceptNameCodeSequence,
          CodeMeaning = _data$ConceptNameCode2.CodeMeaning,
          CodeValue = _data$ConceptNameCode2.CodeValue,
          CodingSchemeDesignator = _data$ConceptNameCode2.CodingSchemeDesignator;
      header = "".concat(CodeMeaning, " (").concat(CodeValue, " - ").concat(CodingSchemeDesignator, ")");
    }

    var root = [];

    if (header) {
      var HeaderDynamicLevel = "h".concat(level);
      root.push(React__default.createElement(HeaderDynamicLevel, {
        key: header
      }, header));
    }

    Object.keys(data).forEach(function (key) {
      var value = data[key];
      var content;

      if (value instanceof Object) {
        content = getContentSequence(value, level + 1);
      } else {
        content = React__default.createElement("div", {
          key: key
        }, key, " - ", data[key]);
      }

      root.push(content);
    });
    return React__default.createElement("div", null, root);
  };

  function getMainDataItem(key, value) {
    return React__default.createElement("div", {
      key: key
    }, React__default.createElement("b", null, key), ": ", value);
  }

  var DicomHtmlViewport =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DicomHtmlViewport, _Component);

    function DicomHtmlViewport() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, DicomHtmlViewport);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DicomHtmlViewport)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        content: null,
        error: null
      });

      return _this;
    }

    _createClass(DicomHtmlViewport, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var dataSet = this.setContentFromByteArray(this.props.byteArray);
      }
    }, {
      key: "setContentFromByteArray",
      value: function setContentFromByteArray(byteArray) {
        var arrayBuffer = byteArray.buffer;
        var dicomData = DicomMessage.readFile(arrayBuffer);
        var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
        dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
        var mainData = getMainData(dataset);
        var contentSequence = getContentSequence(dataset);
        var content = React__default.createElement(React__default.Fragment, null, mainData, contentSequence);
        this.setState({
          content: content
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement("div", {
          className: 'DicomHtmlViewport'
        }, this.state.content, this.state.error && React__default.createElement("h2", null, JSON.stringify(this.state.error)));
      }
    }]);

    return DicomHtmlViewport;
  }(React.Component);

  _defineProperty(DicomHtmlViewport, "propTypes", {
    byteArray: TypedArrayProp.uint8
  });

  var OHIFDicomHtmlViewport =
  /*#__PURE__*/
  function (_Component) {
    _inherits(OHIFDicomHtmlViewport, _Component);

    function OHIFDicomHtmlViewport() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, OHIFDicomHtmlViewport);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OHIFDicomHtmlViewport)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        byteArray: null,
        error: null
      });

      return _this;
    }

    _createClass(OHIFDicomHtmlViewport, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var displaySet = this.props.viewportData.displaySet;
        var studyInstanceUid = displaySet.studyInstanceUid,
            seriesInstanceUid = displaySet.seriesInstanceUid,
            sopInstanceUid = displaySet.sopInstanceUid,
            wadoRoot = displaySet.wadoRoot,
            wadoUri = displaySet.wadoUri,
            authorizationHeaders = displaySet.authorizationHeaders;
        this.retrieveDicomData(studyInstanceUid, seriesInstanceUid, sopInstanceUid, wadoRoot, wadoUri, authorizationHeaders).then(function (byteArray) {
          _this2.setState({
            byteArray: byteArray
          });
        }, function (error) {
          _this2.setState({
            error: error
          });

          throw new Error(error);
        });
      }
    }, {
      key: "retrieveDicomData",
      value: function retrieveDicomData(studyInstanceUid, seriesInstanceUid, sopInstanceUid, wadoRoot, wadoUri, authorizationHeaders) {
        // TODO: Passing in a lot of data we aren't using
        // TODO: Authorization header depends on the server. If we ever have multiple servers
        // we will need to figure out how / when to pass this information in.
        return fetch(wadoUri, {
          headers: authorizationHeaders
        }).then(function (response) {
          return response.arrayBuffer();
        }).then(function (arraybuffer) {
          return new Uint8Array(arraybuffer);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement(React__default.Fragment, null, this.state.byteArray && React__default.createElement(DicomHtmlViewport, {
          byteArray: this.state.byteArray
        }), this.state.error && React__default.createElement("h2", null, JSON.stringify(this.state.error)));
      }
    }]);

    return OHIFDicomHtmlViewport;
  }(React.Component);

  _defineProperty(OHIFDicomHtmlViewport, "propTypes", {
    studies: PropTypes.object,
    displaySet: PropTypes.object,
    viewportIndex: PropTypes.number
  });

  var index = {
    /**
     * Only required property. Should be a unique value across all extensions.
     */
    id: 'html',
    getViewportModule: function getViewportModule() {
      return OHIFDicomHtmlViewport;
    },
    getSopClassHandlerModule: function getSopClassHandlerModule() {
      return OHIFDicomHtmlSopClassHandler;
    }
  };

  return index;

}));
//# sourceMappingURL=index.umd.js.map
